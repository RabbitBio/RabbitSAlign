#ifndef _H_MY_SHARED_MERGE_KERNELS_FULL_WARPS
#define _H_MY_SHARED_MERGE_KERNELS_FULL_WARPS

#include <limits>

#include "bb_exch.h"

// ------------ ONLY FULL WARP KERNELS --------------

// segsize 512

// 256 threads per block | 2 ppt
template<class K, class T>
__global__
void my_blk256_ppt2_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[512];
	__shared__ int tmem[512];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	int rg_v0;
	int rg_v1;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 63) / 64);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<6)+0	<seg_size)?key[k+tid1+(warp_id<<6)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<6)+32	<seg_size)?key[k+tid1+(warp_id<<6)+32	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<6)+0	<seg_size) rg_v0  = tid1+(warp_id<<6)+0	;
			if (tid1+(warp_id<<6)+32	<seg_size) rg_v1  = tid1+(warp_id<<6)+32	;

			// sort 64 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);

			// Store register results to shared memory
			smem[(warp_id<<6) + (tid1<<1) + 0] = rg_k0;
			smem[(warp_id<<6) + (tid1<<1) + 1] = rg_k1;
			tmem[(warp_id<<6) + (tid1<<1) + 0] = rg_v0;
			tmem[(warp_id<<6) + (tid1<<1) + 1] = rg_v1;
		}
		__syncthreads();

		// Merge in 3 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 64;
			rhs_len = 64;
			gran = tid1<<1;
			gran += (warp_id & 1) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 128;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 3) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 256;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 7) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;

			if((tid<<1)+0 <seg_size) keyB[k+(tid<<1)+0] = rg_k0;
			if((tid<<1)+1 <seg_size) keyB[k+(tid<<1)+1] = rg_k1;
			if((tid<<1)+0 <seg_size) valB[k+(tid<<1)+0] = val[k + rg_v0];
			if((tid<<1)+1 <seg_size) valB[k+(tid<<1)+1] = val[k + rg_v1];
		}
	}
}

// 128 threads per block | 4 ppt
template<class K, class T>
__global__
void my_blk128_ppt4_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[512];
	__shared__ int tmem[512];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 127) / 128);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<7)+0	<seg_size)?key[k+tid1+(warp_id<<7)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<7)+32	<seg_size)?key[k+tid1+(warp_id<<7)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<7)+64	<seg_size)?key[k+tid1+(warp_id<<7)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<7)+96	<seg_size)?key[k+tid1+(warp_id<<7)+96	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<7)+0	<seg_size) rg_v0  = tid1+(warp_id<<7)+0	;
			if (tid1+(warp_id<<7)+32	<seg_size) rg_v1  = tid1+(warp_id<<7)+32	;
			if (tid1+(warp_id<<7)+64	<seg_size) rg_v2  = tid1+(warp_id<<7)+64	;
			if (tid1+(warp_id<<7)+96	<seg_size) rg_v3  = tid1+(warp_id<<7)+96	;

			// sort 128 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);

			// Store register results to shared memory
			smem[(warp_id<<7) + (tid1<<2) + 0] = rg_k0;
			smem[(warp_id<<7) + (tid1<<2) + 1] = rg_k1;
			smem[(warp_id<<7) + (tid1<<2) + 2] = rg_k2;
			smem[(warp_id<<7) + (tid1<<2) + 3] = rg_k3;
			tmem[(warp_id<<7) + (tid1<<2) + 0] = rg_v0;
			tmem[(warp_id<<7) + (tid1<<2) + 1] = rg_v1;
			tmem[(warp_id<<7) + (tid1<<2) + 2] = rg_v2;
			tmem[(warp_id<<7) + (tid1<<2) + 3] = rg_v3;
		}
		__syncthreads();

		// Merge in 2 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 128;
			rhs_len = 128;
			gran = tid1<<2;
			gran += (warp_id & 1) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 256;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 3) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;

			if((tid<<2)+0 <seg_size) keyB[k+(tid<<2)+0] = rg_k0;
			if((tid<<2)+1 <seg_size) keyB[k+(tid<<2)+1] = rg_k1;
			if((tid<<2)+2 <seg_size) keyB[k+(tid<<2)+2] = rg_k2;
			if((tid<<2)+3 <seg_size) keyB[k+(tid<<2)+3] = rg_k3;
			if((tid<<2)+0 <seg_size) valB[k+(tid<<2)+0] = val[k + rg_v0];
			if((tid<<2)+1 <seg_size) valB[k+(tid<<2)+1] = val[k + rg_v1];
			if((tid<<2)+2 <seg_size) valB[k+(tid<<2)+2] = val[k + rg_v2];
			if((tid<<2)+3 <seg_size) valB[k+(tid<<2)+3] = val[k + rg_v3];
		}
	}
}

// 64 threads per block | 8 ppt
template<class K, class T>
__global__
void my_blk64_ppt8_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[512];
	__shared__ int tmem[512];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 255) / 256);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<8)+0	<seg_size)?key[k+tid1+(warp_id<<8)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<8)+32	<seg_size)?key[k+tid1+(warp_id<<8)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<8)+64	<seg_size)?key[k+tid1+(warp_id<<8)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<8)+96	<seg_size)?key[k+tid1+(warp_id<<8)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<8)+128	<seg_size)?key[k+tid1+(warp_id<<8)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<8)+160	<seg_size)?key[k+tid1+(warp_id<<8)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<8)+192	<seg_size)?key[k+tid1+(warp_id<<8)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<8)+224	<seg_size)?key[k+tid1+(warp_id<<8)+224	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<8)+0	<seg_size) rg_v0  = tid1+(warp_id<<8)+0	;
			if (tid1+(warp_id<<8)+32	<seg_size) rg_v1  = tid1+(warp_id<<8)+32	;
			if (tid1+(warp_id<<8)+64	<seg_size) rg_v2  = tid1+(warp_id<<8)+64	;
			if (tid1+(warp_id<<8)+96	<seg_size) rg_v3  = tid1+(warp_id<<8)+96	;
			if (tid1+(warp_id<<8)+128	<seg_size) rg_v4  = tid1+(warp_id<<8)+128	;
			if (tid1+(warp_id<<8)+160	<seg_size) rg_v5  = tid1+(warp_id<<8)+160	;
			if (tid1+(warp_id<<8)+192	<seg_size) rg_v6  = tid1+(warp_id<<8)+192	;
			if (tid1+(warp_id<<8)+224	<seg_size) rg_v7  = tid1+(warp_id<<8)+224	;

			// sort 256 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);

			// Store register results to shared memory
			smem[(warp_id<<8) + (tid1<<3) + 0] = rg_k0;
			smem[(warp_id<<8) + (tid1<<3) + 1] = rg_k1;
			smem[(warp_id<<8) + (tid1<<3) + 2] = rg_k2;
			smem[(warp_id<<8) + (tid1<<3) + 3] = rg_k3;
			smem[(warp_id<<8) + (tid1<<3) + 4] = rg_k4;
			smem[(warp_id<<8) + (tid1<<3) + 5] = rg_k5;
			smem[(warp_id<<8) + (tid1<<3) + 6] = rg_k6;
			smem[(warp_id<<8) + (tid1<<3) + 7] = rg_k7;
			tmem[(warp_id<<8) + (tid1<<3) + 0] = rg_v0;
			tmem[(warp_id<<8) + (tid1<<3) + 1] = rg_v1;
			tmem[(warp_id<<8) + (tid1<<3) + 2] = rg_v2;
			tmem[(warp_id<<8) + (tid1<<3) + 3] = rg_v3;
			tmem[(warp_id<<8) + (tid1<<3) + 4] = rg_v4;
			tmem[(warp_id<<8) + (tid1<<3) + 5] = rg_v5;
			tmem[(warp_id<<8) + (tid1<<3) + 6] = rg_v6;
			tmem[(warp_id<<8) + (tid1<<3) + 7] = rg_v7;
		}
		__syncthreads();

		// Merge in 1 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 256;
			rhs_len = 256;
			gran = tid1<<3;
			gran += (warp_id & 1) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;

			if((tid<<3)+0 <seg_size) keyB[k+(tid<<3)+0] = rg_k0;
			if((tid<<3)+1 <seg_size) keyB[k+(tid<<3)+1] = rg_k1;
			if((tid<<3)+2 <seg_size) keyB[k+(tid<<3)+2] = rg_k2;
			if((tid<<3)+3 <seg_size) keyB[k+(tid<<3)+3] = rg_k3;
			if((tid<<3)+4 <seg_size) keyB[k+(tid<<3)+4] = rg_k4;
			if((tid<<3)+5 <seg_size) keyB[k+(tid<<3)+5] = rg_k5;
			if((tid<<3)+6 <seg_size) keyB[k+(tid<<3)+6] = rg_k6;
			if((tid<<3)+7 <seg_size) keyB[k+(tid<<3)+7] = rg_k7;
			if((tid<<3)+0 <seg_size) valB[k+(tid<<3)+0] = val[k + rg_v0];
			if((tid<<3)+1 <seg_size) valB[k+(tid<<3)+1] = val[k + rg_v1];
			if((tid<<3)+2 <seg_size) valB[k+(tid<<3)+2] = val[k + rg_v2];
			if((tid<<3)+3 <seg_size) valB[k+(tid<<3)+3] = val[k + rg_v3];
			if((tid<<3)+4 <seg_size) valB[k+(tid<<3)+4] = val[k + rg_v4];
			if((tid<<3)+5 <seg_size) valB[k+(tid<<3)+5] = val[k + rg_v5];
			if((tid<<3)+6 <seg_size) valB[k+(tid<<3)+6] = val[k + rg_v6];
			if((tid<<3)+7 <seg_size) valB[k+(tid<<3)+7] = val[k + rg_v7];
		}
	}
}

// segsize 1024

// 512 threads per block | 2 ppt
template<class K, class T>
__global__
void my_blk512_ppt2_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[1024];
	__shared__ int tmem[1024];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	int rg_v0;
	int rg_v1;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 63) / 64);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<6)+0	<seg_size)?key[k+tid1+(warp_id<<6)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<6)+32	<seg_size)?key[k+tid1+(warp_id<<6)+32	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<6)+0	<seg_size) rg_v0  = tid1+(warp_id<<6)+0	;
			if (tid1+(warp_id<<6)+32	<seg_size) rg_v1  = tid1+(warp_id<<6)+32	;

			// sort 64 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);

			// Store register results to shared memory
			smem[(warp_id<<6) + (tid1<<1) + 0] = rg_k0;
			smem[(warp_id<<6) + (tid1<<1) + 1] = rg_k1;
			tmem[(warp_id<<6) + (tid1<<1) + 0] = rg_v0;
			tmem[(warp_id<<6) + (tid1<<1) + 1] = rg_v1;
		}
		__syncthreads();

		// Merge in 4 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 64;
			rhs_len = 64;
			gran = tid1<<1;
			gran += (warp_id & 1) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 128;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 3) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 256;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 7) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 512;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 15) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;

			if((tid<<1)+0 <seg_size) keyB[k+(tid<<1)+0] = rg_k0;
			if((tid<<1)+1 <seg_size) keyB[k+(tid<<1)+1] = rg_k1;
			if((tid<<1)+0 <seg_size) valB[k+(tid<<1)+0] = val[k + rg_v0];
			if((tid<<1)+1 <seg_size) valB[k+(tid<<1)+1] = val[k + rg_v1];
		}
	}
}

// 256 threads per block | 4 ppt
template<class K, class T>
__global__
void my_blk256_ppt4_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[1024];
	__shared__ int tmem[1024];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 127) / 128);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<7)+0	<seg_size)?key[k+tid1+(warp_id<<7)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<7)+32	<seg_size)?key[k+tid1+(warp_id<<7)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<7)+64	<seg_size)?key[k+tid1+(warp_id<<7)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<7)+96	<seg_size)?key[k+tid1+(warp_id<<7)+96	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<7)+0	<seg_size) rg_v0  = tid1+(warp_id<<7)+0	;
			if (tid1+(warp_id<<7)+32	<seg_size) rg_v1  = tid1+(warp_id<<7)+32	;
			if (tid1+(warp_id<<7)+64	<seg_size) rg_v2  = tid1+(warp_id<<7)+64	;
			if (tid1+(warp_id<<7)+96	<seg_size) rg_v3  = tid1+(warp_id<<7)+96	;

			// sort 128 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);

			// Store register results to shared memory
			smem[(warp_id<<7) + (tid1<<2) + 0] = rg_k0;
			smem[(warp_id<<7) + (tid1<<2) + 1] = rg_k1;
			smem[(warp_id<<7) + (tid1<<2) + 2] = rg_k2;
			smem[(warp_id<<7) + (tid1<<2) + 3] = rg_k3;
			tmem[(warp_id<<7) + (tid1<<2) + 0] = rg_v0;
			tmem[(warp_id<<7) + (tid1<<2) + 1] = rg_v1;
			tmem[(warp_id<<7) + (tid1<<2) + 2] = rg_v2;
			tmem[(warp_id<<7) + (tid1<<2) + 3] = rg_v3;
		}
		__syncthreads();

		// Merge in 3 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 128;
			rhs_len = 128;
			gran = tid1<<2;
			gran += (warp_id & 1) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 256;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 3) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 512;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 7) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;

			if((tid<<2)+0 <seg_size) keyB[k+(tid<<2)+0] = rg_k0;
			if((tid<<2)+1 <seg_size) keyB[k+(tid<<2)+1] = rg_k1;
			if((tid<<2)+2 <seg_size) keyB[k+(tid<<2)+2] = rg_k2;
			if((tid<<2)+3 <seg_size) keyB[k+(tid<<2)+3] = rg_k3;
			if((tid<<2)+0 <seg_size) valB[k+(tid<<2)+0] = val[k + rg_v0];
			if((tid<<2)+1 <seg_size) valB[k+(tid<<2)+1] = val[k + rg_v1];
			if((tid<<2)+2 <seg_size) valB[k+(tid<<2)+2] = val[k + rg_v2];
			if((tid<<2)+3 <seg_size) valB[k+(tid<<2)+3] = val[k + rg_v3];
		}
	}
}

// 128 threads per block | 8 ppt
template<class K, class T>
__global__
void my_blk128_ppt8_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[1024];
	__shared__ int tmem[1024];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 255) / 256);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<8)+0	<seg_size)?key[k+tid1+(warp_id<<8)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<8)+32	<seg_size)?key[k+tid1+(warp_id<<8)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<8)+64	<seg_size)?key[k+tid1+(warp_id<<8)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<8)+96	<seg_size)?key[k+tid1+(warp_id<<8)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<8)+128	<seg_size)?key[k+tid1+(warp_id<<8)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<8)+160	<seg_size)?key[k+tid1+(warp_id<<8)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<8)+192	<seg_size)?key[k+tid1+(warp_id<<8)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<8)+224	<seg_size)?key[k+tid1+(warp_id<<8)+224	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<8)+0	<seg_size) rg_v0  = tid1+(warp_id<<8)+0	;
			if (tid1+(warp_id<<8)+32	<seg_size) rg_v1  = tid1+(warp_id<<8)+32	;
			if (tid1+(warp_id<<8)+64	<seg_size) rg_v2  = tid1+(warp_id<<8)+64	;
			if (tid1+(warp_id<<8)+96	<seg_size) rg_v3  = tid1+(warp_id<<8)+96	;
			if (tid1+(warp_id<<8)+128	<seg_size) rg_v4  = tid1+(warp_id<<8)+128	;
			if (tid1+(warp_id<<8)+160	<seg_size) rg_v5  = tid1+(warp_id<<8)+160	;
			if (tid1+(warp_id<<8)+192	<seg_size) rg_v6  = tid1+(warp_id<<8)+192	;
			if (tid1+(warp_id<<8)+224	<seg_size) rg_v7  = tid1+(warp_id<<8)+224	;

			// sort 256 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);

			// Store register results to shared memory
			smem[(warp_id<<8) + (tid1<<3) + 0] = rg_k0;
			smem[(warp_id<<8) + (tid1<<3) + 1] = rg_k1;
			smem[(warp_id<<8) + (tid1<<3) + 2] = rg_k2;
			smem[(warp_id<<8) + (tid1<<3) + 3] = rg_k3;
			smem[(warp_id<<8) + (tid1<<3) + 4] = rg_k4;
			smem[(warp_id<<8) + (tid1<<3) + 5] = rg_k5;
			smem[(warp_id<<8) + (tid1<<3) + 6] = rg_k6;
			smem[(warp_id<<8) + (tid1<<3) + 7] = rg_k7;
			tmem[(warp_id<<8) + (tid1<<3) + 0] = rg_v0;
			tmem[(warp_id<<8) + (tid1<<3) + 1] = rg_v1;
			tmem[(warp_id<<8) + (tid1<<3) + 2] = rg_v2;
			tmem[(warp_id<<8) + (tid1<<3) + 3] = rg_v3;
			tmem[(warp_id<<8) + (tid1<<3) + 4] = rg_v4;
			tmem[(warp_id<<8) + (tid1<<3) + 5] = rg_v5;
			tmem[(warp_id<<8) + (tid1<<3) + 6] = rg_v6;
			tmem[(warp_id<<8) + (tid1<<3) + 7] = rg_v7;
		}
		__syncthreads();

		// Merge in 2 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 256;
			rhs_len = 256;
			gran = tid1<<3;
			gran += (warp_id & 1) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 512;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 3) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;

			if((tid<<3)+0 <seg_size) keyB[k+(tid<<3)+0] = rg_k0;
			if((tid<<3)+1 <seg_size) keyB[k+(tid<<3)+1] = rg_k1;
			if((tid<<3)+2 <seg_size) keyB[k+(tid<<3)+2] = rg_k2;
			if((tid<<3)+3 <seg_size) keyB[k+(tid<<3)+3] = rg_k3;
			if((tid<<3)+4 <seg_size) keyB[k+(tid<<3)+4] = rg_k4;
			if((tid<<3)+5 <seg_size) keyB[k+(tid<<3)+5] = rg_k5;
			if((tid<<3)+6 <seg_size) keyB[k+(tid<<3)+6] = rg_k6;
			if((tid<<3)+7 <seg_size) keyB[k+(tid<<3)+7] = rg_k7;
			if((tid<<3)+0 <seg_size) valB[k+(tid<<3)+0] = val[k + rg_v0];
			if((tid<<3)+1 <seg_size) valB[k+(tid<<3)+1] = val[k + rg_v1];
			if((tid<<3)+2 <seg_size) valB[k+(tid<<3)+2] = val[k + rg_v2];
			if((tid<<3)+3 <seg_size) valB[k+(tid<<3)+3] = val[k + rg_v3];
			if((tid<<3)+4 <seg_size) valB[k+(tid<<3)+4] = val[k + rg_v4];
			if((tid<<3)+5 <seg_size) valB[k+(tid<<3)+5] = val[k + rg_v5];
			if((tid<<3)+6 <seg_size) valB[k+(tid<<3)+6] = val[k + rg_v6];
			if((tid<<3)+7 <seg_size) valB[k+(tid<<3)+7] = val[k + rg_v7];
		}
	}
}

// 64 threads per block | 16 ppt
template<class K, class T>
__global__
void my_blk64_ppt16_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[1024];
	__shared__ int tmem[1024];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 511) / 512);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<9)+0	<seg_size)?key[k+tid1+(warp_id<<9)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<9)+32	<seg_size)?key[k+tid1+(warp_id<<9)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<9)+64	<seg_size)?key[k+tid1+(warp_id<<9)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<9)+96	<seg_size)?key[k+tid1+(warp_id<<9)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<9)+128	<seg_size)?key[k+tid1+(warp_id<<9)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<9)+160	<seg_size)?key[k+tid1+(warp_id<<9)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<9)+192	<seg_size)?key[k+tid1+(warp_id<<9)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<9)+224	<seg_size)?key[k+tid1+(warp_id<<9)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<9)+256	<seg_size)?key[k+tid1+(warp_id<<9)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<9)+288	<seg_size)?key[k+tid1+(warp_id<<9)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<9)+320	<seg_size)?key[k+tid1+(warp_id<<9)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<9)+352	<seg_size)?key[k+tid1+(warp_id<<9)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<9)+384	<seg_size)?key[k+tid1+(warp_id<<9)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<9)+416	<seg_size)?key[k+tid1+(warp_id<<9)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<9)+448	<seg_size)?key[k+tid1+(warp_id<<9)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<9)+480	<seg_size)?key[k+tid1+(warp_id<<9)+480	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<9)+0	<seg_size) rg_v0  = tid1+(warp_id<<9)+0	;
			if (tid1+(warp_id<<9)+32	<seg_size) rg_v1  = tid1+(warp_id<<9)+32	;
			if (tid1+(warp_id<<9)+64	<seg_size) rg_v2  = tid1+(warp_id<<9)+64	;
			if (tid1+(warp_id<<9)+96	<seg_size) rg_v3  = tid1+(warp_id<<9)+96	;
			if (tid1+(warp_id<<9)+128	<seg_size) rg_v4  = tid1+(warp_id<<9)+128	;
			if (tid1+(warp_id<<9)+160	<seg_size) rg_v5  = tid1+(warp_id<<9)+160	;
			if (tid1+(warp_id<<9)+192	<seg_size) rg_v6  = tid1+(warp_id<<9)+192	;
			if (tid1+(warp_id<<9)+224	<seg_size) rg_v7  = tid1+(warp_id<<9)+224	;
			if (tid1+(warp_id<<9)+256	<seg_size) rg_v8  = tid1+(warp_id<<9)+256	;
			if (tid1+(warp_id<<9)+288	<seg_size) rg_v9  = tid1+(warp_id<<9)+288	;
			if (tid1+(warp_id<<9)+320	<seg_size) rg_v10  = tid1+(warp_id<<9)+320	;
			if (tid1+(warp_id<<9)+352	<seg_size) rg_v11  = tid1+(warp_id<<9)+352	;
			if (tid1+(warp_id<<9)+384	<seg_size) rg_v12  = tid1+(warp_id<<9)+384	;
			if (tid1+(warp_id<<9)+416	<seg_size) rg_v13  = tid1+(warp_id<<9)+416	;
			if (tid1+(warp_id<<9)+448	<seg_size) rg_v14  = tid1+(warp_id<<9)+448	;
			if (tid1+(warp_id<<9)+480	<seg_size) rg_v15  = tid1+(warp_id<<9)+480	;

			// sort 512 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);

			// Store register results to shared memory
			smem[(warp_id<<9) + (tid1<<4) + 0] = rg_k0;
			smem[(warp_id<<9) + (tid1<<4) + 1] = rg_k1;
			smem[(warp_id<<9) + (tid1<<4) + 2] = rg_k2;
			smem[(warp_id<<9) + (tid1<<4) + 3] = rg_k3;
			smem[(warp_id<<9) + (tid1<<4) + 4] = rg_k4;
			smem[(warp_id<<9) + (tid1<<4) + 5] = rg_k5;
			smem[(warp_id<<9) + (tid1<<4) + 6] = rg_k6;
			smem[(warp_id<<9) + (tid1<<4) + 7] = rg_k7;
			smem[(warp_id<<9) + (tid1<<4) + 8] = rg_k8;
			smem[(warp_id<<9) + (tid1<<4) + 9] = rg_k9;
			smem[(warp_id<<9) + (tid1<<4) + 10] = rg_k10;
			smem[(warp_id<<9) + (tid1<<4) + 11] = rg_k11;
			smem[(warp_id<<9) + (tid1<<4) + 12] = rg_k12;
			smem[(warp_id<<9) + (tid1<<4) + 13] = rg_k13;
			smem[(warp_id<<9) + (tid1<<4) + 14] = rg_k14;
			smem[(warp_id<<9) + (tid1<<4) + 15] = rg_k15;
			tmem[(warp_id<<9) + (tid1<<4) + 0] = rg_v0;
			tmem[(warp_id<<9) + (tid1<<4) + 1] = rg_v1;
			tmem[(warp_id<<9) + (tid1<<4) + 2] = rg_v2;
			tmem[(warp_id<<9) + (tid1<<4) + 3] = rg_v3;
			tmem[(warp_id<<9) + (tid1<<4) + 4] = rg_v4;
			tmem[(warp_id<<9) + (tid1<<4) + 5] = rg_v5;
			tmem[(warp_id<<9) + (tid1<<4) + 6] = rg_v6;
			tmem[(warp_id<<9) + (tid1<<4) + 7] = rg_v7;
			tmem[(warp_id<<9) + (tid1<<4) + 8] = rg_v8;
			tmem[(warp_id<<9) + (tid1<<4) + 9] = rg_v9;
			tmem[(warp_id<<9) + (tid1<<4) + 10] = rg_v10;
			tmem[(warp_id<<9) + (tid1<<4) + 11] = rg_v11;
			tmem[(warp_id<<9) + (tid1<<4) + 12] = rg_v12;
			tmem[(warp_id<<9) + (tid1<<4) + 13] = rg_v13;
			tmem[(warp_id<<9) + (tid1<<4) + 14] = rg_v14;
			tmem[(warp_id<<9) + (tid1<<4) + 15] = rg_v15;
		}
		__syncthreads();

		// Merge in 1 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 512;
			rhs_len = 512;
			gran = tid1<<4;
			gran += (warp_id & 1) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;

			if((tid<<4)+0 <seg_size) keyB[k+(tid<<4)+0] = rg_k0;
			if((tid<<4)+1 <seg_size) keyB[k+(tid<<4)+1] = rg_k1;
			if((tid<<4)+2 <seg_size) keyB[k+(tid<<4)+2] = rg_k2;
			if((tid<<4)+3 <seg_size) keyB[k+(tid<<4)+3] = rg_k3;
			if((tid<<4)+4 <seg_size) keyB[k+(tid<<4)+4] = rg_k4;
			if((tid<<4)+5 <seg_size) keyB[k+(tid<<4)+5] = rg_k5;
			if((tid<<4)+6 <seg_size) keyB[k+(tid<<4)+6] = rg_k6;
			if((tid<<4)+7 <seg_size) keyB[k+(tid<<4)+7] = rg_k7;
			if((tid<<4)+8 <seg_size) keyB[k+(tid<<4)+8] = rg_k8;
			if((tid<<4)+9 <seg_size) keyB[k+(tid<<4)+9] = rg_k9;
			if((tid<<4)+10 <seg_size) keyB[k+(tid<<4)+10] = rg_k10;
			if((tid<<4)+11 <seg_size) keyB[k+(tid<<4)+11] = rg_k11;
			if((tid<<4)+12 <seg_size) keyB[k+(tid<<4)+12] = rg_k12;
			if((tid<<4)+13 <seg_size) keyB[k+(tid<<4)+13] = rg_k13;
			if((tid<<4)+14 <seg_size) keyB[k+(tid<<4)+14] = rg_k14;
			if((tid<<4)+15 <seg_size) keyB[k+(tid<<4)+15] = rg_k15;
			if((tid<<4)+0 <seg_size) valB[k+(tid<<4)+0] = val[k + rg_v0];
			if((tid<<4)+1 <seg_size) valB[k+(tid<<4)+1] = val[k + rg_v1];
			if((tid<<4)+2 <seg_size) valB[k+(tid<<4)+2] = val[k + rg_v2];
			if((tid<<4)+3 <seg_size) valB[k+(tid<<4)+3] = val[k + rg_v3];
			if((tid<<4)+4 <seg_size) valB[k+(tid<<4)+4] = val[k + rg_v4];
			if((tid<<4)+5 <seg_size) valB[k+(tid<<4)+5] = val[k + rg_v5];
			if((tid<<4)+6 <seg_size) valB[k+(tid<<4)+6] = val[k + rg_v6];
			if((tid<<4)+7 <seg_size) valB[k+(tid<<4)+7] = val[k + rg_v7];
			if((tid<<4)+8 <seg_size) valB[k+(tid<<4)+8] = val[k + rg_v8];
			if((tid<<4)+9 <seg_size) valB[k+(tid<<4)+9] = val[k + rg_v9];
			if((tid<<4)+10 <seg_size) valB[k+(tid<<4)+10] = val[k + rg_v10];
			if((tid<<4)+11 <seg_size) valB[k+(tid<<4)+11] = val[k + rg_v11];
			if((tid<<4)+12 <seg_size) valB[k+(tid<<4)+12] = val[k + rg_v12];
			if((tid<<4)+13 <seg_size) valB[k+(tid<<4)+13] = val[k + rg_v13];
			if((tid<<4)+14 <seg_size) valB[k+(tid<<4)+14] = val[k + rg_v14];
			if((tid<<4)+15 <seg_size) valB[k+(tid<<4)+15] = val[k + rg_v15];
		}
	}
}

// segsize 2048

// 1024 threads per block | 2 ppt
template<class K, class T>
__global__
void my_blk1024_ppt2_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[2048];
	__shared__ int tmem[2048];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	int rg_v0;
	int rg_v1;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 63) / 64);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<6)+0	<seg_size)?key[k+tid1+(warp_id<<6)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<6)+32	<seg_size)?key[k+tid1+(warp_id<<6)+32	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<6)+0	<seg_size) rg_v0  = tid1+(warp_id<<6)+0	;
			if (tid1+(warp_id<<6)+32	<seg_size) rg_v1  = tid1+(warp_id<<6)+32	;

			// sort 64 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);

			// Store register results to shared memory
			smem[(warp_id<<6) + (tid1<<1) + 0] = rg_k0;
			smem[(warp_id<<6) + (tid1<<1) + 1] = rg_k1;
			tmem[(warp_id<<6) + (tid1<<1) + 0] = rg_v0;
			tmem[(warp_id<<6) + (tid1<<1) + 1] = rg_v1;
		}
		__syncthreads();

		// Merge in 5 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 64;
			rhs_len = 64;
			gran = tid1<<1;
			gran += (warp_id & 1) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 128;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 3) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 256;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 7) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 512;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 15) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 4
		grp_start_wp_id = ((warp_id>>5)<<5);
		if(grp_start_wp_id + (1 << 4) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 1024;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 17 < full_wp) +
				(grp_start_wp_id + 18 < full_wp) +
				(grp_start_wp_id + 19 < full_wp) +
				(grp_start_wp_id + 20 < full_wp) +
				(grp_start_wp_id + 21 < full_wp) +
				(grp_start_wp_id + 22 < full_wp) +
				(grp_start_wp_id + 23 < full_wp) +
				(grp_start_wp_id + 24 < full_wp) +
				(grp_start_wp_id + 25 < full_wp) +
				(grp_start_wp_id + 26 < full_wp) +
				(grp_start_wp_id + 27 < full_wp) +
				(grp_start_wp_id + 28 < full_wp) +
				(grp_start_wp_id + 29 < full_wp) +
				(grp_start_wp_id + 30 < full_wp) +
				(grp_start_wp_id + 31 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 31) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;

			if((tid<<1)+0 <seg_size) keyB[k+(tid<<1)+0] = rg_k0;
			if((tid<<1)+1 <seg_size) keyB[k+(tid<<1)+1] = rg_k1;
			if((tid<<1)+0 <seg_size) valB[k+(tid<<1)+0] = val[k + rg_v0];
			if((tid<<1)+1 <seg_size) valB[k+(tid<<1)+1] = val[k + rg_v1];
		}
	}
}

// 512 threads per block | 4 ppt
template<class K, class T>
__global__
void my_blk512_ppt4_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[2048];
	__shared__ int tmem[2048];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 127) / 128);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<7)+0	<seg_size)?key[k+tid1+(warp_id<<7)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<7)+32	<seg_size)?key[k+tid1+(warp_id<<7)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<7)+64	<seg_size)?key[k+tid1+(warp_id<<7)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<7)+96	<seg_size)?key[k+tid1+(warp_id<<7)+96	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<7)+0	<seg_size) rg_v0  = tid1+(warp_id<<7)+0	;
			if (tid1+(warp_id<<7)+32	<seg_size) rg_v1  = tid1+(warp_id<<7)+32	;
			if (tid1+(warp_id<<7)+64	<seg_size) rg_v2  = tid1+(warp_id<<7)+64	;
			if (tid1+(warp_id<<7)+96	<seg_size) rg_v3  = tid1+(warp_id<<7)+96	;

			// sort 128 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);

			// Store register results to shared memory
			smem[(warp_id<<7) + (tid1<<2) + 0] = rg_k0;
			smem[(warp_id<<7) + (tid1<<2) + 1] = rg_k1;
			smem[(warp_id<<7) + (tid1<<2) + 2] = rg_k2;
			smem[(warp_id<<7) + (tid1<<2) + 3] = rg_k3;
			tmem[(warp_id<<7) + (tid1<<2) + 0] = rg_v0;
			tmem[(warp_id<<7) + (tid1<<2) + 1] = rg_v1;
			tmem[(warp_id<<7) + (tid1<<2) + 2] = rg_v2;
			tmem[(warp_id<<7) + (tid1<<2) + 3] = rg_v3;
		}
		__syncthreads();

		// Merge in 4 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 128;
			rhs_len = 128;
			gran = tid1<<2;
			gran += (warp_id & 1) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 256;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 3) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 512;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 7) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 1024;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 15) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;

			if((tid<<2)+0 <seg_size) keyB[k+(tid<<2)+0] = rg_k0;
			if((tid<<2)+1 <seg_size) keyB[k+(tid<<2)+1] = rg_k1;
			if((tid<<2)+2 <seg_size) keyB[k+(tid<<2)+2] = rg_k2;
			if((tid<<2)+3 <seg_size) keyB[k+(tid<<2)+3] = rg_k3;
			if((tid<<2)+0 <seg_size) valB[k+(tid<<2)+0] = val[k + rg_v0];
			if((tid<<2)+1 <seg_size) valB[k+(tid<<2)+1] = val[k + rg_v1];
			if((tid<<2)+2 <seg_size) valB[k+(tid<<2)+2] = val[k + rg_v2];
			if((tid<<2)+3 <seg_size) valB[k+(tid<<2)+3] = val[k + rg_v3];
		}
	}
}

// 256 threads per block | 8 ppt
template<class K, class T>
__global__
void my_blk256_ppt8_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[2048];
	__shared__ int tmem[2048];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 255) / 256);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<8)+0	<seg_size)?key[k+tid1+(warp_id<<8)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<8)+32	<seg_size)?key[k+tid1+(warp_id<<8)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<8)+64	<seg_size)?key[k+tid1+(warp_id<<8)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<8)+96	<seg_size)?key[k+tid1+(warp_id<<8)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<8)+128	<seg_size)?key[k+tid1+(warp_id<<8)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<8)+160	<seg_size)?key[k+tid1+(warp_id<<8)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<8)+192	<seg_size)?key[k+tid1+(warp_id<<8)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<8)+224	<seg_size)?key[k+tid1+(warp_id<<8)+224	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<8)+0	<seg_size) rg_v0  = tid1+(warp_id<<8)+0	;
			if (tid1+(warp_id<<8)+32	<seg_size) rg_v1  = tid1+(warp_id<<8)+32	;
			if (tid1+(warp_id<<8)+64	<seg_size) rg_v2  = tid1+(warp_id<<8)+64	;
			if (tid1+(warp_id<<8)+96	<seg_size) rg_v3  = tid1+(warp_id<<8)+96	;
			if (tid1+(warp_id<<8)+128	<seg_size) rg_v4  = tid1+(warp_id<<8)+128	;
			if (tid1+(warp_id<<8)+160	<seg_size) rg_v5  = tid1+(warp_id<<8)+160	;
			if (tid1+(warp_id<<8)+192	<seg_size) rg_v6  = tid1+(warp_id<<8)+192	;
			if (tid1+(warp_id<<8)+224	<seg_size) rg_v7  = tid1+(warp_id<<8)+224	;

			// sort 256 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);

			// Store register results to shared memory
			smem[(warp_id<<8) + (tid1<<3) + 0] = rg_k0;
			smem[(warp_id<<8) + (tid1<<3) + 1] = rg_k1;
			smem[(warp_id<<8) + (tid1<<3) + 2] = rg_k2;
			smem[(warp_id<<8) + (tid1<<3) + 3] = rg_k3;
			smem[(warp_id<<8) + (tid1<<3) + 4] = rg_k4;
			smem[(warp_id<<8) + (tid1<<3) + 5] = rg_k5;
			smem[(warp_id<<8) + (tid1<<3) + 6] = rg_k6;
			smem[(warp_id<<8) + (tid1<<3) + 7] = rg_k7;
			tmem[(warp_id<<8) + (tid1<<3) + 0] = rg_v0;
			tmem[(warp_id<<8) + (tid1<<3) + 1] = rg_v1;
			tmem[(warp_id<<8) + (tid1<<3) + 2] = rg_v2;
			tmem[(warp_id<<8) + (tid1<<3) + 3] = rg_v3;
			tmem[(warp_id<<8) + (tid1<<3) + 4] = rg_v4;
			tmem[(warp_id<<8) + (tid1<<3) + 5] = rg_v5;
			tmem[(warp_id<<8) + (tid1<<3) + 6] = rg_v6;
			tmem[(warp_id<<8) + (tid1<<3) + 7] = rg_v7;
		}
		__syncthreads();

		// Merge in 3 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 256;
			rhs_len = 256;
			gran = tid1<<3;
			gran += (warp_id & 1) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 512;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 3) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 1024;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 7) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;

			if((tid<<3)+0 <seg_size) keyB[k+(tid<<3)+0] = rg_k0;
			if((tid<<3)+1 <seg_size) keyB[k+(tid<<3)+1] = rg_k1;
			if((tid<<3)+2 <seg_size) keyB[k+(tid<<3)+2] = rg_k2;
			if((tid<<3)+3 <seg_size) keyB[k+(tid<<3)+3] = rg_k3;
			if((tid<<3)+4 <seg_size) keyB[k+(tid<<3)+4] = rg_k4;
			if((tid<<3)+5 <seg_size) keyB[k+(tid<<3)+5] = rg_k5;
			if((tid<<3)+6 <seg_size) keyB[k+(tid<<3)+6] = rg_k6;
			if((tid<<3)+7 <seg_size) keyB[k+(tid<<3)+7] = rg_k7;
			if((tid<<3)+0 <seg_size) valB[k+(tid<<3)+0] = val[k + rg_v0];
			if((tid<<3)+1 <seg_size) valB[k+(tid<<3)+1] = val[k + rg_v1];
			if((tid<<3)+2 <seg_size) valB[k+(tid<<3)+2] = val[k + rg_v2];
			if((tid<<3)+3 <seg_size) valB[k+(tid<<3)+3] = val[k + rg_v3];
			if((tid<<3)+4 <seg_size) valB[k+(tid<<3)+4] = val[k + rg_v4];
			if((tid<<3)+5 <seg_size) valB[k+(tid<<3)+5] = val[k + rg_v5];
			if((tid<<3)+6 <seg_size) valB[k+(tid<<3)+6] = val[k + rg_v6];
			if((tid<<3)+7 <seg_size) valB[k+(tid<<3)+7] = val[k + rg_v7];
		}
	}
}

// 128 threads per block | 16 ppt
template<class K, class T>
__global__
void my_blk128_ppt16_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[2048];
	__shared__ int tmem[2048];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 511) / 512);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<9)+0	<seg_size)?key[k+tid1+(warp_id<<9)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<9)+32	<seg_size)?key[k+tid1+(warp_id<<9)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<9)+64	<seg_size)?key[k+tid1+(warp_id<<9)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<9)+96	<seg_size)?key[k+tid1+(warp_id<<9)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<9)+128	<seg_size)?key[k+tid1+(warp_id<<9)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<9)+160	<seg_size)?key[k+tid1+(warp_id<<9)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<9)+192	<seg_size)?key[k+tid1+(warp_id<<9)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<9)+224	<seg_size)?key[k+tid1+(warp_id<<9)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<9)+256	<seg_size)?key[k+tid1+(warp_id<<9)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<9)+288	<seg_size)?key[k+tid1+(warp_id<<9)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<9)+320	<seg_size)?key[k+tid1+(warp_id<<9)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<9)+352	<seg_size)?key[k+tid1+(warp_id<<9)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<9)+384	<seg_size)?key[k+tid1+(warp_id<<9)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<9)+416	<seg_size)?key[k+tid1+(warp_id<<9)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<9)+448	<seg_size)?key[k+tid1+(warp_id<<9)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<9)+480	<seg_size)?key[k+tid1+(warp_id<<9)+480	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<9)+0	<seg_size) rg_v0  = tid1+(warp_id<<9)+0	;
			if (tid1+(warp_id<<9)+32	<seg_size) rg_v1  = tid1+(warp_id<<9)+32	;
			if (tid1+(warp_id<<9)+64	<seg_size) rg_v2  = tid1+(warp_id<<9)+64	;
			if (tid1+(warp_id<<9)+96	<seg_size) rg_v3  = tid1+(warp_id<<9)+96	;
			if (tid1+(warp_id<<9)+128	<seg_size) rg_v4  = tid1+(warp_id<<9)+128	;
			if (tid1+(warp_id<<9)+160	<seg_size) rg_v5  = tid1+(warp_id<<9)+160	;
			if (tid1+(warp_id<<9)+192	<seg_size) rg_v6  = tid1+(warp_id<<9)+192	;
			if (tid1+(warp_id<<9)+224	<seg_size) rg_v7  = tid1+(warp_id<<9)+224	;
			if (tid1+(warp_id<<9)+256	<seg_size) rg_v8  = tid1+(warp_id<<9)+256	;
			if (tid1+(warp_id<<9)+288	<seg_size) rg_v9  = tid1+(warp_id<<9)+288	;
			if (tid1+(warp_id<<9)+320	<seg_size) rg_v10  = tid1+(warp_id<<9)+320	;
			if (tid1+(warp_id<<9)+352	<seg_size) rg_v11  = tid1+(warp_id<<9)+352	;
			if (tid1+(warp_id<<9)+384	<seg_size) rg_v12  = tid1+(warp_id<<9)+384	;
			if (tid1+(warp_id<<9)+416	<seg_size) rg_v13  = tid1+(warp_id<<9)+416	;
			if (tid1+(warp_id<<9)+448	<seg_size) rg_v14  = tid1+(warp_id<<9)+448	;
			if (tid1+(warp_id<<9)+480	<seg_size) rg_v15  = tid1+(warp_id<<9)+480	;

			// sort 512 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);

			// Store register results to shared memory
			smem[(warp_id<<9) + (tid1<<4) + 0] = rg_k0;
			smem[(warp_id<<9) + (tid1<<4) + 1] = rg_k1;
			smem[(warp_id<<9) + (tid1<<4) + 2] = rg_k2;
			smem[(warp_id<<9) + (tid1<<4) + 3] = rg_k3;
			smem[(warp_id<<9) + (tid1<<4) + 4] = rg_k4;
			smem[(warp_id<<9) + (tid1<<4) + 5] = rg_k5;
			smem[(warp_id<<9) + (tid1<<4) + 6] = rg_k6;
			smem[(warp_id<<9) + (tid1<<4) + 7] = rg_k7;
			smem[(warp_id<<9) + (tid1<<4) + 8] = rg_k8;
			smem[(warp_id<<9) + (tid1<<4) + 9] = rg_k9;
			smem[(warp_id<<9) + (tid1<<4) + 10] = rg_k10;
			smem[(warp_id<<9) + (tid1<<4) + 11] = rg_k11;
			smem[(warp_id<<9) + (tid1<<4) + 12] = rg_k12;
			smem[(warp_id<<9) + (tid1<<4) + 13] = rg_k13;
			smem[(warp_id<<9) + (tid1<<4) + 14] = rg_k14;
			smem[(warp_id<<9) + (tid1<<4) + 15] = rg_k15;
			tmem[(warp_id<<9) + (tid1<<4) + 0] = rg_v0;
			tmem[(warp_id<<9) + (tid1<<4) + 1] = rg_v1;
			tmem[(warp_id<<9) + (tid1<<4) + 2] = rg_v2;
			tmem[(warp_id<<9) + (tid1<<4) + 3] = rg_v3;
			tmem[(warp_id<<9) + (tid1<<4) + 4] = rg_v4;
			tmem[(warp_id<<9) + (tid1<<4) + 5] = rg_v5;
			tmem[(warp_id<<9) + (tid1<<4) + 6] = rg_v6;
			tmem[(warp_id<<9) + (tid1<<4) + 7] = rg_v7;
			tmem[(warp_id<<9) + (tid1<<4) + 8] = rg_v8;
			tmem[(warp_id<<9) + (tid1<<4) + 9] = rg_v9;
			tmem[(warp_id<<9) + (tid1<<4) + 10] = rg_v10;
			tmem[(warp_id<<9) + (tid1<<4) + 11] = rg_v11;
			tmem[(warp_id<<9) + (tid1<<4) + 12] = rg_v12;
			tmem[(warp_id<<9) + (tid1<<4) + 13] = rg_v13;
			tmem[(warp_id<<9) + (tid1<<4) + 14] = rg_v14;
			tmem[(warp_id<<9) + (tid1<<4) + 15] = rg_v15;
		}
		__syncthreads();

		// Merge in 2 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 512;
			rhs_len = 512;
			gran = tid1<<4;
			gran += (warp_id & 1) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 1024;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 3) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;

			if((tid<<4)+0 <seg_size) keyB[k+(tid<<4)+0] = rg_k0;
			if((tid<<4)+1 <seg_size) keyB[k+(tid<<4)+1] = rg_k1;
			if((tid<<4)+2 <seg_size) keyB[k+(tid<<4)+2] = rg_k2;
			if((tid<<4)+3 <seg_size) keyB[k+(tid<<4)+3] = rg_k3;
			if((tid<<4)+4 <seg_size) keyB[k+(tid<<4)+4] = rg_k4;
			if((tid<<4)+5 <seg_size) keyB[k+(tid<<4)+5] = rg_k5;
			if((tid<<4)+6 <seg_size) keyB[k+(tid<<4)+6] = rg_k6;
			if((tid<<4)+7 <seg_size) keyB[k+(tid<<4)+7] = rg_k7;
			if((tid<<4)+8 <seg_size) keyB[k+(tid<<4)+8] = rg_k8;
			if((tid<<4)+9 <seg_size) keyB[k+(tid<<4)+9] = rg_k9;
			if((tid<<4)+10 <seg_size) keyB[k+(tid<<4)+10] = rg_k10;
			if((tid<<4)+11 <seg_size) keyB[k+(tid<<4)+11] = rg_k11;
			if((tid<<4)+12 <seg_size) keyB[k+(tid<<4)+12] = rg_k12;
			if((tid<<4)+13 <seg_size) keyB[k+(tid<<4)+13] = rg_k13;
			if((tid<<4)+14 <seg_size) keyB[k+(tid<<4)+14] = rg_k14;
			if((tid<<4)+15 <seg_size) keyB[k+(tid<<4)+15] = rg_k15;
			if((tid<<4)+0 <seg_size) valB[k+(tid<<4)+0] = val[k + rg_v0];
			if((tid<<4)+1 <seg_size) valB[k+(tid<<4)+1] = val[k + rg_v1];
			if((tid<<4)+2 <seg_size) valB[k+(tid<<4)+2] = val[k + rg_v2];
			if((tid<<4)+3 <seg_size) valB[k+(tid<<4)+3] = val[k + rg_v3];
			if((tid<<4)+4 <seg_size) valB[k+(tid<<4)+4] = val[k + rg_v4];
			if((tid<<4)+5 <seg_size) valB[k+(tid<<4)+5] = val[k + rg_v5];
			if((tid<<4)+6 <seg_size) valB[k+(tid<<4)+6] = val[k + rg_v6];
			if((tid<<4)+7 <seg_size) valB[k+(tid<<4)+7] = val[k + rg_v7];
			if((tid<<4)+8 <seg_size) valB[k+(tid<<4)+8] = val[k + rg_v8];
			if((tid<<4)+9 <seg_size) valB[k+(tid<<4)+9] = val[k + rg_v9];
			if((tid<<4)+10 <seg_size) valB[k+(tid<<4)+10] = val[k + rg_v10];
			if((tid<<4)+11 <seg_size) valB[k+(tid<<4)+11] = val[k + rg_v11];
			if((tid<<4)+12 <seg_size) valB[k+(tid<<4)+12] = val[k + rg_v12];
			if((tid<<4)+13 <seg_size) valB[k+(tid<<4)+13] = val[k + rg_v13];
			if((tid<<4)+14 <seg_size) valB[k+(tid<<4)+14] = val[k + rg_v14];
			if((tid<<4)+15 <seg_size) valB[k+(tid<<4)+15] = val[k + rg_v15];
		}
	}
}

// 64 threads per block | 32 ppt
template<class K, class T>
__global__
void my_blk64_ppt32_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[2048];
	__shared__ int tmem[2048];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	K rg_k16;
	K rg_k17;
	K rg_k18;
	K rg_k19;
	K rg_k20;
	K rg_k21;
	K rg_k22;
	K rg_k23;
	K rg_k24;
	K rg_k25;
	K rg_k26;
	K rg_k27;
	K rg_k28;
	K rg_k29;
	K rg_k30;
	K rg_k31;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int rg_v16;
	int rg_v17;
	int rg_v18;
	int rg_v19;
	int rg_v20;
	int rg_v21;
	int rg_v22;
	int rg_v23;
	int rg_v24;
	int rg_v25;
	int rg_v26;
	int rg_v27;
	int rg_v28;
	int rg_v29;
	int rg_v30;
	int rg_v31;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 1023) / 1024);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<10)+0	<seg_size)?key[k+tid1+(warp_id<<10)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<10)+32	<seg_size)?key[k+tid1+(warp_id<<10)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<10)+64	<seg_size)?key[k+tid1+(warp_id<<10)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<10)+96	<seg_size)?key[k+tid1+(warp_id<<10)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<10)+128	<seg_size)?key[k+tid1+(warp_id<<10)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<10)+160	<seg_size)?key[k+tid1+(warp_id<<10)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<10)+192	<seg_size)?key[k+tid1+(warp_id<<10)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<10)+224	<seg_size)?key[k+tid1+(warp_id<<10)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<10)+256	<seg_size)?key[k+tid1+(warp_id<<10)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<10)+288	<seg_size)?key[k+tid1+(warp_id<<10)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<10)+320	<seg_size)?key[k+tid1+(warp_id<<10)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<10)+352	<seg_size)?key[k+tid1+(warp_id<<10)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<10)+384	<seg_size)?key[k+tid1+(warp_id<<10)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<10)+416	<seg_size)?key[k+tid1+(warp_id<<10)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<10)+448	<seg_size)?key[k+tid1+(warp_id<<10)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<10)+480	<seg_size)?key[k+tid1+(warp_id<<10)+480	]:std::numeric_limits<K>::max();
			rg_k16  = (tid1+(warp_id<<10)+512	<seg_size)?key[k+tid1+(warp_id<<10)+512	]:std::numeric_limits<K>::max();
			rg_k17  = (tid1+(warp_id<<10)+544	<seg_size)?key[k+tid1+(warp_id<<10)+544	]:std::numeric_limits<K>::max();
			rg_k18  = (tid1+(warp_id<<10)+576	<seg_size)?key[k+tid1+(warp_id<<10)+576	]:std::numeric_limits<K>::max();
			rg_k19  = (tid1+(warp_id<<10)+608	<seg_size)?key[k+tid1+(warp_id<<10)+608	]:std::numeric_limits<K>::max();
			rg_k20  = (tid1+(warp_id<<10)+640	<seg_size)?key[k+tid1+(warp_id<<10)+640	]:std::numeric_limits<K>::max();
			rg_k21  = (tid1+(warp_id<<10)+672	<seg_size)?key[k+tid1+(warp_id<<10)+672	]:std::numeric_limits<K>::max();
			rg_k22  = (tid1+(warp_id<<10)+704	<seg_size)?key[k+tid1+(warp_id<<10)+704	]:std::numeric_limits<K>::max();
			rg_k23  = (tid1+(warp_id<<10)+736	<seg_size)?key[k+tid1+(warp_id<<10)+736	]:std::numeric_limits<K>::max();
			rg_k24  = (tid1+(warp_id<<10)+768	<seg_size)?key[k+tid1+(warp_id<<10)+768	]:std::numeric_limits<K>::max();
			rg_k25  = (tid1+(warp_id<<10)+800	<seg_size)?key[k+tid1+(warp_id<<10)+800	]:std::numeric_limits<K>::max();
			rg_k26  = (tid1+(warp_id<<10)+832	<seg_size)?key[k+tid1+(warp_id<<10)+832	]:std::numeric_limits<K>::max();
			rg_k27  = (tid1+(warp_id<<10)+864	<seg_size)?key[k+tid1+(warp_id<<10)+864	]:std::numeric_limits<K>::max();
			rg_k28  = (tid1+(warp_id<<10)+896	<seg_size)?key[k+tid1+(warp_id<<10)+896	]:std::numeric_limits<K>::max();
			rg_k29  = (tid1+(warp_id<<10)+928	<seg_size)?key[k+tid1+(warp_id<<10)+928	]:std::numeric_limits<K>::max();
			rg_k30  = (tid1+(warp_id<<10)+960	<seg_size)?key[k+tid1+(warp_id<<10)+960	]:std::numeric_limits<K>::max();
			rg_k31  = (tid1+(warp_id<<10)+992	<seg_size)?key[k+tid1+(warp_id<<10)+992	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<10)+0	<seg_size) rg_v0  = tid1+(warp_id<<10)+0	;
			if (tid1+(warp_id<<10)+32	<seg_size) rg_v1  = tid1+(warp_id<<10)+32	;
			if (tid1+(warp_id<<10)+64	<seg_size) rg_v2  = tid1+(warp_id<<10)+64	;
			if (tid1+(warp_id<<10)+96	<seg_size) rg_v3  = tid1+(warp_id<<10)+96	;
			if (tid1+(warp_id<<10)+128	<seg_size) rg_v4  = tid1+(warp_id<<10)+128	;
			if (tid1+(warp_id<<10)+160	<seg_size) rg_v5  = tid1+(warp_id<<10)+160	;
			if (tid1+(warp_id<<10)+192	<seg_size) rg_v6  = tid1+(warp_id<<10)+192	;
			if (tid1+(warp_id<<10)+224	<seg_size) rg_v7  = tid1+(warp_id<<10)+224	;
			if (tid1+(warp_id<<10)+256	<seg_size) rg_v8  = tid1+(warp_id<<10)+256	;
			if (tid1+(warp_id<<10)+288	<seg_size) rg_v9  = tid1+(warp_id<<10)+288	;
			if (tid1+(warp_id<<10)+320	<seg_size) rg_v10  = tid1+(warp_id<<10)+320	;
			if (tid1+(warp_id<<10)+352	<seg_size) rg_v11  = tid1+(warp_id<<10)+352	;
			if (tid1+(warp_id<<10)+384	<seg_size) rg_v12  = tid1+(warp_id<<10)+384	;
			if (tid1+(warp_id<<10)+416	<seg_size) rg_v13  = tid1+(warp_id<<10)+416	;
			if (tid1+(warp_id<<10)+448	<seg_size) rg_v14  = tid1+(warp_id<<10)+448	;
			if (tid1+(warp_id<<10)+480	<seg_size) rg_v15  = tid1+(warp_id<<10)+480	;
			if (tid1+(warp_id<<10)+512	<seg_size) rg_v16  = tid1+(warp_id<<10)+512	;
			if (tid1+(warp_id<<10)+544	<seg_size) rg_v17  = tid1+(warp_id<<10)+544	;
			if (tid1+(warp_id<<10)+576	<seg_size) rg_v18  = tid1+(warp_id<<10)+576	;
			if (tid1+(warp_id<<10)+608	<seg_size) rg_v19  = tid1+(warp_id<<10)+608	;
			if (tid1+(warp_id<<10)+640	<seg_size) rg_v20  = tid1+(warp_id<<10)+640	;
			if (tid1+(warp_id<<10)+672	<seg_size) rg_v21  = tid1+(warp_id<<10)+672	;
			if (tid1+(warp_id<<10)+704	<seg_size) rg_v22  = tid1+(warp_id<<10)+704	;
			if (tid1+(warp_id<<10)+736	<seg_size) rg_v23  = tid1+(warp_id<<10)+736	;
			if (tid1+(warp_id<<10)+768	<seg_size) rg_v24  = tid1+(warp_id<<10)+768	;
			if (tid1+(warp_id<<10)+800	<seg_size) rg_v25  = tid1+(warp_id<<10)+800	;
			if (tid1+(warp_id<<10)+832	<seg_size) rg_v26  = tid1+(warp_id<<10)+832	;
			if (tid1+(warp_id<<10)+864	<seg_size) rg_v27  = tid1+(warp_id<<10)+864	;
			if (tid1+(warp_id<<10)+896	<seg_size) rg_v28  = tid1+(warp_id<<10)+896	;
			if (tid1+(warp_id<<10)+928	<seg_size) rg_v29  = tid1+(warp_id<<10)+928	;
			if (tid1+(warp_id<<10)+960	<seg_size) rg_v30  = tid1+(warp_id<<10)+960	;
			if (tid1+(warp_id<<10)+992	<seg_size) rg_v31  = tid1+(warp_id<<10)+992	;

			// sort 1024 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			CMP_SWP(K, rg_k16, rg_k19, int, rg_v16, rg_v19);
			CMP_SWP(K, rg_k17, rg_k18, int, rg_v17, rg_v18);
			CMP_SWP(K, rg_k20, rg_k23, int, rg_v20, rg_v23);
			CMP_SWP(K, rg_k21, rg_k22, int, rg_v21, rg_v22);
			CMP_SWP(K, rg_k24, rg_k27, int, rg_v24, rg_v27);
			CMP_SWP(K, rg_k25, rg_k26, int, rg_v25, rg_v26);
			CMP_SWP(K, rg_k28, rg_k31, int, rg_v28, rg_v31);
			CMP_SWP(K, rg_k29, rg_k30, int, rg_v29, rg_v30);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			CMP_SWP(K, rg_k16, rg_k23, int, rg_v16, rg_v23);
			CMP_SWP(K, rg_k17, rg_k22, int, rg_v17, rg_v22);
			CMP_SWP(K, rg_k18, rg_k21, int, rg_v18, rg_v21);
			CMP_SWP(K, rg_k19, rg_k20, int, rg_v19, rg_v20);
			CMP_SWP(K, rg_k24, rg_k31, int, rg_v24, rg_v31);
			CMP_SWP(K, rg_k25, rg_k30, int, rg_v25, rg_v30);
			CMP_SWP(K, rg_k26, rg_k29, int, rg_v26, rg_v29);
			CMP_SWP(K, rg_k27, rg_k28, int, rg_v27, rg_v28);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			CMP_SWP(K, rg_k16, rg_k31, int, rg_v16, rg_v31);
			CMP_SWP(K, rg_k17, rg_k30, int, rg_v17, rg_v30);
			CMP_SWP(K, rg_k18, rg_k29, int, rg_v18, rg_v29);
			CMP_SWP(K, rg_k19, rg_k28, int, rg_v19, rg_v28);
			CMP_SWP(K, rg_k20, rg_k27, int, rg_v20, rg_v27);
			CMP_SWP(K, rg_k21, rg_k26, int, rg_v21, rg_v26);
			CMP_SWP(K, rg_k22, rg_k25, int, rg_v22, rg_v25);
			CMP_SWP(K, rg_k23, rg_k24, int, rg_v23, rg_v24);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k31, int, rg_v0, rg_v31);
			CMP_SWP(K, rg_k1, rg_k30, int, rg_v1, rg_v30);
			CMP_SWP(K, rg_k2, rg_k29, int, rg_v2, rg_v29);
			CMP_SWP(K, rg_k3, rg_k28, int, rg_v3, rg_v28);
			CMP_SWP(K, rg_k4, rg_k27, int, rg_v4, rg_v27);
			CMP_SWP(K, rg_k5, rg_k26, int, rg_v5, rg_v26);
			CMP_SWP(K, rg_k6, rg_k25, int, rg_v6, rg_v25);
			CMP_SWP(K, rg_k7, rg_k24, int, rg_v7, rg_v24);
			CMP_SWP(K, rg_k8, rg_k23, int, rg_v8, rg_v23);
			CMP_SWP(K, rg_k9, rg_k22, int, rg_v9, rg_v22);
			CMP_SWP(K, rg_k10, rg_k21, int, rg_v10, rg_v21);
			CMP_SWP(K, rg_k11, rg_k20, int, rg_v11, rg_v20);
			CMP_SWP(K, rg_k12, rg_k19, int, rg_v12, rg_v19);
			CMP_SWP(K, rg_k13, rg_k18, int, rg_v13, rg_v18);
			CMP_SWP(K, rg_k14, rg_k17, int, rg_v14, rg_v17);
			CMP_SWP(K, rg_k15, rg_k16, int, rg_v15, rg_v16);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);

			// Store register results to shared memory
			smem[(warp_id<<10) + (tid1<<5) + 0] = rg_k0;
			smem[(warp_id<<10) + (tid1<<5) + 1] = rg_k1;
			smem[(warp_id<<10) + (tid1<<5) + 2] = rg_k2;
			smem[(warp_id<<10) + (tid1<<5) + 3] = rg_k3;
			smem[(warp_id<<10) + (tid1<<5) + 4] = rg_k4;
			smem[(warp_id<<10) + (tid1<<5) + 5] = rg_k5;
			smem[(warp_id<<10) + (tid1<<5) + 6] = rg_k6;
			smem[(warp_id<<10) + (tid1<<5) + 7] = rg_k7;
			smem[(warp_id<<10) + (tid1<<5) + 8] = rg_k8;
			smem[(warp_id<<10) + (tid1<<5) + 9] = rg_k9;
			smem[(warp_id<<10) + (tid1<<5) + 10] = rg_k10;
			smem[(warp_id<<10) + (tid1<<5) + 11] = rg_k11;
			smem[(warp_id<<10) + (tid1<<5) + 12] = rg_k12;
			smem[(warp_id<<10) + (tid1<<5) + 13] = rg_k13;
			smem[(warp_id<<10) + (tid1<<5) + 14] = rg_k14;
			smem[(warp_id<<10) + (tid1<<5) + 15] = rg_k15;
			smem[(warp_id<<10) + (tid1<<5) + 16] = rg_k16;
			smem[(warp_id<<10) + (tid1<<5) + 17] = rg_k17;
			smem[(warp_id<<10) + (tid1<<5) + 18] = rg_k18;
			smem[(warp_id<<10) + (tid1<<5) + 19] = rg_k19;
			smem[(warp_id<<10) + (tid1<<5) + 20] = rg_k20;
			smem[(warp_id<<10) + (tid1<<5) + 21] = rg_k21;
			smem[(warp_id<<10) + (tid1<<5) + 22] = rg_k22;
			smem[(warp_id<<10) + (tid1<<5) + 23] = rg_k23;
			smem[(warp_id<<10) + (tid1<<5) + 24] = rg_k24;
			smem[(warp_id<<10) + (tid1<<5) + 25] = rg_k25;
			smem[(warp_id<<10) + (tid1<<5) + 26] = rg_k26;
			smem[(warp_id<<10) + (tid1<<5) + 27] = rg_k27;
			smem[(warp_id<<10) + (tid1<<5) + 28] = rg_k28;
			smem[(warp_id<<10) + (tid1<<5) + 29] = rg_k29;
			smem[(warp_id<<10) + (tid1<<5) + 30] = rg_k30;
			smem[(warp_id<<10) + (tid1<<5) + 31] = rg_k31;
			tmem[(warp_id<<10) + (tid1<<5) + 0] = rg_v0;
			tmem[(warp_id<<10) + (tid1<<5) + 1] = rg_v1;
			tmem[(warp_id<<10) + (tid1<<5) + 2] = rg_v2;
			tmem[(warp_id<<10) + (tid1<<5) + 3] = rg_v3;
			tmem[(warp_id<<10) + (tid1<<5) + 4] = rg_v4;
			tmem[(warp_id<<10) + (tid1<<5) + 5] = rg_v5;
			tmem[(warp_id<<10) + (tid1<<5) + 6] = rg_v6;
			tmem[(warp_id<<10) + (tid1<<5) + 7] = rg_v7;
			tmem[(warp_id<<10) + (tid1<<5) + 8] = rg_v8;
			tmem[(warp_id<<10) + (tid1<<5) + 9] = rg_v9;
			tmem[(warp_id<<10) + (tid1<<5) + 10] = rg_v10;
			tmem[(warp_id<<10) + (tid1<<5) + 11] = rg_v11;
			tmem[(warp_id<<10) + (tid1<<5) + 12] = rg_v12;
			tmem[(warp_id<<10) + (tid1<<5) + 13] = rg_v13;
			tmem[(warp_id<<10) + (tid1<<5) + 14] = rg_v14;
			tmem[(warp_id<<10) + (tid1<<5) + 15] = rg_v15;
			tmem[(warp_id<<10) + (tid1<<5) + 16] = rg_v16;
			tmem[(warp_id<<10) + (tid1<<5) + 17] = rg_v17;
			tmem[(warp_id<<10) + (tid1<<5) + 18] = rg_v18;
			tmem[(warp_id<<10) + (tid1<<5) + 19] = rg_v19;
			tmem[(warp_id<<10) + (tid1<<5) + 20] = rg_v20;
			tmem[(warp_id<<10) + (tid1<<5) + 21] = rg_v21;
			tmem[(warp_id<<10) + (tid1<<5) + 22] = rg_v22;
			tmem[(warp_id<<10) + (tid1<<5) + 23] = rg_v23;
			tmem[(warp_id<<10) + (tid1<<5) + 24] = rg_v24;
			tmem[(warp_id<<10) + (tid1<<5) + 25] = rg_v25;
			tmem[(warp_id<<10) + (tid1<<5) + 26] = rg_v26;
			tmem[(warp_id<<10) + (tid1<<5) + 27] = rg_v27;
			tmem[(warp_id<<10) + (tid1<<5) + 28] = rg_v28;
			tmem[(warp_id<<10) + (tid1<<5) + 29] = rg_v29;
			tmem[(warp_id<<10) + (tid1<<5) + 30] = rg_v30;
			tmem[(warp_id<<10) + (tid1<<5) + 31] = rg_v31;
		}
		__syncthreads();

		// Merge in 1 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 1024;
			rhs_len = 1024;
			gran = tid1<<5;
			gran += (warp_id & 1) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;

			if((tid<<5)+0 <seg_size) keyB[k+(tid<<5)+0] = rg_k0;
			if((tid<<5)+1 <seg_size) keyB[k+(tid<<5)+1] = rg_k1;
			if((tid<<5)+2 <seg_size) keyB[k+(tid<<5)+2] = rg_k2;
			if((tid<<5)+3 <seg_size) keyB[k+(tid<<5)+3] = rg_k3;
			if((tid<<5)+4 <seg_size) keyB[k+(tid<<5)+4] = rg_k4;
			if((tid<<5)+5 <seg_size) keyB[k+(tid<<5)+5] = rg_k5;
			if((tid<<5)+6 <seg_size) keyB[k+(tid<<5)+6] = rg_k6;
			if((tid<<5)+7 <seg_size) keyB[k+(tid<<5)+7] = rg_k7;
			if((tid<<5)+8 <seg_size) keyB[k+(tid<<5)+8] = rg_k8;
			if((tid<<5)+9 <seg_size) keyB[k+(tid<<5)+9] = rg_k9;
			if((tid<<5)+10 <seg_size) keyB[k+(tid<<5)+10] = rg_k10;
			if((tid<<5)+11 <seg_size) keyB[k+(tid<<5)+11] = rg_k11;
			if((tid<<5)+12 <seg_size) keyB[k+(tid<<5)+12] = rg_k12;
			if((tid<<5)+13 <seg_size) keyB[k+(tid<<5)+13] = rg_k13;
			if((tid<<5)+14 <seg_size) keyB[k+(tid<<5)+14] = rg_k14;
			if((tid<<5)+15 <seg_size) keyB[k+(tid<<5)+15] = rg_k15;
			if((tid<<5)+16 <seg_size) keyB[k+(tid<<5)+16] = rg_k16;
			if((tid<<5)+17 <seg_size) keyB[k+(tid<<5)+17] = rg_k17;
			if((tid<<5)+18 <seg_size) keyB[k+(tid<<5)+18] = rg_k18;
			if((tid<<5)+19 <seg_size) keyB[k+(tid<<5)+19] = rg_k19;
			if((tid<<5)+20 <seg_size) keyB[k+(tid<<5)+20] = rg_k20;
			if((tid<<5)+21 <seg_size) keyB[k+(tid<<5)+21] = rg_k21;
			if((tid<<5)+22 <seg_size) keyB[k+(tid<<5)+22] = rg_k22;
			if((tid<<5)+23 <seg_size) keyB[k+(tid<<5)+23] = rg_k23;
			if((tid<<5)+24 <seg_size) keyB[k+(tid<<5)+24] = rg_k24;
			if((tid<<5)+25 <seg_size) keyB[k+(tid<<5)+25] = rg_k25;
			if((tid<<5)+26 <seg_size) keyB[k+(tid<<5)+26] = rg_k26;
			if((tid<<5)+27 <seg_size) keyB[k+(tid<<5)+27] = rg_k27;
			if((tid<<5)+28 <seg_size) keyB[k+(tid<<5)+28] = rg_k28;
			if((tid<<5)+29 <seg_size) keyB[k+(tid<<5)+29] = rg_k29;
			if((tid<<5)+30 <seg_size) keyB[k+(tid<<5)+30] = rg_k30;
			if((tid<<5)+31 <seg_size) keyB[k+(tid<<5)+31] = rg_k31;
			if((tid<<5)+0 <seg_size) valB[k+(tid<<5)+0] = val[k + rg_v0];
			if((tid<<5)+1 <seg_size) valB[k+(tid<<5)+1] = val[k + rg_v1];
			if((tid<<5)+2 <seg_size) valB[k+(tid<<5)+2] = val[k + rg_v2];
			if((tid<<5)+3 <seg_size) valB[k+(tid<<5)+3] = val[k + rg_v3];
			if((tid<<5)+4 <seg_size) valB[k+(tid<<5)+4] = val[k + rg_v4];
			if((tid<<5)+5 <seg_size) valB[k+(tid<<5)+5] = val[k + rg_v5];
			if((tid<<5)+6 <seg_size) valB[k+(tid<<5)+6] = val[k + rg_v6];
			if((tid<<5)+7 <seg_size) valB[k+(tid<<5)+7] = val[k + rg_v7];
			if((tid<<5)+8 <seg_size) valB[k+(tid<<5)+8] = val[k + rg_v8];
			if((tid<<5)+9 <seg_size) valB[k+(tid<<5)+9] = val[k + rg_v9];
			if((tid<<5)+10 <seg_size) valB[k+(tid<<5)+10] = val[k + rg_v10];
			if((tid<<5)+11 <seg_size) valB[k+(tid<<5)+11] = val[k + rg_v11];
			if((tid<<5)+12 <seg_size) valB[k+(tid<<5)+12] = val[k + rg_v12];
			if((tid<<5)+13 <seg_size) valB[k+(tid<<5)+13] = val[k + rg_v13];
			if((tid<<5)+14 <seg_size) valB[k+(tid<<5)+14] = val[k + rg_v14];
			if((tid<<5)+15 <seg_size) valB[k+(tid<<5)+15] = val[k + rg_v15];
			if((tid<<5)+16 <seg_size) valB[k+(tid<<5)+16] = val[k + rg_v16];
			if((tid<<5)+17 <seg_size) valB[k+(tid<<5)+17] = val[k + rg_v17];
			if((tid<<5)+18 <seg_size) valB[k+(tid<<5)+18] = val[k + rg_v18];
			if((tid<<5)+19 <seg_size) valB[k+(tid<<5)+19] = val[k + rg_v19];
			if((tid<<5)+20 <seg_size) valB[k+(tid<<5)+20] = val[k + rg_v20];
			if((tid<<5)+21 <seg_size) valB[k+(tid<<5)+21] = val[k + rg_v21];
			if((tid<<5)+22 <seg_size) valB[k+(tid<<5)+22] = val[k + rg_v22];
			if((tid<<5)+23 <seg_size) valB[k+(tid<<5)+23] = val[k + rg_v23];
			if((tid<<5)+24 <seg_size) valB[k+(tid<<5)+24] = val[k + rg_v24];
			if((tid<<5)+25 <seg_size) valB[k+(tid<<5)+25] = val[k + rg_v25];
			if((tid<<5)+26 <seg_size) valB[k+(tid<<5)+26] = val[k + rg_v26];
			if((tid<<5)+27 <seg_size) valB[k+(tid<<5)+27] = val[k + rg_v27];
			if((tid<<5)+28 <seg_size) valB[k+(tid<<5)+28] = val[k + rg_v28];
			if((tid<<5)+29 <seg_size) valB[k+(tid<<5)+29] = val[k + rg_v29];
			if((tid<<5)+30 <seg_size) valB[k+(tid<<5)+30] = val[k + rg_v30];
			if((tid<<5)+31 <seg_size) valB[k+(tid<<5)+31] = val[k + rg_v31];
		}
	}
}

// segsize 4096

// 1024 threads per block | 4 ppt
template<class K, class T>
__global__
void my_blk1024_ppt4_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[4096];
	__shared__ int tmem[4096];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 127) / 128);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<7)+0	<seg_size)?key[k+tid1+(warp_id<<7)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<7)+32	<seg_size)?key[k+tid1+(warp_id<<7)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<7)+64	<seg_size)?key[k+tid1+(warp_id<<7)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<7)+96	<seg_size)?key[k+tid1+(warp_id<<7)+96	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<7)+0	<seg_size) rg_v0  = tid1+(warp_id<<7)+0	;
			if (tid1+(warp_id<<7)+32	<seg_size) rg_v1  = tid1+(warp_id<<7)+32	;
			if (tid1+(warp_id<<7)+64	<seg_size) rg_v2  = tid1+(warp_id<<7)+64	;
			if (tid1+(warp_id<<7)+96	<seg_size) rg_v3  = tid1+(warp_id<<7)+96	;

			// sort 128 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);

			// Store register results to shared memory
			smem[(warp_id<<7) + (tid1<<2) + 0] = rg_k0;
			smem[(warp_id<<7) + (tid1<<2) + 1] = rg_k1;
			smem[(warp_id<<7) + (tid1<<2) + 2] = rg_k2;
			smem[(warp_id<<7) + (tid1<<2) + 3] = rg_k3;
			tmem[(warp_id<<7) + (tid1<<2) + 0] = rg_v0;
			tmem[(warp_id<<7) + (tid1<<2) + 1] = rg_v1;
			tmem[(warp_id<<7) + (tid1<<2) + 2] = rg_v2;
			tmem[(warp_id<<7) + (tid1<<2) + 3] = rg_v3;
		}
		__syncthreads();

		// Merge in 5 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 128;
			rhs_len = 128;
			gran = tid1<<2;
			gran += (warp_id & 1) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 256;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 3) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 512;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 7) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 1024;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 15) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 4
		grp_start_wp_id = ((warp_id>>5)<<5);
		if(grp_start_wp_id + (1 << 4) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 2048;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 17 < full_wp) +
				(grp_start_wp_id + 18 < full_wp) +
				(grp_start_wp_id + 19 < full_wp) +
				(grp_start_wp_id + 20 < full_wp) +
				(grp_start_wp_id + 21 < full_wp) +
				(grp_start_wp_id + 22 < full_wp) +
				(grp_start_wp_id + 23 < full_wp) +
				(grp_start_wp_id + 24 < full_wp) +
				(grp_start_wp_id + 25 < full_wp) +
				(grp_start_wp_id + 26 < full_wp) +
				(grp_start_wp_id + 27 < full_wp) +
				(grp_start_wp_id + 28 < full_wp) +
				(grp_start_wp_id + 29 < full_wp) +
				(grp_start_wp_id + 30 < full_wp) +
				(grp_start_wp_id + 31 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 31) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;

			if((tid<<2)+0 <seg_size) keyB[k+(tid<<2)+0] = rg_k0;
			if((tid<<2)+1 <seg_size) keyB[k+(tid<<2)+1] = rg_k1;
			if((tid<<2)+2 <seg_size) keyB[k+(tid<<2)+2] = rg_k2;
			if((tid<<2)+3 <seg_size) keyB[k+(tid<<2)+3] = rg_k3;
			if((tid<<2)+0 <seg_size) valB[k+(tid<<2)+0] = val[k + rg_v0];
			if((tid<<2)+1 <seg_size) valB[k+(tid<<2)+1] = val[k + rg_v1];
			if((tid<<2)+2 <seg_size) valB[k+(tid<<2)+2] = val[k + rg_v2];
			if((tid<<2)+3 <seg_size) valB[k+(tid<<2)+3] = val[k + rg_v3];
		}
	}
}

// 512 threads per block | 8 ppt
template<class K, class T>
__global__
void my_blk512_ppt8_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[4096];
	__shared__ int tmem[4096];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 255) / 256);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<8)+0	<seg_size)?key[k+tid1+(warp_id<<8)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<8)+32	<seg_size)?key[k+tid1+(warp_id<<8)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<8)+64	<seg_size)?key[k+tid1+(warp_id<<8)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<8)+96	<seg_size)?key[k+tid1+(warp_id<<8)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<8)+128	<seg_size)?key[k+tid1+(warp_id<<8)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<8)+160	<seg_size)?key[k+tid1+(warp_id<<8)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<8)+192	<seg_size)?key[k+tid1+(warp_id<<8)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<8)+224	<seg_size)?key[k+tid1+(warp_id<<8)+224	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<8)+0	<seg_size) rg_v0  = tid1+(warp_id<<8)+0	;
			if (tid1+(warp_id<<8)+32	<seg_size) rg_v1  = tid1+(warp_id<<8)+32	;
			if (tid1+(warp_id<<8)+64	<seg_size) rg_v2  = tid1+(warp_id<<8)+64	;
			if (tid1+(warp_id<<8)+96	<seg_size) rg_v3  = tid1+(warp_id<<8)+96	;
			if (tid1+(warp_id<<8)+128	<seg_size) rg_v4  = tid1+(warp_id<<8)+128	;
			if (tid1+(warp_id<<8)+160	<seg_size) rg_v5  = tid1+(warp_id<<8)+160	;
			if (tid1+(warp_id<<8)+192	<seg_size) rg_v6  = tid1+(warp_id<<8)+192	;
			if (tid1+(warp_id<<8)+224	<seg_size) rg_v7  = tid1+(warp_id<<8)+224	;

			// sort 256 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);

			// Store register results to shared memory
			smem[(warp_id<<8) + (tid1<<3) + 0] = rg_k0;
			smem[(warp_id<<8) + (tid1<<3) + 1] = rg_k1;
			smem[(warp_id<<8) + (tid1<<3) + 2] = rg_k2;
			smem[(warp_id<<8) + (tid1<<3) + 3] = rg_k3;
			smem[(warp_id<<8) + (tid1<<3) + 4] = rg_k4;
			smem[(warp_id<<8) + (tid1<<3) + 5] = rg_k5;
			smem[(warp_id<<8) + (tid1<<3) + 6] = rg_k6;
			smem[(warp_id<<8) + (tid1<<3) + 7] = rg_k7;
			tmem[(warp_id<<8) + (tid1<<3) + 0] = rg_v0;
			tmem[(warp_id<<8) + (tid1<<3) + 1] = rg_v1;
			tmem[(warp_id<<8) + (tid1<<3) + 2] = rg_v2;
			tmem[(warp_id<<8) + (tid1<<3) + 3] = rg_v3;
			tmem[(warp_id<<8) + (tid1<<3) + 4] = rg_v4;
			tmem[(warp_id<<8) + (tid1<<3) + 5] = rg_v5;
			tmem[(warp_id<<8) + (tid1<<3) + 6] = rg_v6;
			tmem[(warp_id<<8) + (tid1<<3) + 7] = rg_v7;
		}
		__syncthreads();

		// Merge in 4 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 256;
			rhs_len = 256;
			gran = tid1<<3;
			gran += (warp_id & 1) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 512;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 3) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 1024;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 7) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 2048;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 15) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;

			if((tid<<3)+0 <seg_size) keyB[k+(tid<<3)+0] = rg_k0;
			if((tid<<3)+1 <seg_size) keyB[k+(tid<<3)+1] = rg_k1;
			if((tid<<3)+2 <seg_size) keyB[k+(tid<<3)+2] = rg_k2;
			if((tid<<3)+3 <seg_size) keyB[k+(tid<<3)+3] = rg_k3;
			if((tid<<3)+4 <seg_size) keyB[k+(tid<<3)+4] = rg_k4;
			if((tid<<3)+5 <seg_size) keyB[k+(tid<<3)+5] = rg_k5;
			if((tid<<3)+6 <seg_size) keyB[k+(tid<<3)+6] = rg_k6;
			if((tid<<3)+7 <seg_size) keyB[k+(tid<<3)+7] = rg_k7;
			if((tid<<3)+0 <seg_size) valB[k+(tid<<3)+0] = val[k + rg_v0];
			if((tid<<3)+1 <seg_size) valB[k+(tid<<3)+1] = val[k + rg_v1];
			if((tid<<3)+2 <seg_size) valB[k+(tid<<3)+2] = val[k + rg_v2];
			if((tid<<3)+3 <seg_size) valB[k+(tid<<3)+3] = val[k + rg_v3];
			if((tid<<3)+4 <seg_size) valB[k+(tid<<3)+4] = val[k + rg_v4];
			if((tid<<3)+5 <seg_size) valB[k+(tid<<3)+5] = val[k + rg_v5];
			if((tid<<3)+6 <seg_size) valB[k+(tid<<3)+6] = val[k + rg_v6];
			if((tid<<3)+7 <seg_size) valB[k+(tid<<3)+7] = val[k + rg_v7];
		}
	}
}

// 256 threads per block | 16 ppt
template<class K, class T>
__global__
void my_blk256_ppt16_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[4096];
	__shared__ int tmem[4096];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 511) / 512);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<9)+0	<seg_size)?key[k+tid1+(warp_id<<9)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<9)+32	<seg_size)?key[k+tid1+(warp_id<<9)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<9)+64	<seg_size)?key[k+tid1+(warp_id<<9)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<9)+96	<seg_size)?key[k+tid1+(warp_id<<9)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<9)+128	<seg_size)?key[k+tid1+(warp_id<<9)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<9)+160	<seg_size)?key[k+tid1+(warp_id<<9)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<9)+192	<seg_size)?key[k+tid1+(warp_id<<9)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<9)+224	<seg_size)?key[k+tid1+(warp_id<<9)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<9)+256	<seg_size)?key[k+tid1+(warp_id<<9)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<9)+288	<seg_size)?key[k+tid1+(warp_id<<9)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<9)+320	<seg_size)?key[k+tid1+(warp_id<<9)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<9)+352	<seg_size)?key[k+tid1+(warp_id<<9)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<9)+384	<seg_size)?key[k+tid1+(warp_id<<9)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<9)+416	<seg_size)?key[k+tid1+(warp_id<<9)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<9)+448	<seg_size)?key[k+tid1+(warp_id<<9)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<9)+480	<seg_size)?key[k+tid1+(warp_id<<9)+480	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<9)+0	<seg_size) rg_v0  = tid1+(warp_id<<9)+0	;
			if (tid1+(warp_id<<9)+32	<seg_size) rg_v1  = tid1+(warp_id<<9)+32	;
			if (tid1+(warp_id<<9)+64	<seg_size) rg_v2  = tid1+(warp_id<<9)+64	;
			if (tid1+(warp_id<<9)+96	<seg_size) rg_v3  = tid1+(warp_id<<9)+96	;
			if (tid1+(warp_id<<9)+128	<seg_size) rg_v4  = tid1+(warp_id<<9)+128	;
			if (tid1+(warp_id<<9)+160	<seg_size) rg_v5  = tid1+(warp_id<<9)+160	;
			if (tid1+(warp_id<<9)+192	<seg_size) rg_v6  = tid1+(warp_id<<9)+192	;
			if (tid1+(warp_id<<9)+224	<seg_size) rg_v7  = tid1+(warp_id<<9)+224	;
			if (tid1+(warp_id<<9)+256	<seg_size) rg_v8  = tid1+(warp_id<<9)+256	;
			if (tid1+(warp_id<<9)+288	<seg_size) rg_v9  = tid1+(warp_id<<9)+288	;
			if (tid1+(warp_id<<9)+320	<seg_size) rg_v10  = tid1+(warp_id<<9)+320	;
			if (tid1+(warp_id<<9)+352	<seg_size) rg_v11  = tid1+(warp_id<<9)+352	;
			if (tid1+(warp_id<<9)+384	<seg_size) rg_v12  = tid1+(warp_id<<9)+384	;
			if (tid1+(warp_id<<9)+416	<seg_size) rg_v13  = tid1+(warp_id<<9)+416	;
			if (tid1+(warp_id<<9)+448	<seg_size) rg_v14  = tid1+(warp_id<<9)+448	;
			if (tid1+(warp_id<<9)+480	<seg_size) rg_v15  = tid1+(warp_id<<9)+480	;

			// sort 512 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);

			// Store register results to shared memory
			smem[(warp_id<<9) + (tid1<<4) + 0] = rg_k0;
			smem[(warp_id<<9) + (tid1<<4) + 1] = rg_k1;
			smem[(warp_id<<9) + (tid1<<4) + 2] = rg_k2;
			smem[(warp_id<<9) + (tid1<<4) + 3] = rg_k3;
			smem[(warp_id<<9) + (tid1<<4) + 4] = rg_k4;
			smem[(warp_id<<9) + (tid1<<4) + 5] = rg_k5;
			smem[(warp_id<<9) + (tid1<<4) + 6] = rg_k6;
			smem[(warp_id<<9) + (tid1<<4) + 7] = rg_k7;
			smem[(warp_id<<9) + (tid1<<4) + 8] = rg_k8;
			smem[(warp_id<<9) + (tid1<<4) + 9] = rg_k9;
			smem[(warp_id<<9) + (tid1<<4) + 10] = rg_k10;
			smem[(warp_id<<9) + (tid1<<4) + 11] = rg_k11;
			smem[(warp_id<<9) + (tid1<<4) + 12] = rg_k12;
			smem[(warp_id<<9) + (tid1<<4) + 13] = rg_k13;
			smem[(warp_id<<9) + (tid1<<4) + 14] = rg_k14;
			smem[(warp_id<<9) + (tid1<<4) + 15] = rg_k15;
			tmem[(warp_id<<9) + (tid1<<4) + 0] = rg_v0;
			tmem[(warp_id<<9) + (tid1<<4) + 1] = rg_v1;
			tmem[(warp_id<<9) + (tid1<<4) + 2] = rg_v2;
			tmem[(warp_id<<9) + (tid1<<4) + 3] = rg_v3;
			tmem[(warp_id<<9) + (tid1<<4) + 4] = rg_v4;
			tmem[(warp_id<<9) + (tid1<<4) + 5] = rg_v5;
			tmem[(warp_id<<9) + (tid1<<4) + 6] = rg_v6;
			tmem[(warp_id<<9) + (tid1<<4) + 7] = rg_v7;
			tmem[(warp_id<<9) + (tid1<<4) + 8] = rg_v8;
			tmem[(warp_id<<9) + (tid1<<4) + 9] = rg_v9;
			tmem[(warp_id<<9) + (tid1<<4) + 10] = rg_v10;
			tmem[(warp_id<<9) + (tid1<<4) + 11] = rg_v11;
			tmem[(warp_id<<9) + (tid1<<4) + 12] = rg_v12;
			tmem[(warp_id<<9) + (tid1<<4) + 13] = rg_v13;
			tmem[(warp_id<<9) + (tid1<<4) + 14] = rg_v14;
			tmem[(warp_id<<9) + (tid1<<4) + 15] = rg_v15;
		}
		__syncthreads();

		// Merge in 3 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 512;
			rhs_len = 512;
			gran = tid1<<4;
			gran += (warp_id & 1) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 1024;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 3) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 2048;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 7) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;

			if((tid<<4)+0 <seg_size) keyB[k+(tid<<4)+0] = rg_k0;
			if((tid<<4)+1 <seg_size) keyB[k+(tid<<4)+1] = rg_k1;
			if((tid<<4)+2 <seg_size) keyB[k+(tid<<4)+2] = rg_k2;
			if((tid<<4)+3 <seg_size) keyB[k+(tid<<4)+3] = rg_k3;
			if((tid<<4)+4 <seg_size) keyB[k+(tid<<4)+4] = rg_k4;
			if((tid<<4)+5 <seg_size) keyB[k+(tid<<4)+5] = rg_k5;
			if((tid<<4)+6 <seg_size) keyB[k+(tid<<4)+6] = rg_k6;
			if((tid<<4)+7 <seg_size) keyB[k+(tid<<4)+7] = rg_k7;
			if((tid<<4)+8 <seg_size) keyB[k+(tid<<4)+8] = rg_k8;
			if((tid<<4)+9 <seg_size) keyB[k+(tid<<4)+9] = rg_k9;
			if((tid<<4)+10 <seg_size) keyB[k+(tid<<4)+10] = rg_k10;
			if((tid<<4)+11 <seg_size) keyB[k+(tid<<4)+11] = rg_k11;
			if((tid<<4)+12 <seg_size) keyB[k+(tid<<4)+12] = rg_k12;
			if((tid<<4)+13 <seg_size) keyB[k+(tid<<4)+13] = rg_k13;
			if((tid<<4)+14 <seg_size) keyB[k+(tid<<4)+14] = rg_k14;
			if((tid<<4)+15 <seg_size) keyB[k+(tid<<4)+15] = rg_k15;
			if((tid<<4)+0 <seg_size) valB[k+(tid<<4)+0] = val[k + rg_v0];
			if((tid<<4)+1 <seg_size) valB[k+(tid<<4)+1] = val[k + rg_v1];
			if((tid<<4)+2 <seg_size) valB[k+(tid<<4)+2] = val[k + rg_v2];
			if((tid<<4)+3 <seg_size) valB[k+(tid<<4)+3] = val[k + rg_v3];
			if((tid<<4)+4 <seg_size) valB[k+(tid<<4)+4] = val[k + rg_v4];
			if((tid<<4)+5 <seg_size) valB[k+(tid<<4)+5] = val[k + rg_v5];
			if((tid<<4)+6 <seg_size) valB[k+(tid<<4)+6] = val[k + rg_v6];
			if((tid<<4)+7 <seg_size) valB[k+(tid<<4)+7] = val[k + rg_v7];
			if((tid<<4)+8 <seg_size) valB[k+(tid<<4)+8] = val[k + rg_v8];
			if((tid<<4)+9 <seg_size) valB[k+(tid<<4)+9] = val[k + rg_v9];
			if((tid<<4)+10 <seg_size) valB[k+(tid<<4)+10] = val[k + rg_v10];
			if((tid<<4)+11 <seg_size) valB[k+(tid<<4)+11] = val[k + rg_v11];
			if((tid<<4)+12 <seg_size) valB[k+(tid<<4)+12] = val[k + rg_v12];
			if((tid<<4)+13 <seg_size) valB[k+(tid<<4)+13] = val[k + rg_v13];
			if((tid<<4)+14 <seg_size) valB[k+(tid<<4)+14] = val[k + rg_v14];
			if((tid<<4)+15 <seg_size) valB[k+(tid<<4)+15] = val[k + rg_v15];
		}
	}
}

// 128 threads per block | 32 ppt
template<class K, class T>
__global__
void my_blk128_ppt32_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[4096];
	__shared__ int tmem[4096];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	K rg_k16;
	K rg_k17;
	K rg_k18;
	K rg_k19;
	K rg_k20;
	K rg_k21;
	K rg_k22;
	K rg_k23;
	K rg_k24;
	K rg_k25;
	K rg_k26;
	K rg_k27;
	K rg_k28;
	K rg_k29;
	K rg_k30;
	K rg_k31;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int rg_v16;
	int rg_v17;
	int rg_v18;
	int rg_v19;
	int rg_v20;
	int rg_v21;
	int rg_v22;
	int rg_v23;
	int rg_v24;
	int rg_v25;
	int rg_v26;
	int rg_v27;
	int rg_v28;
	int rg_v29;
	int rg_v30;
	int rg_v31;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 1023) / 1024);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<10)+0	<seg_size)?key[k+tid1+(warp_id<<10)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<10)+32	<seg_size)?key[k+tid1+(warp_id<<10)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<10)+64	<seg_size)?key[k+tid1+(warp_id<<10)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<10)+96	<seg_size)?key[k+tid1+(warp_id<<10)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<10)+128	<seg_size)?key[k+tid1+(warp_id<<10)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<10)+160	<seg_size)?key[k+tid1+(warp_id<<10)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<10)+192	<seg_size)?key[k+tid1+(warp_id<<10)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<10)+224	<seg_size)?key[k+tid1+(warp_id<<10)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<10)+256	<seg_size)?key[k+tid1+(warp_id<<10)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<10)+288	<seg_size)?key[k+tid1+(warp_id<<10)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<10)+320	<seg_size)?key[k+tid1+(warp_id<<10)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<10)+352	<seg_size)?key[k+tid1+(warp_id<<10)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<10)+384	<seg_size)?key[k+tid1+(warp_id<<10)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<10)+416	<seg_size)?key[k+tid1+(warp_id<<10)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<10)+448	<seg_size)?key[k+tid1+(warp_id<<10)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<10)+480	<seg_size)?key[k+tid1+(warp_id<<10)+480	]:std::numeric_limits<K>::max();
			rg_k16  = (tid1+(warp_id<<10)+512	<seg_size)?key[k+tid1+(warp_id<<10)+512	]:std::numeric_limits<K>::max();
			rg_k17  = (tid1+(warp_id<<10)+544	<seg_size)?key[k+tid1+(warp_id<<10)+544	]:std::numeric_limits<K>::max();
			rg_k18  = (tid1+(warp_id<<10)+576	<seg_size)?key[k+tid1+(warp_id<<10)+576	]:std::numeric_limits<K>::max();
			rg_k19  = (tid1+(warp_id<<10)+608	<seg_size)?key[k+tid1+(warp_id<<10)+608	]:std::numeric_limits<K>::max();
			rg_k20  = (tid1+(warp_id<<10)+640	<seg_size)?key[k+tid1+(warp_id<<10)+640	]:std::numeric_limits<K>::max();
			rg_k21  = (tid1+(warp_id<<10)+672	<seg_size)?key[k+tid1+(warp_id<<10)+672	]:std::numeric_limits<K>::max();
			rg_k22  = (tid1+(warp_id<<10)+704	<seg_size)?key[k+tid1+(warp_id<<10)+704	]:std::numeric_limits<K>::max();
			rg_k23  = (tid1+(warp_id<<10)+736	<seg_size)?key[k+tid1+(warp_id<<10)+736	]:std::numeric_limits<K>::max();
			rg_k24  = (tid1+(warp_id<<10)+768	<seg_size)?key[k+tid1+(warp_id<<10)+768	]:std::numeric_limits<K>::max();
			rg_k25  = (tid1+(warp_id<<10)+800	<seg_size)?key[k+tid1+(warp_id<<10)+800	]:std::numeric_limits<K>::max();
			rg_k26  = (tid1+(warp_id<<10)+832	<seg_size)?key[k+tid1+(warp_id<<10)+832	]:std::numeric_limits<K>::max();
			rg_k27  = (tid1+(warp_id<<10)+864	<seg_size)?key[k+tid1+(warp_id<<10)+864	]:std::numeric_limits<K>::max();
			rg_k28  = (tid1+(warp_id<<10)+896	<seg_size)?key[k+tid1+(warp_id<<10)+896	]:std::numeric_limits<K>::max();
			rg_k29  = (tid1+(warp_id<<10)+928	<seg_size)?key[k+tid1+(warp_id<<10)+928	]:std::numeric_limits<K>::max();
			rg_k30  = (tid1+(warp_id<<10)+960	<seg_size)?key[k+tid1+(warp_id<<10)+960	]:std::numeric_limits<K>::max();
			rg_k31  = (tid1+(warp_id<<10)+992	<seg_size)?key[k+tid1+(warp_id<<10)+992	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<10)+0	<seg_size) rg_v0  = tid1+(warp_id<<10)+0	;
			if (tid1+(warp_id<<10)+32	<seg_size) rg_v1  = tid1+(warp_id<<10)+32	;
			if (tid1+(warp_id<<10)+64	<seg_size) rg_v2  = tid1+(warp_id<<10)+64	;
			if (tid1+(warp_id<<10)+96	<seg_size) rg_v3  = tid1+(warp_id<<10)+96	;
			if (tid1+(warp_id<<10)+128	<seg_size) rg_v4  = tid1+(warp_id<<10)+128	;
			if (tid1+(warp_id<<10)+160	<seg_size) rg_v5  = tid1+(warp_id<<10)+160	;
			if (tid1+(warp_id<<10)+192	<seg_size) rg_v6  = tid1+(warp_id<<10)+192	;
			if (tid1+(warp_id<<10)+224	<seg_size) rg_v7  = tid1+(warp_id<<10)+224	;
			if (tid1+(warp_id<<10)+256	<seg_size) rg_v8  = tid1+(warp_id<<10)+256	;
			if (tid1+(warp_id<<10)+288	<seg_size) rg_v9  = tid1+(warp_id<<10)+288	;
			if (tid1+(warp_id<<10)+320	<seg_size) rg_v10  = tid1+(warp_id<<10)+320	;
			if (tid1+(warp_id<<10)+352	<seg_size) rg_v11  = tid1+(warp_id<<10)+352	;
			if (tid1+(warp_id<<10)+384	<seg_size) rg_v12  = tid1+(warp_id<<10)+384	;
			if (tid1+(warp_id<<10)+416	<seg_size) rg_v13  = tid1+(warp_id<<10)+416	;
			if (tid1+(warp_id<<10)+448	<seg_size) rg_v14  = tid1+(warp_id<<10)+448	;
			if (tid1+(warp_id<<10)+480	<seg_size) rg_v15  = tid1+(warp_id<<10)+480	;
			if (tid1+(warp_id<<10)+512	<seg_size) rg_v16  = tid1+(warp_id<<10)+512	;
			if (tid1+(warp_id<<10)+544	<seg_size) rg_v17  = tid1+(warp_id<<10)+544	;
			if (tid1+(warp_id<<10)+576	<seg_size) rg_v18  = tid1+(warp_id<<10)+576	;
			if (tid1+(warp_id<<10)+608	<seg_size) rg_v19  = tid1+(warp_id<<10)+608	;
			if (tid1+(warp_id<<10)+640	<seg_size) rg_v20  = tid1+(warp_id<<10)+640	;
			if (tid1+(warp_id<<10)+672	<seg_size) rg_v21  = tid1+(warp_id<<10)+672	;
			if (tid1+(warp_id<<10)+704	<seg_size) rg_v22  = tid1+(warp_id<<10)+704	;
			if (tid1+(warp_id<<10)+736	<seg_size) rg_v23  = tid1+(warp_id<<10)+736	;
			if (tid1+(warp_id<<10)+768	<seg_size) rg_v24  = tid1+(warp_id<<10)+768	;
			if (tid1+(warp_id<<10)+800	<seg_size) rg_v25  = tid1+(warp_id<<10)+800	;
			if (tid1+(warp_id<<10)+832	<seg_size) rg_v26  = tid1+(warp_id<<10)+832	;
			if (tid1+(warp_id<<10)+864	<seg_size) rg_v27  = tid1+(warp_id<<10)+864	;
			if (tid1+(warp_id<<10)+896	<seg_size) rg_v28  = tid1+(warp_id<<10)+896	;
			if (tid1+(warp_id<<10)+928	<seg_size) rg_v29  = tid1+(warp_id<<10)+928	;
			if (tid1+(warp_id<<10)+960	<seg_size) rg_v30  = tid1+(warp_id<<10)+960	;
			if (tid1+(warp_id<<10)+992	<seg_size) rg_v31  = tid1+(warp_id<<10)+992	;

			// sort 1024 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			CMP_SWP(K, rg_k16, rg_k19, int, rg_v16, rg_v19);
			CMP_SWP(K, rg_k17, rg_k18, int, rg_v17, rg_v18);
			CMP_SWP(K, rg_k20, rg_k23, int, rg_v20, rg_v23);
			CMP_SWP(K, rg_k21, rg_k22, int, rg_v21, rg_v22);
			CMP_SWP(K, rg_k24, rg_k27, int, rg_v24, rg_v27);
			CMP_SWP(K, rg_k25, rg_k26, int, rg_v25, rg_v26);
			CMP_SWP(K, rg_k28, rg_k31, int, rg_v28, rg_v31);
			CMP_SWP(K, rg_k29, rg_k30, int, rg_v29, rg_v30);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			CMP_SWP(K, rg_k16, rg_k23, int, rg_v16, rg_v23);
			CMP_SWP(K, rg_k17, rg_k22, int, rg_v17, rg_v22);
			CMP_SWP(K, rg_k18, rg_k21, int, rg_v18, rg_v21);
			CMP_SWP(K, rg_k19, rg_k20, int, rg_v19, rg_v20);
			CMP_SWP(K, rg_k24, rg_k31, int, rg_v24, rg_v31);
			CMP_SWP(K, rg_k25, rg_k30, int, rg_v25, rg_v30);
			CMP_SWP(K, rg_k26, rg_k29, int, rg_v26, rg_v29);
			CMP_SWP(K, rg_k27, rg_k28, int, rg_v27, rg_v28);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			CMP_SWP(K, rg_k16, rg_k31, int, rg_v16, rg_v31);
			CMP_SWP(K, rg_k17, rg_k30, int, rg_v17, rg_v30);
			CMP_SWP(K, rg_k18, rg_k29, int, rg_v18, rg_v29);
			CMP_SWP(K, rg_k19, rg_k28, int, rg_v19, rg_v28);
			CMP_SWP(K, rg_k20, rg_k27, int, rg_v20, rg_v27);
			CMP_SWP(K, rg_k21, rg_k26, int, rg_v21, rg_v26);
			CMP_SWP(K, rg_k22, rg_k25, int, rg_v22, rg_v25);
			CMP_SWP(K, rg_k23, rg_k24, int, rg_v23, rg_v24);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k31, int, rg_v0, rg_v31);
			CMP_SWP(K, rg_k1, rg_k30, int, rg_v1, rg_v30);
			CMP_SWP(K, rg_k2, rg_k29, int, rg_v2, rg_v29);
			CMP_SWP(K, rg_k3, rg_k28, int, rg_v3, rg_v28);
			CMP_SWP(K, rg_k4, rg_k27, int, rg_v4, rg_v27);
			CMP_SWP(K, rg_k5, rg_k26, int, rg_v5, rg_v26);
			CMP_SWP(K, rg_k6, rg_k25, int, rg_v6, rg_v25);
			CMP_SWP(K, rg_k7, rg_k24, int, rg_v7, rg_v24);
			CMP_SWP(K, rg_k8, rg_k23, int, rg_v8, rg_v23);
			CMP_SWP(K, rg_k9, rg_k22, int, rg_v9, rg_v22);
			CMP_SWP(K, rg_k10, rg_k21, int, rg_v10, rg_v21);
			CMP_SWP(K, rg_k11, rg_k20, int, rg_v11, rg_v20);
			CMP_SWP(K, rg_k12, rg_k19, int, rg_v12, rg_v19);
			CMP_SWP(K, rg_k13, rg_k18, int, rg_v13, rg_v18);
			CMP_SWP(K, rg_k14, rg_k17, int, rg_v14, rg_v17);
			CMP_SWP(K, rg_k15, rg_k16, int, rg_v15, rg_v16);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);

			// Store register results to shared memory
			smem[(warp_id<<10) + (tid1<<5) + 0] = rg_k0;
			smem[(warp_id<<10) + (tid1<<5) + 1] = rg_k1;
			smem[(warp_id<<10) + (tid1<<5) + 2] = rg_k2;
			smem[(warp_id<<10) + (tid1<<5) + 3] = rg_k3;
			smem[(warp_id<<10) + (tid1<<5) + 4] = rg_k4;
			smem[(warp_id<<10) + (tid1<<5) + 5] = rg_k5;
			smem[(warp_id<<10) + (tid1<<5) + 6] = rg_k6;
			smem[(warp_id<<10) + (tid1<<5) + 7] = rg_k7;
			smem[(warp_id<<10) + (tid1<<5) + 8] = rg_k8;
			smem[(warp_id<<10) + (tid1<<5) + 9] = rg_k9;
			smem[(warp_id<<10) + (tid1<<5) + 10] = rg_k10;
			smem[(warp_id<<10) + (tid1<<5) + 11] = rg_k11;
			smem[(warp_id<<10) + (tid1<<5) + 12] = rg_k12;
			smem[(warp_id<<10) + (tid1<<5) + 13] = rg_k13;
			smem[(warp_id<<10) + (tid1<<5) + 14] = rg_k14;
			smem[(warp_id<<10) + (tid1<<5) + 15] = rg_k15;
			smem[(warp_id<<10) + (tid1<<5) + 16] = rg_k16;
			smem[(warp_id<<10) + (tid1<<5) + 17] = rg_k17;
			smem[(warp_id<<10) + (tid1<<5) + 18] = rg_k18;
			smem[(warp_id<<10) + (tid1<<5) + 19] = rg_k19;
			smem[(warp_id<<10) + (tid1<<5) + 20] = rg_k20;
			smem[(warp_id<<10) + (tid1<<5) + 21] = rg_k21;
			smem[(warp_id<<10) + (tid1<<5) + 22] = rg_k22;
			smem[(warp_id<<10) + (tid1<<5) + 23] = rg_k23;
			smem[(warp_id<<10) + (tid1<<5) + 24] = rg_k24;
			smem[(warp_id<<10) + (tid1<<5) + 25] = rg_k25;
			smem[(warp_id<<10) + (tid1<<5) + 26] = rg_k26;
			smem[(warp_id<<10) + (tid1<<5) + 27] = rg_k27;
			smem[(warp_id<<10) + (tid1<<5) + 28] = rg_k28;
			smem[(warp_id<<10) + (tid1<<5) + 29] = rg_k29;
			smem[(warp_id<<10) + (tid1<<5) + 30] = rg_k30;
			smem[(warp_id<<10) + (tid1<<5) + 31] = rg_k31;
			tmem[(warp_id<<10) + (tid1<<5) + 0] = rg_v0;
			tmem[(warp_id<<10) + (tid1<<5) + 1] = rg_v1;
			tmem[(warp_id<<10) + (tid1<<5) + 2] = rg_v2;
			tmem[(warp_id<<10) + (tid1<<5) + 3] = rg_v3;
			tmem[(warp_id<<10) + (tid1<<5) + 4] = rg_v4;
			tmem[(warp_id<<10) + (tid1<<5) + 5] = rg_v5;
			tmem[(warp_id<<10) + (tid1<<5) + 6] = rg_v6;
			tmem[(warp_id<<10) + (tid1<<5) + 7] = rg_v7;
			tmem[(warp_id<<10) + (tid1<<5) + 8] = rg_v8;
			tmem[(warp_id<<10) + (tid1<<5) + 9] = rg_v9;
			tmem[(warp_id<<10) + (tid1<<5) + 10] = rg_v10;
			tmem[(warp_id<<10) + (tid1<<5) + 11] = rg_v11;
			tmem[(warp_id<<10) + (tid1<<5) + 12] = rg_v12;
			tmem[(warp_id<<10) + (tid1<<5) + 13] = rg_v13;
			tmem[(warp_id<<10) + (tid1<<5) + 14] = rg_v14;
			tmem[(warp_id<<10) + (tid1<<5) + 15] = rg_v15;
			tmem[(warp_id<<10) + (tid1<<5) + 16] = rg_v16;
			tmem[(warp_id<<10) + (tid1<<5) + 17] = rg_v17;
			tmem[(warp_id<<10) + (tid1<<5) + 18] = rg_v18;
			tmem[(warp_id<<10) + (tid1<<5) + 19] = rg_v19;
			tmem[(warp_id<<10) + (tid1<<5) + 20] = rg_v20;
			tmem[(warp_id<<10) + (tid1<<5) + 21] = rg_v21;
			tmem[(warp_id<<10) + (tid1<<5) + 22] = rg_v22;
			tmem[(warp_id<<10) + (tid1<<5) + 23] = rg_v23;
			tmem[(warp_id<<10) + (tid1<<5) + 24] = rg_v24;
			tmem[(warp_id<<10) + (tid1<<5) + 25] = rg_v25;
			tmem[(warp_id<<10) + (tid1<<5) + 26] = rg_v26;
			tmem[(warp_id<<10) + (tid1<<5) + 27] = rg_v27;
			tmem[(warp_id<<10) + (tid1<<5) + 28] = rg_v28;
			tmem[(warp_id<<10) + (tid1<<5) + 29] = rg_v29;
			tmem[(warp_id<<10) + (tid1<<5) + 30] = rg_v30;
			tmem[(warp_id<<10) + (tid1<<5) + 31] = rg_v31;
		}
		__syncthreads();

		// Merge in 2 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 1024;
			rhs_len = 1024;
			gran = tid1<<5;
			gran += (warp_id & 1) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 2048;
			rhs_len = 1024 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<5;
			gran += (warp_id & 3) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;

			if((tid<<5)+0 <seg_size) keyB[k+(tid<<5)+0] = rg_k0;
			if((tid<<5)+1 <seg_size) keyB[k+(tid<<5)+1] = rg_k1;
			if((tid<<5)+2 <seg_size) keyB[k+(tid<<5)+2] = rg_k2;
			if((tid<<5)+3 <seg_size) keyB[k+(tid<<5)+3] = rg_k3;
			if((tid<<5)+4 <seg_size) keyB[k+(tid<<5)+4] = rg_k4;
			if((tid<<5)+5 <seg_size) keyB[k+(tid<<5)+5] = rg_k5;
			if((tid<<5)+6 <seg_size) keyB[k+(tid<<5)+6] = rg_k6;
			if((tid<<5)+7 <seg_size) keyB[k+(tid<<5)+7] = rg_k7;
			if((tid<<5)+8 <seg_size) keyB[k+(tid<<5)+8] = rg_k8;
			if((tid<<5)+9 <seg_size) keyB[k+(tid<<5)+9] = rg_k9;
			if((tid<<5)+10 <seg_size) keyB[k+(tid<<5)+10] = rg_k10;
			if((tid<<5)+11 <seg_size) keyB[k+(tid<<5)+11] = rg_k11;
			if((tid<<5)+12 <seg_size) keyB[k+(tid<<5)+12] = rg_k12;
			if((tid<<5)+13 <seg_size) keyB[k+(tid<<5)+13] = rg_k13;
			if((tid<<5)+14 <seg_size) keyB[k+(tid<<5)+14] = rg_k14;
			if((tid<<5)+15 <seg_size) keyB[k+(tid<<5)+15] = rg_k15;
			if((tid<<5)+16 <seg_size) keyB[k+(tid<<5)+16] = rg_k16;
			if((tid<<5)+17 <seg_size) keyB[k+(tid<<5)+17] = rg_k17;
			if((tid<<5)+18 <seg_size) keyB[k+(tid<<5)+18] = rg_k18;
			if((tid<<5)+19 <seg_size) keyB[k+(tid<<5)+19] = rg_k19;
			if((tid<<5)+20 <seg_size) keyB[k+(tid<<5)+20] = rg_k20;
			if((tid<<5)+21 <seg_size) keyB[k+(tid<<5)+21] = rg_k21;
			if((tid<<5)+22 <seg_size) keyB[k+(tid<<5)+22] = rg_k22;
			if((tid<<5)+23 <seg_size) keyB[k+(tid<<5)+23] = rg_k23;
			if((tid<<5)+24 <seg_size) keyB[k+(tid<<5)+24] = rg_k24;
			if((tid<<5)+25 <seg_size) keyB[k+(tid<<5)+25] = rg_k25;
			if((tid<<5)+26 <seg_size) keyB[k+(tid<<5)+26] = rg_k26;
			if((tid<<5)+27 <seg_size) keyB[k+(tid<<5)+27] = rg_k27;
			if((tid<<5)+28 <seg_size) keyB[k+(tid<<5)+28] = rg_k28;
			if((tid<<5)+29 <seg_size) keyB[k+(tid<<5)+29] = rg_k29;
			if((tid<<5)+30 <seg_size) keyB[k+(tid<<5)+30] = rg_k30;
			if((tid<<5)+31 <seg_size) keyB[k+(tid<<5)+31] = rg_k31;
			if((tid<<5)+0 <seg_size) valB[k+(tid<<5)+0] = val[k + rg_v0];
			if((tid<<5)+1 <seg_size) valB[k+(tid<<5)+1] = val[k + rg_v1];
			if((tid<<5)+2 <seg_size) valB[k+(tid<<5)+2] = val[k + rg_v2];
			if((tid<<5)+3 <seg_size) valB[k+(tid<<5)+3] = val[k + rg_v3];
			if((tid<<5)+4 <seg_size) valB[k+(tid<<5)+4] = val[k + rg_v4];
			if((tid<<5)+5 <seg_size) valB[k+(tid<<5)+5] = val[k + rg_v5];
			if((tid<<5)+6 <seg_size) valB[k+(tid<<5)+6] = val[k + rg_v6];
			if((tid<<5)+7 <seg_size) valB[k+(tid<<5)+7] = val[k + rg_v7];
			if((tid<<5)+8 <seg_size) valB[k+(tid<<5)+8] = val[k + rg_v8];
			if((tid<<5)+9 <seg_size) valB[k+(tid<<5)+9] = val[k + rg_v9];
			if((tid<<5)+10 <seg_size) valB[k+(tid<<5)+10] = val[k + rg_v10];
			if((tid<<5)+11 <seg_size) valB[k+(tid<<5)+11] = val[k + rg_v11];
			if((tid<<5)+12 <seg_size) valB[k+(tid<<5)+12] = val[k + rg_v12];
			if((tid<<5)+13 <seg_size) valB[k+(tid<<5)+13] = val[k + rg_v13];
			if((tid<<5)+14 <seg_size) valB[k+(tid<<5)+14] = val[k + rg_v14];
			if((tid<<5)+15 <seg_size) valB[k+(tid<<5)+15] = val[k + rg_v15];
			if((tid<<5)+16 <seg_size) valB[k+(tid<<5)+16] = val[k + rg_v16];
			if((tid<<5)+17 <seg_size) valB[k+(tid<<5)+17] = val[k + rg_v17];
			if((tid<<5)+18 <seg_size) valB[k+(tid<<5)+18] = val[k + rg_v18];
			if((tid<<5)+19 <seg_size) valB[k+(tid<<5)+19] = val[k + rg_v19];
			if((tid<<5)+20 <seg_size) valB[k+(tid<<5)+20] = val[k + rg_v20];
			if((tid<<5)+21 <seg_size) valB[k+(tid<<5)+21] = val[k + rg_v21];
			if((tid<<5)+22 <seg_size) valB[k+(tid<<5)+22] = val[k + rg_v22];
			if((tid<<5)+23 <seg_size) valB[k+(tid<<5)+23] = val[k + rg_v23];
			if((tid<<5)+24 <seg_size) valB[k+(tid<<5)+24] = val[k + rg_v24];
			if((tid<<5)+25 <seg_size) valB[k+(tid<<5)+25] = val[k + rg_v25];
			if((tid<<5)+26 <seg_size) valB[k+(tid<<5)+26] = val[k + rg_v26];
			if((tid<<5)+27 <seg_size) valB[k+(tid<<5)+27] = val[k + rg_v27];
			if((tid<<5)+28 <seg_size) valB[k+(tid<<5)+28] = val[k + rg_v28];
			if((tid<<5)+29 <seg_size) valB[k+(tid<<5)+29] = val[k + rg_v29];
			if((tid<<5)+30 <seg_size) valB[k+(tid<<5)+30] = val[k + rg_v30];
			if((tid<<5)+31 <seg_size) valB[k+(tid<<5)+31] = val[k + rg_v31];
		}
	}
}

// segsize 8192

// 1024 threads per block | 8 ppt
template<class K, class T>
__global__
void my_blk1024_ppt8_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	extern __shared__ char ext_shared_memory[];
	K* smem = (K*) ext_shared_memory;
	int* tmem = (int*) (&smem[8192]);
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 255) / 256);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<8)+0	<seg_size)?key[k+tid1+(warp_id<<8)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<8)+32	<seg_size)?key[k+tid1+(warp_id<<8)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<8)+64	<seg_size)?key[k+tid1+(warp_id<<8)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<8)+96	<seg_size)?key[k+tid1+(warp_id<<8)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<8)+128	<seg_size)?key[k+tid1+(warp_id<<8)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<8)+160	<seg_size)?key[k+tid1+(warp_id<<8)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<8)+192	<seg_size)?key[k+tid1+(warp_id<<8)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<8)+224	<seg_size)?key[k+tid1+(warp_id<<8)+224	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<8)+0	<seg_size) rg_v0  = tid1+(warp_id<<8)+0	;
			if (tid1+(warp_id<<8)+32	<seg_size) rg_v1  = tid1+(warp_id<<8)+32	;
			if (tid1+(warp_id<<8)+64	<seg_size) rg_v2  = tid1+(warp_id<<8)+64	;
			if (tid1+(warp_id<<8)+96	<seg_size) rg_v3  = tid1+(warp_id<<8)+96	;
			if (tid1+(warp_id<<8)+128	<seg_size) rg_v4  = tid1+(warp_id<<8)+128	;
			if (tid1+(warp_id<<8)+160	<seg_size) rg_v5  = tid1+(warp_id<<8)+160	;
			if (tid1+(warp_id<<8)+192	<seg_size) rg_v6  = tid1+(warp_id<<8)+192	;
			if (tid1+(warp_id<<8)+224	<seg_size) rg_v7  = tid1+(warp_id<<8)+224	;

			// sort 256 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);

			// Store register results to shared memory
			smem[(warp_id<<8) + (tid1<<3) + 0] = rg_k0;
			smem[(warp_id<<8) + (tid1<<3) + 1] = rg_k1;
			smem[(warp_id<<8) + (tid1<<3) + 2] = rg_k2;
			smem[(warp_id<<8) + (tid1<<3) + 3] = rg_k3;
			smem[(warp_id<<8) + (tid1<<3) + 4] = rg_k4;
			smem[(warp_id<<8) + (tid1<<3) + 5] = rg_k5;
			smem[(warp_id<<8) + (tid1<<3) + 6] = rg_k6;
			smem[(warp_id<<8) + (tid1<<3) + 7] = rg_k7;
			tmem[(warp_id<<8) + (tid1<<3) + 0] = rg_v0;
			tmem[(warp_id<<8) + (tid1<<3) + 1] = rg_v1;
			tmem[(warp_id<<8) + (tid1<<3) + 2] = rg_v2;
			tmem[(warp_id<<8) + (tid1<<3) + 3] = rg_v3;
			tmem[(warp_id<<8) + (tid1<<3) + 4] = rg_v4;
			tmem[(warp_id<<8) + (tid1<<3) + 5] = rg_v5;
			tmem[(warp_id<<8) + (tid1<<3) + 6] = rg_v6;
			tmem[(warp_id<<8) + (tid1<<3) + 7] = rg_v7;
		}
		__syncthreads();

		// Merge in 5 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 256;
			rhs_len = 256;
			gran = tid1<<3;
			gran += (warp_id & 1) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 512;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 3) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 1024;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 7) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 2048;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 15) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 4
		grp_start_wp_id = ((warp_id>>5)<<5);
		if(grp_start_wp_id + (1 << 4) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 4096;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 17 < full_wp) +
				(grp_start_wp_id + 18 < full_wp) +
				(grp_start_wp_id + 19 < full_wp) +
				(grp_start_wp_id + 20 < full_wp) +
				(grp_start_wp_id + 21 < full_wp) +
				(grp_start_wp_id + 22 < full_wp) +
				(grp_start_wp_id + 23 < full_wp) +
				(grp_start_wp_id + 24 < full_wp) +
				(grp_start_wp_id + 25 < full_wp) +
				(grp_start_wp_id + 26 < full_wp) +
				(grp_start_wp_id + 27 < full_wp) +
				(grp_start_wp_id + 28 < full_wp) +
				(grp_start_wp_id + 29 < full_wp) +
				(grp_start_wp_id + 30 < full_wp) +
				(grp_start_wp_id + 31 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 31) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;

			if((tid<<3)+0 <seg_size) keyB[k+(tid<<3)+0] = rg_k0;
			if((tid<<3)+1 <seg_size) keyB[k+(tid<<3)+1] = rg_k1;
			if((tid<<3)+2 <seg_size) keyB[k+(tid<<3)+2] = rg_k2;
			if((tid<<3)+3 <seg_size) keyB[k+(tid<<3)+3] = rg_k3;
			if((tid<<3)+4 <seg_size) keyB[k+(tid<<3)+4] = rg_k4;
			if((tid<<3)+5 <seg_size) keyB[k+(tid<<3)+5] = rg_k5;
			if((tid<<3)+6 <seg_size) keyB[k+(tid<<3)+6] = rg_k6;
			if((tid<<3)+7 <seg_size) keyB[k+(tid<<3)+7] = rg_k7;
			if((tid<<3)+0 <seg_size) valB[k+(tid<<3)+0] = val[k + rg_v0];
			if((tid<<3)+1 <seg_size) valB[k+(tid<<3)+1] = val[k + rg_v1];
			if((tid<<3)+2 <seg_size) valB[k+(tid<<3)+2] = val[k + rg_v2];
			if((tid<<3)+3 <seg_size) valB[k+(tid<<3)+3] = val[k + rg_v3];
			if((tid<<3)+4 <seg_size) valB[k+(tid<<3)+4] = val[k + rg_v4];
			if((tid<<3)+5 <seg_size) valB[k+(tid<<3)+5] = val[k + rg_v5];
			if((tid<<3)+6 <seg_size) valB[k+(tid<<3)+6] = val[k + rg_v6];
			if((tid<<3)+7 <seg_size) valB[k+(tid<<3)+7] = val[k + rg_v7];
		}
	}
}

// 512 threads per block | 16 ppt
template<class K, class T>
__global__
void my_blk512_ppt16_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	extern __shared__ char ext_shared_memory[];
	K* smem = (K*) ext_shared_memory;
	int* tmem = (int*) (&smem[8192]);
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 511) / 512);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<9)+0	<seg_size)?key[k+tid1+(warp_id<<9)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<9)+32	<seg_size)?key[k+tid1+(warp_id<<9)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<9)+64	<seg_size)?key[k+tid1+(warp_id<<9)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<9)+96	<seg_size)?key[k+tid1+(warp_id<<9)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<9)+128	<seg_size)?key[k+tid1+(warp_id<<9)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<9)+160	<seg_size)?key[k+tid1+(warp_id<<9)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<9)+192	<seg_size)?key[k+tid1+(warp_id<<9)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<9)+224	<seg_size)?key[k+tid1+(warp_id<<9)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<9)+256	<seg_size)?key[k+tid1+(warp_id<<9)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<9)+288	<seg_size)?key[k+tid1+(warp_id<<9)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<9)+320	<seg_size)?key[k+tid1+(warp_id<<9)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<9)+352	<seg_size)?key[k+tid1+(warp_id<<9)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<9)+384	<seg_size)?key[k+tid1+(warp_id<<9)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<9)+416	<seg_size)?key[k+tid1+(warp_id<<9)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<9)+448	<seg_size)?key[k+tid1+(warp_id<<9)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<9)+480	<seg_size)?key[k+tid1+(warp_id<<9)+480	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<9)+0	<seg_size) rg_v0  = tid1+(warp_id<<9)+0	;
			if (tid1+(warp_id<<9)+32	<seg_size) rg_v1  = tid1+(warp_id<<9)+32	;
			if (tid1+(warp_id<<9)+64	<seg_size) rg_v2  = tid1+(warp_id<<9)+64	;
			if (tid1+(warp_id<<9)+96	<seg_size) rg_v3  = tid1+(warp_id<<9)+96	;
			if (tid1+(warp_id<<9)+128	<seg_size) rg_v4  = tid1+(warp_id<<9)+128	;
			if (tid1+(warp_id<<9)+160	<seg_size) rg_v5  = tid1+(warp_id<<9)+160	;
			if (tid1+(warp_id<<9)+192	<seg_size) rg_v6  = tid1+(warp_id<<9)+192	;
			if (tid1+(warp_id<<9)+224	<seg_size) rg_v7  = tid1+(warp_id<<9)+224	;
			if (tid1+(warp_id<<9)+256	<seg_size) rg_v8  = tid1+(warp_id<<9)+256	;
			if (tid1+(warp_id<<9)+288	<seg_size) rg_v9  = tid1+(warp_id<<9)+288	;
			if (tid1+(warp_id<<9)+320	<seg_size) rg_v10  = tid1+(warp_id<<9)+320	;
			if (tid1+(warp_id<<9)+352	<seg_size) rg_v11  = tid1+(warp_id<<9)+352	;
			if (tid1+(warp_id<<9)+384	<seg_size) rg_v12  = tid1+(warp_id<<9)+384	;
			if (tid1+(warp_id<<9)+416	<seg_size) rg_v13  = tid1+(warp_id<<9)+416	;
			if (tid1+(warp_id<<9)+448	<seg_size) rg_v14  = tid1+(warp_id<<9)+448	;
			if (tid1+(warp_id<<9)+480	<seg_size) rg_v15  = tid1+(warp_id<<9)+480	;

			// sort 512 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);

			// Store register results to shared memory
			smem[(warp_id<<9) + (tid1<<4) + 0] = rg_k0;
			smem[(warp_id<<9) + (tid1<<4) + 1] = rg_k1;
			smem[(warp_id<<9) + (tid1<<4) + 2] = rg_k2;
			smem[(warp_id<<9) + (tid1<<4) + 3] = rg_k3;
			smem[(warp_id<<9) + (tid1<<4) + 4] = rg_k4;
			smem[(warp_id<<9) + (tid1<<4) + 5] = rg_k5;
			smem[(warp_id<<9) + (tid1<<4) + 6] = rg_k6;
			smem[(warp_id<<9) + (tid1<<4) + 7] = rg_k7;
			smem[(warp_id<<9) + (tid1<<4) + 8] = rg_k8;
			smem[(warp_id<<9) + (tid1<<4) + 9] = rg_k9;
			smem[(warp_id<<9) + (tid1<<4) + 10] = rg_k10;
			smem[(warp_id<<9) + (tid1<<4) + 11] = rg_k11;
			smem[(warp_id<<9) + (tid1<<4) + 12] = rg_k12;
			smem[(warp_id<<9) + (tid1<<4) + 13] = rg_k13;
			smem[(warp_id<<9) + (tid1<<4) + 14] = rg_k14;
			smem[(warp_id<<9) + (tid1<<4) + 15] = rg_k15;
			tmem[(warp_id<<9) + (tid1<<4) + 0] = rg_v0;
			tmem[(warp_id<<9) + (tid1<<4) + 1] = rg_v1;
			tmem[(warp_id<<9) + (tid1<<4) + 2] = rg_v2;
			tmem[(warp_id<<9) + (tid1<<4) + 3] = rg_v3;
			tmem[(warp_id<<9) + (tid1<<4) + 4] = rg_v4;
			tmem[(warp_id<<9) + (tid1<<4) + 5] = rg_v5;
			tmem[(warp_id<<9) + (tid1<<4) + 6] = rg_v6;
			tmem[(warp_id<<9) + (tid1<<4) + 7] = rg_v7;
			tmem[(warp_id<<9) + (tid1<<4) + 8] = rg_v8;
			tmem[(warp_id<<9) + (tid1<<4) + 9] = rg_v9;
			tmem[(warp_id<<9) + (tid1<<4) + 10] = rg_v10;
			tmem[(warp_id<<9) + (tid1<<4) + 11] = rg_v11;
			tmem[(warp_id<<9) + (tid1<<4) + 12] = rg_v12;
			tmem[(warp_id<<9) + (tid1<<4) + 13] = rg_v13;
			tmem[(warp_id<<9) + (tid1<<4) + 14] = rg_v14;
			tmem[(warp_id<<9) + (tid1<<4) + 15] = rg_v15;
		}
		__syncthreads();

		// Merge in 4 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 512;
			rhs_len = 512;
			gran = tid1<<4;
			gran += (warp_id & 1) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 1024;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 3) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 2048;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 7) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 4096;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 15) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;

			if((tid<<4)+0 <seg_size) keyB[k+(tid<<4)+0] = rg_k0;
			if((tid<<4)+1 <seg_size) keyB[k+(tid<<4)+1] = rg_k1;
			if((tid<<4)+2 <seg_size) keyB[k+(tid<<4)+2] = rg_k2;
			if((tid<<4)+3 <seg_size) keyB[k+(tid<<4)+3] = rg_k3;
			if((tid<<4)+4 <seg_size) keyB[k+(tid<<4)+4] = rg_k4;
			if((tid<<4)+5 <seg_size) keyB[k+(tid<<4)+5] = rg_k5;
			if((tid<<4)+6 <seg_size) keyB[k+(tid<<4)+6] = rg_k6;
			if((tid<<4)+7 <seg_size) keyB[k+(tid<<4)+7] = rg_k7;
			if((tid<<4)+8 <seg_size) keyB[k+(tid<<4)+8] = rg_k8;
			if((tid<<4)+9 <seg_size) keyB[k+(tid<<4)+9] = rg_k9;
			if((tid<<4)+10 <seg_size) keyB[k+(tid<<4)+10] = rg_k10;
			if((tid<<4)+11 <seg_size) keyB[k+(tid<<4)+11] = rg_k11;
			if((tid<<4)+12 <seg_size) keyB[k+(tid<<4)+12] = rg_k12;
			if((tid<<4)+13 <seg_size) keyB[k+(tid<<4)+13] = rg_k13;
			if((tid<<4)+14 <seg_size) keyB[k+(tid<<4)+14] = rg_k14;
			if((tid<<4)+15 <seg_size) keyB[k+(tid<<4)+15] = rg_k15;
			if((tid<<4)+0 <seg_size) valB[k+(tid<<4)+0] = val[k + rg_v0];
			if((tid<<4)+1 <seg_size) valB[k+(tid<<4)+1] = val[k + rg_v1];
			if((tid<<4)+2 <seg_size) valB[k+(tid<<4)+2] = val[k + rg_v2];
			if((tid<<4)+3 <seg_size) valB[k+(tid<<4)+3] = val[k + rg_v3];
			if((tid<<4)+4 <seg_size) valB[k+(tid<<4)+4] = val[k + rg_v4];
			if((tid<<4)+5 <seg_size) valB[k+(tid<<4)+5] = val[k + rg_v5];
			if((tid<<4)+6 <seg_size) valB[k+(tid<<4)+6] = val[k + rg_v6];
			if((tid<<4)+7 <seg_size) valB[k+(tid<<4)+7] = val[k + rg_v7];
			if((tid<<4)+8 <seg_size) valB[k+(tid<<4)+8] = val[k + rg_v8];
			if((tid<<4)+9 <seg_size) valB[k+(tid<<4)+9] = val[k + rg_v9];
			if((tid<<4)+10 <seg_size) valB[k+(tid<<4)+10] = val[k + rg_v10];
			if((tid<<4)+11 <seg_size) valB[k+(tid<<4)+11] = val[k + rg_v11];
			if((tid<<4)+12 <seg_size) valB[k+(tid<<4)+12] = val[k + rg_v12];
			if((tid<<4)+13 <seg_size) valB[k+(tid<<4)+13] = val[k + rg_v13];
			if((tid<<4)+14 <seg_size) valB[k+(tid<<4)+14] = val[k + rg_v14];
			if((tid<<4)+15 <seg_size) valB[k+(tid<<4)+15] = val[k + rg_v15];
		}
	}
}

// 256 threads per block | 32 ppt
template<class K, class T>
__global__
void my_blk256_ppt32_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	extern __shared__ char ext_shared_memory[];
	K* smem = (K*) ext_shared_memory;
	int* tmem = (int*) (&smem[8192]);
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	K rg_k16;
	K rg_k17;
	K rg_k18;
	K rg_k19;
	K rg_k20;
	K rg_k21;
	K rg_k22;
	K rg_k23;
	K rg_k24;
	K rg_k25;
	K rg_k26;
	K rg_k27;
	K rg_k28;
	K rg_k29;
	K rg_k30;
	K rg_k31;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int rg_v16;
	int rg_v17;
	int rg_v18;
	int rg_v19;
	int rg_v20;
	int rg_v21;
	int rg_v22;
	int rg_v23;
	int rg_v24;
	int rg_v25;
	int rg_v26;
	int rg_v27;
	int rg_v28;
	int rg_v29;
	int rg_v30;
	int rg_v31;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 1023) / 1024);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<10)+0	<seg_size)?key[k+tid1+(warp_id<<10)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<10)+32	<seg_size)?key[k+tid1+(warp_id<<10)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<10)+64	<seg_size)?key[k+tid1+(warp_id<<10)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<10)+96	<seg_size)?key[k+tid1+(warp_id<<10)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<10)+128	<seg_size)?key[k+tid1+(warp_id<<10)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<10)+160	<seg_size)?key[k+tid1+(warp_id<<10)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<10)+192	<seg_size)?key[k+tid1+(warp_id<<10)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<10)+224	<seg_size)?key[k+tid1+(warp_id<<10)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<10)+256	<seg_size)?key[k+tid1+(warp_id<<10)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<10)+288	<seg_size)?key[k+tid1+(warp_id<<10)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<10)+320	<seg_size)?key[k+tid1+(warp_id<<10)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<10)+352	<seg_size)?key[k+tid1+(warp_id<<10)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<10)+384	<seg_size)?key[k+tid1+(warp_id<<10)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<10)+416	<seg_size)?key[k+tid1+(warp_id<<10)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<10)+448	<seg_size)?key[k+tid1+(warp_id<<10)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<10)+480	<seg_size)?key[k+tid1+(warp_id<<10)+480	]:std::numeric_limits<K>::max();
			rg_k16  = (tid1+(warp_id<<10)+512	<seg_size)?key[k+tid1+(warp_id<<10)+512	]:std::numeric_limits<K>::max();
			rg_k17  = (tid1+(warp_id<<10)+544	<seg_size)?key[k+tid1+(warp_id<<10)+544	]:std::numeric_limits<K>::max();
			rg_k18  = (tid1+(warp_id<<10)+576	<seg_size)?key[k+tid1+(warp_id<<10)+576	]:std::numeric_limits<K>::max();
			rg_k19  = (tid1+(warp_id<<10)+608	<seg_size)?key[k+tid1+(warp_id<<10)+608	]:std::numeric_limits<K>::max();
			rg_k20  = (tid1+(warp_id<<10)+640	<seg_size)?key[k+tid1+(warp_id<<10)+640	]:std::numeric_limits<K>::max();
			rg_k21  = (tid1+(warp_id<<10)+672	<seg_size)?key[k+tid1+(warp_id<<10)+672	]:std::numeric_limits<K>::max();
			rg_k22  = (tid1+(warp_id<<10)+704	<seg_size)?key[k+tid1+(warp_id<<10)+704	]:std::numeric_limits<K>::max();
			rg_k23  = (tid1+(warp_id<<10)+736	<seg_size)?key[k+tid1+(warp_id<<10)+736	]:std::numeric_limits<K>::max();
			rg_k24  = (tid1+(warp_id<<10)+768	<seg_size)?key[k+tid1+(warp_id<<10)+768	]:std::numeric_limits<K>::max();
			rg_k25  = (tid1+(warp_id<<10)+800	<seg_size)?key[k+tid1+(warp_id<<10)+800	]:std::numeric_limits<K>::max();
			rg_k26  = (tid1+(warp_id<<10)+832	<seg_size)?key[k+tid1+(warp_id<<10)+832	]:std::numeric_limits<K>::max();
			rg_k27  = (tid1+(warp_id<<10)+864	<seg_size)?key[k+tid1+(warp_id<<10)+864	]:std::numeric_limits<K>::max();
			rg_k28  = (tid1+(warp_id<<10)+896	<seg_size)?key[k+tid1+(warp_id<<10)+896	]:std::numeric_limits<K>::max();
			rg_k29  = (tid1+(warp_id<<10)+928	<seg_size)?key[k+tid1+(warp_id<<10)+928	]:std::numeric_limits<K>::max();
			rg_k30  = (tid1+(warp_id<<10)+960	<seg_size)?key[k+tid1+(warp_id<<10)+960	]:std::numeric_limits<K>::max();
			rg_k31  = (tid1+(warp_id<<10)+992	<seg_size)?key[k+tid1+(warp_id<<10)+992	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<10)+0	<seg_size) rg_v0  = tid1+(warp_id<<10)+0	;
			if (tid1+(warp_id<<10)+32	<seg_size) rg_v1  = tid1+(warp_id<<10)+32	;
			if (tid1+(warp_id<<10)+64	<seg_size) rg_v2  = tid1+(warp_id<<10)+64	;
			if (tid1+(warp_id<<10)+96	<seg_size) rg_v3  = tid1+(warp_id<<10)+96	;
			if (tid1+(warp_id<<10)+128	<seg_size) rg_v4  = tid1+(warp_id<<10)+128	;
			if (tid1+(warp_id<<10)+160	<seg_size) rg_v5  = tid1+(warp_id<<10)+160	;
			if (tid1+(warp_id<<10)+192	<seg_size) rg_v6  = tid1+(warp_id<<10)+192	;
			if (tid1+(warp_id<<10)+224	<seg_size) rg_v7  = tid1+(warp_id<<10)+224	;
			if (tid1+(warp_id<<10)+256	<seg_size) rg_v8  = tid1+(warp_id<<10)+256	;
			if (tid1+(warp_id<<10)+288	<seg_size) rg_v9  = tid1+(warp_id<<10)+288	;
			if (tid1+(warp_id<<10)+320	<seg_size) rg_v10  = tid1+(warp_id<<10)+320	;
			if (tid1+(warp_id<<10)+352	<seg_size) rg_v11  = tid1+(warp_id<<10)+352	;
			if (tid1+(warp_id<<10)+384	<seg_size) rg_v12  = tid1+(warp_id<<10)+384	;
			if (tid1+(warp_id<<10)+416	<seg_size) rg_v13  = tid1+(warp_id<<10)+416	;
			if (tid1+(warp_id<<10)+448	<seg_size) rg_v14  = tid1+(warp_id<<10)+448	;
			if (tid1+(warp_id<<10)+480	<seg_size) rg_v15  = tid1+(warp_id<<10)+480	;
			if (tid1+(warp_id<<10)+512	<seg_size) rg_v16  = tid1+(warp_id<<10)+512	;
			if (tid1+(warp_id<<10)+544	<seg_size) rg_v17  = tid1+(warp_id<<10)+544	;
			if (tid1+(warp_id<<10)+576	<seg_size) rg_v18  = tid1+(warp_id<<10)+576	;
			if (tid1+(warp_id<<10)+608	<seg_size) rg_v19  = tid1+(warp_id<<10)+608	;
			if (tid1+(warp_id<<10)+640	<seg_size) rg_v20  = tid1+(warp_id<<10)+640	;
			if (tid1+(warp_id<<10)+672	<seg_size) rg_v21  = tid1+(warp_id<<10)+672	;
			if (tid1+(warp_id<<10)+704	<seg_size) rg_v22  = tid1+(warp_id<<10)+704	;
			if (tid1+(warp_id<<10)+736	<seg_size) rg_v23  = tid1+(warp_id<<10)+736	;
			if (tid1+(warp_id<<10)+768	<seg_size) rg_v24  = tid1+(warp_id<<10)+768	;
			if (tid1+(warp_id<<10)+800	<seg_size) rg_v25  = tid1+(warp_id<<10)+800	;
			if (tid1+(warp_id<<10)+832	<seg_size) rg_v26  = tid1+(warp_id<<10)+832	;
			if (tid1+(warp_id<<10)+864	<seg_size) rg_v27  = tid1+(warp_id<<10)+864	;
			if (tid1+(warp_id<<10)+896	<seg_size) rg_v28  = tid1+(warp_id<<10)+896	;
			if (tid1+(warp_id<<10)+928	<seg_size) rg_v29  = tid1+(warp_id<<10)+928	;
			if (tid1+(warp_id<<10)+960	<seg_size) rg_v30  = tid1+(warp_id<<10)+960	;
			if (tid1+(warp_id<<10)+992	<seg_size) rg_v31  = tid1+(warp_id<<10)+992	;

			// sort 1024 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			CMP_SWP(K, rg_k16, rg_k19, int, rg_v16, rg_v19);
			CMP_SWP(K, rg_k17, rg_k18, int, rg_v17, rg_v18);
			CMP_SWP(K, rg_k20, rg_k23, int, rg_v20, rg_v23);
			CMP_SWP(K, rg_k21, rg_k22, int, rg_v21, rg_v22);
			CMP_SWP(K, rg_k24, rg_k27, int, rg_v24, rg_v27);
			CMP_SWP(K, rg_k25, rg_k26, int, rg_v25, rg_v26);
			CMP_SWP(K, rg_k28, rg_k31, int, rg_v28, rg_v31);
			CMP_SWP(K, rg_k29, rg_k30, int, rg_v29, rg_v30);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			CMP_SWP(K, rg_k16, rg_k23, int, rg_v16, rg_v23);
			CMP_SWP(K, rg_k17, rg_k22, int, rg_v17, rg_v22);
			CMP_SWP(K, rg_k18, rg_k21, int, rg_v18, rg_v21);
			CMP_SWP(K, rg_k19, rg_k20, int, rg_v19, rg_v20);
			CMP_SWP(K, rg_k24, rg_k31, int, rg_v24, rg_v31);
			CMP_SWP(K, rg_k25, rg_k30, int, rg_v25, rg_v30);
			CMP_SWP(K, rg_k26, rg_k29, int, rg_v26, rg_v29);
			CMP_SWP(K, rg_k27, rg_k28, int, rg_v27, rg_v28);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			CMP_SWP(K, rg_k16, rg_k31, int, rg_v16, rg_v31);
			CMP_SWP(K, rg_k17, rg_k30, int, rg_v17, rg_v30);
			CMP_SWP(K, rg_k18, rg_k29, int, rg_v18, rg_v29);
			CMP_SWP(K, rg_k19, rg_k28, int, rg_v19, rg_v28);
			CMP_SWP(K, rg_k20, rg_k27, int, rg_v20, rg_v27);
			CMP_SWP(K, rg_k21, rg_k26, int, rg_v21, rg_v26);
			CMP_SWP(K, rg_k22, rg_k25, int, rg_v22, rg_v25);
			CMP_SWP(K, rg_k23, rg_k24, int, rg_v23, rg_v24);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k31, int, rg_v0, rg_v31);
			CMP_SWP(K, rg_k1, rg_k30, int, rg_v1, rg_v30);
			CMP_SWP(K, rg_k2, rg_k29, int, rg_v2, rg_v29);
			CMP_SWP(K, rg_k3, rg_k28, int, rg_v3, rg_v28);
			CMP_SWP(K, rg_k4, rg_k27, int, rg_v4, rg_v27);
			CMP_SWP(K, rg_k5, rg_k26, int, rg_v5, rg_v26);
			CMP_SWP(K, rg_k6, rg_k25, int, rg_v6, rg_v25);
			CMP_SWP(K, rg_k7, rg_k24, int, rg_v7, rg_v24);
			CMP_SWP(K, rg_k8, rg_k23, int, rg_v8, rg_v23);
			CMP_SWP(K, rg_k9, rg_k22, int, rg_v9, rg_v22);
			CMP_SWP(K, rg_k10, rg_k21, int, rg_v10, rg_v21);
			CMP_SWP(K, rg_k11, rg_k20, int, rg_v11, rg_v20);
			CMP_SWP(K, rg_k12, rg_k19, int, rg_v12, rg_v19);
			CMP_SWP(K, rg_k13, rg_k18, int, rg_v13, rg_v18);
			CMP_SWP(K, rg_k14, rg_k17, int, rg_v14, rg_v17);
			CMP_SWP(K, rg_k15, rg_k16, int, rg_v15, rg_v16);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);

			// Store register results to shared memory
			smem[(warp_id<<10) + (tid1<<5) + 0] = rg_k0;
			smem[(warp_id<<10) + (tid1<<5) + 1] = rg_k1;
			smem[(warp_id<<10) + (tid1<<5) + 2] = rg_k2;
			smem[(warp_id<<10) + (tid1<<5) + 3] = rg_k3;
			smem[(warp_id<<10) + (tid1<<5) + 4] = rg_k4;
			smem[(warp_id<<10) + (tid1<<5) + 5] = rg_k5;
			smem[(warp_id<<10) + (tid1<<5) + 6] = rg_k6;
			smem[(warp_id<<10) + (tid1<<5) + 7] = rg_k7;
			smem[(warp_id<<10) + (tid1<<5) + 8] = rg_k8;
			smem[(warp_id<<10) + (tid1<<5) + 9] = rg_k9;
			smem[(warp_id<<10) + (tid1<<5) + 10] = rg_k10;
			smem[(warp_id<<10) + (tid1<<5) + 11] = rg_k11;
			smem[(warp_id<<10) + (tid1<<5) + 12] = rg_k12;
			smem[(warp_id<<10) + (tid1<<5) + 13] = rg_k13;
			smem[(warp_id<<10) + (tid1<<5) + 14] = rg_k14;
			smem[(warp_id<<10) + (tid1<<5) + 15] = rg_k15;
			smem[(warp_id<<10) + (tid1<<5) + 16] = rg_k16;
			smem[(warp_id<<10) + (tid1<<5) + 17] = rg_k17;
			smem[(warp_id<<10) + (tid1<<5) + 18] = rg_k18;
			smem[(warp_id<<10) + (tid1<<5) + 19] = rg_k19;
			smem[(warp_id<<10) + (tid1<<5) + 20] = rg_k20;
			smem[(warp_id<<10) + (tid1<<5) + 21] = rg_k21;
			smem[(warp_id<<10) + (tid1<<5) + 22] = rg_k22;
			smem[(warp_id<<10) + (tid1<<5) + 23] = rg_k23;
			smem[(warp_id<<10) + (tid1<<5) + 24] = rg_k24;
			smem[(warp_id<<10) + (tid1<<5) + 25] = rg_k25;
			smem[(warp_id<<10) + (tid1<<5) + 26] = rg_k26;
			smem[(warp_id<<10) + (tid1<<5) + 27] = rg_k27;
			smem[(warp_id<<10) + (tid1<<5) + 28] = rg_k28;
			smem[(warp_id<<10) + (tid1<<5) + 29] = rg_k29;
			smem[(warp_id<<10) + (tid1<<5) + 30] = rg_k30;
			smem[(warp_id<<10) + (tid1<<5) + 31] = rg_k31;
			tmem[(warp_id<<10) + (tid1<<5) + 0] = rg_v0;
			tmem[(warp_id<<10) + (tid1<<5) + 1] = rg_v1;
			tmem[(warp_id<<10) + (tid1<<5) + 2] = rg_v2;
			tmem[(warp_id<<10) + (tid1<<5) + 3] = rg_v3;
			tmem[(warp_id<<10) + (tid1<<5) + 4] = rg_v4;
			tmem[(warp_id<<10) + (tid1<<5) + 5] = rg_v5;
			tmem[(warp_id<<10) + (tid1<<5) + 6] = rg_v6;
			tmem[(warp_id<<10) + (tid1<<5) + 7] = rg_v7;
			tmem[(warp_id<<10) + (tid1<<5) + 8] = rg_v8;
			tmem[(warp_id<<10) + (tid1<<5) + 9] = rg_v9;
			tmem[(warp_id<<10) + (tid1<<5) + 10] = rg_v10;
			tmem[(warp_id<<10) + (tid1<<5) + 11] = rg_v11;
			tmem[(warp_id<<10) + (tid1<<5) + 12] = rg_v12;
			tmem[(warp_id<<10) + (tid1<<5) + 13] = rg_v13;
			tmem[(warp_id<<10) + (tid1<<5) + 14] = rg_v14;
			tmem[(warp_id<<10) + (tid1<<5) + 15] = rg_v15;
			tmem[(warp_id<<10) + (tid1<<5) + 16] = rg_v16;
			tmem[(warp_id<<10) + (tid1<<5) + 17] = rg_v17;
			tmem[(warp_id<<10) + (tid1<<5) + 18] = rg_v18;
			tmem[(warp_id<<10) + (tid1<<5) + 19] = rg_v19;
			tmem[(warp_id<<10) + (tid1<<5) + 20] = rg_v20;
			tmem[(warp_id<<10) + (tid1<<5) + 21] = rg_v21;
			tmem[(warp_id<<10) + (tid1<<5) + 22] = rg_v22;
			tmem[(warp_id<<10) + (tid1<<5) + 23] = rg_v23;
			tmem[(warp_id<<10) + (tid1<<5) + 24] = rg_v24;
			tmem[(warp_id<<10) + (tid1<<5) + 25] = rg_v25;
			tmem[(warp_id<<10) + (tid1<<5) + 26] = rg_v26;
			tmem[(warp_id<<10) + (tid1<<5) + 27] = rg_v27;
			tmem[(warp_id<<10) + (tid1<<5) + 28] = rg_v28;
			tmem[(warp_id<<10) + (tid1<<5) + 29] = rg_v29;
			tmem[(warp_id<<10) + (tid1<<5) + 30] = rg_v30;
			tmem[(warp_id<<10) + (tid1<<5) + 31] = rg_v31;
		}
		__syncthreads();

		// Merge in 3 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 1024;
			rhs_len = 1024;
			gran = tid1<<5;
			gran += (warp_id & 1) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 2048;
			rhs_len = 1024 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<5;
			gran += (warp_id & 3) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 4096;
			rhs_len = 1024 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<5;
			gran += (warp_id & 7) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;

			if((tid<<5)+0 <seg_size) keyB[k+(tid<<5)+0] = rg_k0;
			if((tid<<5)+1 <seg_size) keyB[k+(tid<<5)+1] = rg_k1;
			if((tid<<5)+2 <seg_size) keyB[k+(tid<<5)+2] = rg_k2;
			if((tid<<5)+3 <seg_size) keyB[k+(tid<<5)+3] = rg_k3;
			if((tid<<5)+4 <seg_size) keyB[k+(tid<<5)+4] = rg_k4;
			if((tid<<5)+5 <seg_size) keyB[k+(tid<<5)+5] = rg_k5;
			if((tid<<5)+6 <seg_size) keyB[k+(tid<<5)+6] = rg_k6;
			if((tid<<5)+7 <seg_size) keyB[k+(tid<<5)+7] = rg_k7;
			if((tid<<5)+8 <seg_size) keyB[k+(tid<<5)+8] = rg_k8;
			if((tid<<5)+9 <seg_size) keyB[k+(tid<<5)+9] = rg_k9;
			if((tid<<5)+10 <seg_size) keyB[k+(tid<<5)+10] = rg_k10;
			if((tid<<5)+11 <seg_size) keyB[k+(tid<<5)+11] = rg_k11;
			if((tid<<5)+12 <seg_size) keyB[k+(tid<<5)+12] = rg_k12;
			if((tid<<5)+13 <seg_size) keyB[k+(tid<<5)+13] = rg_k13;
			if((tid<<5)+14 <seg_size) keyB[k+(tid<<5)+14] = rg_k14;
			if((tid<<5)+15 <seg_size) keyB[k+(tid<<5)+15] = rg_k15;
			if((tid<<5)+16 <seg_size) keyB[k+(tid<<5)+16] = rg_k16;
			if((tid<<5)+17 <seg_size) keyB[k+(tid<<5)+17] = rg_k17;
			if((tid<<5)+18 <seg_size) keyB[k+(tid<<5)+18] = rg_k18;
			if((tid<<5)+19 <seg_size) keyB[k+(tid<<5)+19] = rg_k19;
			if((tid<<5)+20 <seg_size) keyB[k+(tid<<5)+20] = rg_k20;
			if((tid<<5)+21 <seg_size) keyB[k+(tid<<5)+21] = rg_k21;
			if((tid<<5)+22 <seg_size) keyB[k+(tid<<5)+22] = rg_k22;
			if((tid<<5)+23 <seg_size) keyB[k+(tid<<5)+23] = rg_k23;
			if((tid<<5)+24 <seg_size) keyB[k+(tid<<5)+24] = rg_k24;
			if((tid<<5)+25 <seg_size) keyB[k+(tid<<5)+25] = rg_k25;
			if((tid<<5)+26 <seg_size) keyB[k+(tid<<5)+26] = rg_k26;
			if((tid<<5)+27 <seg_size) keyB[k+(tid<<5)+27] = rg_k27;
			if((tid<<5)+28 <seg_size) keyB[k+(tid<<5)+28] = rg_k28;
			if((tid<<5)+29 <seg_size) keyB[k+(tid<<5)+29] = rg_k29;
			if((tid<<5)+30 <seg_size) keyB[k+(tid<<5)+30] = rg_k30;
			if((tid<<5)+31 <seg_size) keyB[k+(tid<<5)+31] = rg_k31;
			if((tid<<5)+0 <seg_size) valB[k+(tid<<5)+0] = val[k + rg_v0];
			if((tid<<5)+1 <seg_size) valB[k+(tid<<5)+1] = val[k + rg_v1];
			if((tid<<5)+2 <seg_size) valB[k+(tid<<5)+2] = val[k + rg_v2];
			if((tid<<5)+3 <seg_size) valB[k+(tid<<5)+3] = val[k + rg_v3];
			if((tid<<5)+4 <seg_size) valB[k+(tid<<5)+4] = val[k + rg_v4];
			if((tid<<5)+5 <seg_size) valB[k+(tid<<5)+5] = val[k + rg_v5];
			if((tid<<5)+6 <seg_size) valB[k+(tid<<5)+6] = val[k + rg_v6];
			if((tid<<5)+7 <seg_size) valB[k+(tid<<5)+7] = val[k + rg_v7];
			if((tid<<5)+8 <seg_size) valB[k+(tid<<5)+8] = val[k + rg_v8];
			if((tid<<5)+9 <seg_size) valB[k+(tid<<5)+9] = val[k + rg_v9];
			if((tid<<5)+10 <seg_size) valB[k+(tid<<5)+10] = val[k + rg_v10];
			if((tid<<5)+11 <seg_size) valB[k+(tid<<5)+11] = val[k + rg_v11];
			if((tid<<5)+12 <seg_size) valB[k+(tid<<5)+12] = val[k + rg_v12];
			if((tid<<5)+13 <seg_size) valB[k+(tid<<5)+13] = val[k + rg_v13];
			if((tid<<5)+14 <seg_size) valB[k+(tid<<5)+14] = val[k + rg_v14];
			if((tid<<5)+15 <seg_size) valB[k+(tid<<5)+15] = val[k + rg_v15];
			if((tid<<5)+16 <seg_size) valB[k+(tid<<5)+16] = val[k + rg_v16];
			if((tid<<5)+17 <seg_size) valB[k+(tid<<5)+17] = val[k + rg_v17];
			if((tid<<5)+18 <seg_size) valB[k+(tid<<5)+18] = val[k + rg_v18];
			if((tid<<5)+19 <seg_size) valB[k+(tid<<5)+19] = val[k + rg_v19];
			if((tid<<5)+20 <seg_size) valB[k+(tid<<5)+20] = val[k + rg_v20];
			if((tid<<5)+21 <seg_size) valB[k+(tid<<5)+21] = val[k + rg_v21];
			if((tid<<5)+22 <seg_size) valB[k+(tid<<5)+22] = val[k + rg_v22];
			if((tid<<5)+23 <seg_size) valB[k+(tid<<5)+23] = val[k + rg_v23];
			if((tid<<5)+24 <seg_size) valB[k+(tid<<5)+24] = val[k + rg_v24];
			if((tid<<5)+25 <seg_size) valB[k+(tid<<5)+25] = val[k + rg_v25];
			if((tid<<5)+26 <seg_size) valB[k+(tid<<5)+26] = val[k + rg_v26];
			if((tid<<5)+27 <seg_size) valB[k+(tid<<5)+27] = val[k + rg_v27];
			if((tid<<5)+28 <seg_size) valB[k+(tid<<5)+28] = val[k + rg_v28];
			if((tid<<5)+29 <seg_size) valB[k+(tid<<5)+29] = val[k + rg_v29];
			if((tid<<5)+30 <seg_size) valB[k+(tid<<5)+30] = val[k + rg_v30];
			if((tid<<5)+31 <seg_size) valB[k+(tid<<5)+31] = val[k + rg_v31];
		}
	}
}

// segsize 16384

// 1024 threads per block | 16 ppt
template<class K, class T>
__global__
void my_blk1024_ppt16_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	extern __shared__ char ext_shared_memory[];
	K* smem = (K*) ext_shared_memory;
	int* tmem = (int*) (&smem[16384]);
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 511) / 512);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<9)+0	<seg_size)?key[k+tid1+(warp_id<<9)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<9)+32	<seg_size)?key[k+tid1+(warp_id<<9)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<9)+64	<seg_size)?key[k+tid1+(warp_id<<9)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<9)+96	<seg_size)?key[k+tid1+(warp_id<<9)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<9)+128	<seg_size)?key[k+tid1+(warp_id<<9)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<9)+160	<seg_size)?key[k+tid1+(warp_id<<9)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<9)+192	<seg_size)?key[k+tid1+(warp_id<<9)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<9)+224	<seg_size)?key[k+tid1+(warp_id<<9)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<9)+256	<seg_size)?key[k+tid1+(warp_id<<9)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<9)+288	<seg_size)?key[k+tid1+(warp_id<<9)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<9)+320	<seg_size)?key[k+tid1+(warp_id<<9)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<9)+352	<seg_size)?key[k+tid1+(warp_id<<9)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<9)+384	<seg_size)?key[k+tid1+(warp_id<<9)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<9)+416	<seg_size)?key[k+tid1+(warp_id<<9)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<9)+448	<seg_size)?key[k+tid1+(warp_id<<9)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<9)+480	<seg_size)?key[k+tid1+(warp_id<<9)+480	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<9)+0	<seg_size) rg_v0  = tid1+(warp_id<<9)+0	;
			if (tid1+(warp_id<<9)+32	<seg_size) rg_v1  = tid1+(warp_id<<9)+32	;
			if (tid1+(warp_id<<9)+64	<seg_size) rg_v2  = tid1+(warp_id<<9)+64	;
			if (tid1+(warp_id<<9)+96	<seg_size) rg_v3  = tid1+(warp_id<<9)+96	;
			if (tid1+(warp_id<<9)+128	<seg_size) rg_v4  = tid1+(warp_id<<9)+128	;
			if (tid1+(warp_id<<9)+160	<seg_size) rg_v5  = tid1+(warp_id<<9)+160	;
			if (tid1+(warp_id<<9)+192	<seg_size) rg_v6  = tid1+(warp_id<<9)+192	;
			if (tid1+(warp_id<<9)+224	<seg_size) rg_v7  = tid1+(warp_id<<9)+224	;
			if (tid1+(warp_id<<9)+256	<seg_size) rg_v8  = tid1+(warp_id<<9)+256	;
			if (tid1+(warp_id<<9)+288	<seg_size) rg_v9  = tid1+(warp_id<<9)+288	;
			if (tid1+(warp_id<<9)+320	<seg_size) rg_v10  = tid1+(warp_id<<9)+320	;
			if (tid1+(warp_id<<9)+352	<seg_size) rg_v11  = tid1+(warp_id<<9)+352	;
			if (tid1+(warp_id<<9)+384	<seg_size) rg_v12  = tid1+(warp_id<<9)+384	;
			if (tid1+(warp_id<<9)+416	<seg_size) rg_v13  = tid1+(warp_id<<9)+416	;
			if (tid1+(warp_id<<9)+448	<seg_size) rg_v14  = tid1+(warp_id<<9)+448	;
			if (tid1+(warp_id<<9)+480	<seg_size) rg_v15  = tid1+(warp_id<<9)+480	;

			// sort 512 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);

			// Store register results to shared memory
			smem[(warp_id<<9) + (tid1<<4) + 0] = rg_k0;
			smem[(warp_id<<9) + (tid1<<4) + 1] = rg_k1;
			smem[(warp_id<<9) + (tid1<<4) + 2] = rg_k2;
			smem[(warp_id<<9) + (tid1<<4) + 3] = rg_k3;
			smem[(warp_id<<9) + (tid1<<4) + 4] = rg_k4;
			smem[(warp_id<<9) + (tid1<<4) + 5] = rg_k5;
			smem[(warp_id<<9) + (tid1<<4) + 6] = rg_k6;
			smem[(warp_id<<9) + (tid1<<4) + 7] = rg_k7;
			smem[(warp_id<<9) + (tid1<<4) + 8] = rg_k8;
			smem[(warp_id<<9) + (tid1<<4) + 9] = rg_k9;
			smem[(warp_id<<9) + (tid1<<4) + 10] = rg_k10;
			smem[(warp_id<<9) + (tid1<<4) + 11] = rg_k11;
			smem[(warp_id<<9) + (tid1<<4) + 12] = rg_k12;
			smem[(warp_id<<9) + (tid1<<4) + 13] = rg_k13;
			smem[(warp_id<<9) + (tid1<<4) + 14] = rg_k14;
			smem[(warp_id<<9) + (tid1<<4) + 15] = rg_k15;
			tmem[(warp_id<<9) + (tid1<<4) + 0] = rg_v0;
			tmem[(warp_id<<9) + (tid1<<4) + 1] = rg_v1;
			tmem[(warp_id<<9) + (tid1<<4) + 2] = rg_v2;
			tmem[(warp_id<<9) + (tid1<<4) + 3] = rg_v3;
			tmem[(warp_id<<9) + (tid1<<4) + 4] = rg_v4;
			tmem[(warp_id<<9) + (tid1<<4) + 5] = rg_v5;
			tmem[(warp_id<<9) + (tid1<<4) + 6] = rg_v6;
			tmem[(warp_id<<9) + (tid1<<4) + 7] = rg_v7;
			tmem[(warp_id<<9) + (tid1<<4) + 8] = rg_v8;
			tmem[(warp_id<<9) + (tid1<<4) + 9] = rg_v9;
			tmem[(warp_id<<9) + (tid1<<4) + 10] = rg_v10;
			tmem[(warp_id<<9) + (tid1<<4) + 11] = rg_v11;
			tmem[(warp_id<<9) + (tid1<<4) + 12] = rg_v12;
			tmem[(warp_id<<9) + (tid1<<4) + 13] = rg_v13;
			tmem[(warp_id<<9) + (tid1<<4) + 14] = rg_v14;
			tmem[(warp_id<<9) + (tid1<<4) + 15] = rg_v15;
		}
		__syncthreads();

		// Merge in 5 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 512;
			rhs_len = 512;
			gran = tid1<<4;
			gran += (warp_id & 1) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 1024;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 3) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 2048;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 7) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 4096;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 15) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 4
		grp_start_wp_id = ((warp_id>>5)<<5);
		if(grp_start_wp_id + (1 << 4) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 8192;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 17 < full_wp) +
				(grp_start_wp_id + 18 < full_wp) +
				(grp_start_wp_id + 19 < full_wp) +
				(grp_start_wp_id + 20 < full_wp) +
				(grp_start_wp_id + 21 < full_wp) +
				(grp_start_wp_id + 22 < full_wp) +
				(grp_start_wp_id + 23 < full_wp) +
				(grp_start_wp_id + 24 < full_wp) +
				(grp_start_wp_id + 25 < full_wp) +
				(grp_start_wp_id + 26 < full_wp) +
				(grp_start_wp_id + 27 < full_wp) +
				(grp_start_wp_id + 28 < full_wp) +
				(grp_start_wp_id + 29 < full_wp) +
				(grp_start_wp_id + 30 < full_wp) +
				(grp_start_wp_id + 31 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 31) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;

			if((tid<<4)+0 <seg_size) keyB[k+(tid<<4)+0] = rg_k0;
			if((tid<<4)+1 <seg_size) keyB[k+(tid<<4)+1] = rg_k1;
			if((tid<<4)+2 <seg_size) keyB[k+(tid<<4)+2] = rg_k2;
			if((tid<<4)+3 <seg_size) keyB[k+(tid<<4)+3] = rg_k3;
			if((tid<<4)+4 <seg_size) keyB[k+(tid<<4)+4] = rg_k4;
			if((tid<<4)+5 <seg_size) keyB[k+(tid<<4)+5] = rg_k5;
			if((tid<<4)+6 <seg_size) keyB[k+(tid<<4)+6] = rg_k6;
			if((tid<<4)+7 <seg_size) keyB[k+(tid<<4)+7] = rg_k7;
			if((tid<<4)+8 <seg_size) keyB[k+(tid<<4)+8] = rg_k8;
			if((tid<<4)+9 <seg_size) keyB[k+(tid<<4)+9] = rg_k9;
			if((tid<<4)+10 <seg_size) keyB[k+(tid<<4)+10] = rg_k10;
			if((tid<<4)+11 <seg_size) keyB[k+(tid<<4)+11] = rg_k11;
			if((tid<<4)+12 <seg_size) keyB[k+(tid<<4)+12] = rg_k12;
			if((tid<<4)+13 <seg_size) keyB[k+(tid<<4)+13] = rg_k13;
			if((tid<<4)+14 <seg_size) keyB[k+(tid<<4)+14] = rg_k14;
			if((tid<<4)+15 <seg_size) keyB[k+(tid<<4)+15] = rg_k15;
			if((tid<<4)+0 <seg_size) valB[k+(tid<<4)+0] = val[k + rg_v0];
			if((tid<<4)+1 <seg_size) valB[k+(tid<<4)+1] = val[k + rg_v1];
			if((tid<<4)+2 <seg_size) valB[k+(tid<<4)+2] = val[k + rg_v2];
			if((tid<<4)+3 <seg_size) valB[k+(tid<<4)+3] = val[k + rg_v3];
			if((tid<<4)+4 <seg_size) valB[k+(tid<<4)+4] = val[k + rg_v4];
			if((tid<<4)+5 <seg_size) valB[k+(tid<<4)+5] = val[k + rg_v5];
			if((tid<<4)+6 <seg_size) valB[k+(tid<<4)+6] = val[k + rg_v6];
			if((tid<<4)+7 <seg_size) valB[k+(tid<<4)+7] = val[k + rg_v7];
			if((tid<<4)+8 <seg_size) valB[k+(tid<<4)+8] = val[k + rg_v8];
			if((tid<<4)+9 <seg_size) valB[k+(tid<<4)+9] = val[k + rg_v9];
			if((tid<<4)+10 <seg_size) valB[k+(tid<<4)+10] = val[k + rg_v10];
			if((tid<<4)+11 <seg_size) valB[k+(tid<<4)+11] = val[k + rg_v11];
			if((tid<<4)+12 <seg_size) valB[k+(tid<<4)+12] = val[k + rg_v12];
			if((tid<<4)+13 <seg_size) valB[k+(tid<<4)+13] = val[k + rg_v13];
			if((tid<<4)+14 <seg_size) valB[k+(tid<<4)+14] = val[k + rg_v14];
			if((tid<<4)+15 <seg_size) valB[k+(tid<<4)+15] = val[k + rg_v15];
		}
	}
}

// 512 threads per block | 32 ppt
template<class K, class T>
__global__
void my_blk512_ppt32_shared_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	extern __shared__ char ext_shared_memory[];
	K* smem = (K*) ext_shared_memory;
	int* tmem = (int*) (&smem[16384]);
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	K rg_k16;
	K rg_k17;
	K rg_k18;
	K rg_k19;
	K rg_k20;
	K rg_k21;
	K rg_k22;
	K rg_k23;
	K rg_k24;
	K rg_k25;
	K rg_k26;
	K rg_k27;
	K rg_k28;
	K rg_k29;
	K rg_k30;
	K rg_k31;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int rg_v16;
	int rg_v17;
	int rg_v18;
	int rg_v19;
	int rg_v20;
	int rg_v21;
	int rg_v22;
	int rg_v23;
	int rg_v24;
	int rg_v25;
	int rg_v26;
	int rg_v27;
	int rg_v28;
	int rg_v29;
	int rg_v30;
	int rg_v31;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 1023) / 1024);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<10)+0	<seg_size)?key[k+tid1+(warp_id<<10)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<10)+32	<seg_size)?key[k+tid1+(warp_id<<10)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<10)+64	<seg_size)?key[k+tid1+(warp_id<<10)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<10)+96	<seg_size)?key[k+tid1+(warp_id<<10)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<10)+128	<seg_size)?key[k+tid1+(warp_id<<10)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<10)+160	<seg_size)?key[k+tid1+(warp_id<<10)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<10)+192	<seg_size)?key[k+tid1+(warp_id<<10)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<10)+224	<seg_size)?key[k+tid1+(warp_id<<10)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<10)+256	<seg_size)?key[k+tid1+(warp_id<<10)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<10)+288	<seg_size)?key[k+tid1+(warp_id<<10)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<10)+320	<seg_size)?key[k+tid1+(warp_id<<10)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<10)+352	<seg_size)?key[k+tid1+(warp_id<<10)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<10)+384	<seg_size)?key[k+tid1+(warp_id<<10)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<10)+416	<seg_size)?key[k+tid1+(warp_id<<10)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<10)+448	<seg_size)?key[k+tid1+(warp_id<<10)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<10)+480	<seg_size)?key[k+tid1+(warp_id<<10)+480	]:std::numeric_limits<K>::max();
			rg_k16  = (tid1+(warp_id<<10)+512	<seg_size)?key[k+tid1+(warp_id<<10)+512	]:std::numeric_limits<K>::max();
			rg_k17  = (tid1+(warp_id<<10)+544	<seg_size)?key[k+tid1+(warp_id<<10)+544	]:std::numeric_limits<K>::max();
			rg_k18  = (tid1+(warp_id<<10)+576	<seg_size)?key[k+tid1+(warp_id<<10)+576	]:std::numeric_limits<K>::max();
			rg_k19  = (tid1+(warp_id<<10)+608	<seg_size)?key[k+tid1+(warp_id<<10)+608	]:std::numeric_limits<K>::max();
			rg_k20  = (tid1+(warp_id<<10)+640	<seg_size)?key[k+tid1+(warp_id<<10)+640	]:std::numeric_limits<K>::max();
			rg_k21  = (tid1+(warp_id<<10)+672	<seg_size)?key[k+tid1+(warp_id<<10)+672	]:std::numeric_limits<K>::max();
			rg_k22  = (tid1+(warp_id<<10)+704	<seg_size)?key[k+tid1+(warp_id<<10)+704	]:std::numeric_limits<K>::max();
			rg_k23  = (tid1+(warp_id<<10)+736	<seg_size)?key[k+tid1+(warp_id<<10)+736	]:std::numeric_limits<K>::max();
			rg_k24  = (tid1+(warp_id<<10)+768	<seg_size)?key[k+tid1+(warp_id<<10)+768	]:std::numeric_limits<K>::max();
			rg_k25  = (tid1+(warp_id<<10)+800	<seg_size)?key[k+tid1+(warp_id<<10)+800	]:std::numeric_limits<K>::max();
			rg_k26  = (tid1+(warp_id<<10)+832	<seg_size)?key[k+tid1+(warp_id<<10)+832	]:std::numeric_limits<K>::max();
			rg_k27  = (tid1+(warp_id<<10)+864	<seg_size)?key[k+tid1+(warp_id<<10)+864	]:std::numeric_limits<K>::max();
			rg_k28  = (tid1+(warp_id<<10)+896	<seg_size)?key[k+tid1+(warp_id<<10)+896	]:std::numeric_limits<K>::max();
			rg_k29  = (tid1+(warp_id<<10)+928	<seg_size)?key[k+tid1+(warp_id<<10)+928	]:std::numeric_limits<K>::max();
			rg_k30  = (tid1+(warp_id<<10)+960	<seg_size)?key[k+tid1+(warp_id<<10)+960	]:std::numeric_limits<K>::max();
			rg_k31  = (tid1+(warp_id<<10)+992	<seg_size)?key[k+tid1+(warp_id<<10)+992	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<10)+0	<seg_size) rg_v0  = tid1+(warp_id<<10)+0	;
			if (tid1+(warp_id<<10)+32	<seg_size) rg_v1  = tid1+(warp_id<<10)+32	;
			if (tid1+(warp_id<<10)+64	<seg_size) rg_v2  = tid1+(warp_id<<10)+64	;
			if (tid1+(warp_id<<10)+96	<seg_size) rg_v3  = tid1+(warp_id<<10)+96	;
			if (tid1+(warp_id<<10)+128	<seg_size) rg_v4  = tid1+(warp_id<<10)+128	;
			if (tid1+(warp_id<<10)+160	<seg_size) rg_v5  = tid1+(warp_id<<10)+160	;
			if (tid1+(warp_id<<10)+192	<seg_size) rg_v6  = tid1+(warp_id<<10)+192	;
			if (tid1+(warp_id<<10)+224	<seg_size) rg_v7  = tid1+(warp_id<<10)+224	;
			if (tid1+(warp_id<<10)+256	<seg_size) rg_v8  = tid1+(warp_id<<10)+256	;
			if (tid1+(warp_id<<10)+288	<seg_size) rg_v9  = tid1+(warp_id<<10)+288	;
			if (tid1+(warp_id<<10)+320	<seg_size) rg_v10  = tid1+(warp_id<<10)+320	;
			if (tid1+(warp_id<<10)+352	<seg_size) rg_v11  = tid1+(warp_id<<10)+352	;
			if (tid1+(warp_id<<10)+384	<seg_size) rg_v12  = tid1+(warp_id<<10)+384	;
			if (tid1+(warp_id<<10)+416	<seg_size) rg_v13  = tid1+(warp_id<<10)+416	;
			if (tid1+(warp_id<<10)+448	<seg_size) rg_v14  = tid1+(warp_id<<10)+448	;
			if (tid1+(warp_id<<10)+480	<seg_size) rg_v15  = tid1+(warp_id<<10)+480	;
			if (tid1+(warp_id<<10)+512	<seg_size) rg_v16  = tid1+(warp_id<<10)+512	;
			if (tid1+(warp_id<<10)+544	<seg_size) rg_v17  = tid1+(warp_id<<10)+544	;
			if (tid1+(warp_id<<10)+576	<seg_size) rg_v18  = tid1+(warp_id<<10)+576	;
			if (tid1+(warp_id<<10)+608	<seg_size) rg_v19  = tid1+(warp_id<<10)+608	;
			if (tid1+(warp_id<<10)+640	<seg_size) rg_v20  = tid1+(warp_id<<10)+640	;
			if (tid1+(warp_id<<10)+672	<seg_size) rg_v21  = tid1+(warp_id<<10)+672	;
			if (tid1+(warp_id<<10)+704	<seg_size) rg_v22  = tid1+(warp_id<<10)+704	;
			if (tid1+(warp_id<<10)+736	<seg_size) rg_v23  = tid1+(warp_id<<10)+736	;
			if (tid1+(warp_id<<10)+768	<seg_size) rg_v24  = tid1+(warp_id<<10)+768	;
			if (tid1+(warp_id<<10)+800	<seg_size) rg_v25  = tid1+(warp_id<<10)+800	;
			if (tid1+(warp_id<<10)+832	<seg_size) rg_v26  = tid1+(warp_id<<10)+832	;
			if (tid1+(warp_id<<10)+864	<seg_size) rg_v27  = tid1+(warp_id<<10)+864	;
			if (tid1+(warp_id<<10)+896	<seg_size) rg_v28  = tid1+(warp_id<<10)+896	;
			if (tid1+(warp_id<<10)+928	<seg_size) rg_v29  = tid1+(warp_id<<10)+928	;
			if (tid1+(warp_id<<10)+960	<seg_size) rg_v30  = tid1+(warp_id<<10)+960	;
			if (tid1+(warp_id<<10)+992	<seg_size) rg_v31  = tid1+(warp_id<<10)+992	;

			// sort 1024 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			CMP_SWP(K, rg_k16, rg_k19, int, rg_v16, rg_v19);
			CMP_SWP(K, rg_k17, rg_k18, int, rg_v17, rg_v18);
			CMP_SWP(K, rg_k20, rg_k23, int, rg_v20, rg_v23);
			CMP_SWP(K, rg_k21, rg_k22, int, rg_v21, rg_v22);
			CMP_SWP(K, rg_k24, rg_k27, int, rg_v24, rg_v27);
			CMP_SWP(K, rg_k25, rg_k26, int, rg_v25, rg_v26);
			CMP_SWP(K, rg_k28, rg_k31, int, rg_v28, rg_v31);
			CMP_SWP(K, rg_k29, rg_k30, int, rg_v29, rg_v30);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			CMP_SWP(K, rg_k16, rg_k23, int, rg_v16, rg_v23);
			CMP_SWP(K, rg_k17, rg_k22, int, rg_v17, rg_v22);
			CMP_SWP(K, rg_k18, rg_k21, int, rg_v18, rg_v21);
			CMP_SWP(K, rg_k19, rg_k20, int, rg_v19, rg_v20);
			CMP_SWP(K, rg_k24, rg_k31, int, rg_v24, rg_v31);
			CMP_SWP(K, rg_k25, rg_k30, int, rg_v25, rg_v30);
			CMP_SWP(K, rg_k26, rg_k29, int, rg_v26, rg_v29);
			CMP_SWP(K, rg_k27, rg_k28, int, rg_v27, rg_v28);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			CMP_SWP(K, rg_k16, rg_k31, int, rg_v16, rg_v31);
			CMP_SWP(K, rg_k17, rg_k30, int, rg_v17, rg_v30);
			CMP_SWP(K, rg_k18, rg_k29, int, rg_v18, rg_v29);
			CMP_SWP(K, rg_k19, rg_k28, int, rg_v19, rg_v28);
			CMP_SWP(K, rg_k20, rg_k27, int, rg_v20, rg_v27);
			CMP_SWP(K, rg_k21, rg_k26, int, rg_v21, rg_v26);
			CMP_SWP(K, rg_k22, rg_k25, int, rg_v22, rg_v25);
			CMP_SWP(K, rg_k23, rg_k24, int, rg_v23, rg_v24);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k31, int, rg_v0, rg_v31);
			CMP_SWP(K, rg_k1, rg_k30, int, rg_v1, rg_v30);
			CMP_SWP(K, rg_k2, rg_k29, int, rg_v2, rg_v29);
			CMP_SWP(K, rg_k3, rg_k28, int, rg_v3, rg_v28);
			CMP_SWP(K, rg_k4, rg_k27, int, rg_v4, rg_v27);
			CMP_SWP(K, rg_k5, rg_k26, int, rg_v5, rg_v26);
			CMP_SWP(K, rg_k6, rg_k25, int, rg_v6, rg_v25);
			CMP_SWP(K, rg_k7, rg_k24, int, rg_v7, rg_v24);
			CMP_SWP(K, rg_k8, rg_k23, int, rg_v8, rg_v23);
			CMP_SWP(K, rg_k9, rg_k22, int, rg_v9, rg_v22);
			CMP_SWP(K, rg_k10, rg_k21, int, rg_v10, rg_v21);
			CMP_SWP(K, rg_k11, rg_k20, int, rg_v11, rg_v20);
			CMP_SWP(K, rg_k12, rg_k19, int, rg_v12, rg_v19);
			CMP_SWP(K, rg_k13, rg_k18, int, rg_v13, rg_v18);
			CMP_SWP(K, rg_k14, rg_k17, int, rg_v14, rg_v17);
			CMP_SWP(K, rg_k15, rg_k16, int, rg_v15, rg_v16);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);

			// Store register results to shared memory
			smem[(warp_id<<10) + (tid1<<5) + 0] = rg_k0;
			smem[(warp_id<<10) + (tid1<<5) + 1] = rg_k1;
			smem[(warp_id<<10) + (tid1<<5) + 2] = rg_k2;
			smem[(warp_id<<10) + (tid1<<5) + 3] = rg_k3;
			smem[(warp_id<<10) + (tid1<<5) + 4] = rg_k4;
			smem[(warp_id<<10) + (tid1<<5) + 5] = rg_k5;
			smem[(warp_id<<10) + (tid1<<5) + 6] = rg_k6;
			smem[(warp_id<<10) + (tid1<<5) + 7] = rg_k7;
			smem[(warp_id<<10) + (tid1<<5) + 8] = rg_k8;
			smem[(warp_id<<10) + (tid1<<5) + 9] = rg_k9;
			smem[(warp_id<<10) + (tid1<<5) + 10] = rg_k10;
			smem[(warp_id<<10) + (tid1<<5) + 11] = rg_k11;
			smem[(warp_id<<10) + (tid1<<5) + 12] = rg_k12;
			smem[(warp_id<<10) + (tid1<<5) + 13] = rg_k13;
			smem[(warp_id<<10) + (tid1<<5) + 14] = rg_k14;
			smem[(warp_id<<10) + (tid1<<5) + 15] = rg_k15;
			smem[(warp_id<<10) + (tid1<<5) + 16] = rg_k16;
			smem[(warp_id<<10) + (tid1<<5) + 17] = rg_k17;
			smem[(warp_id<<10) + (tid1<<5) + 18] = rg_k18;
			smem[(warp_id<<10) + (tid1<<5) + 19] = rg_k19;
			smem[(warp_id<<10) + (tid1<<5) + 20] = rg_k20;
			smem[(warp_id<<10) + (tid1<<5) + 21] = rg_k21;
			smem[(warp_id<<10) + (tid1<<5) + 22] = rg_k22;
			smem[(warp_id<<10) + (tid1<<5) + 23] = rg_k23;
			smem[(warp_id<<10) + (tid1<<5) + 24] = rg_k24;
			smem[(warp_id<<10) + (tid1<<5) + 25] = rg_k25;
			smem[(warp_id<<10) + (tid1<<5) + 26] = rg_k26;
			smem[(warp_id<<10) + (tid1<<5) + 27] = rg_k27;
			smem[(warp_id<<10) + (tid1<<5) + 28] = rg_k28;
			smem[(warp_id<<10) + (tid1<<5) + 29] = rg_k29;
			smem[(warp_id<<10) + (tid1<<5) + 30] = rg_k30;
			smem[(warp_id<<10) + (tid1<<5) + 31] = rg_k31;
			tmem[(warp_id<<10) + (tid1<<5) + 0] = rg_v0;
			tmem[(warp_id<<10) + (tid1<<5) + 1] = rg_v1;
			tmem[(warp_id<<10) + (tid1<<5) + 2] = rg_v2;
			tmem[(warp_id<<10) + (tid1<<5) + 3] = rg_v3;
			tmem[(warp_id<<10) + (tid1<<5) + 4] = rg_v4;
			tmem[(warp_id<<10) + (tid1<<5) + 5] = rg_v5;
			tmem[(warp_id<<10) + (tid1<<5) + 6] = rg_v6;
			tmem[(warp_id<<10) + (tid1<<5) + 7] = rg_v7;
			tmem[(warp_id<<10) + (tid1<<5) + 8] = rg_v8;
			tmem[(warp_id<<10) + (tid1<<5) + 9] = rg_v9;
			tmem[(warp_id<<10) + (tid1<<5) + 10] = rg_v10;
			tmem[(warp_id<<10) + (tid1<<5) + 11] = rg_v11;
			tmem[(warp_id<<10) + (tid1<<5) + 12] = rg_v12;
			tmem[(warp_id<<10) + (tid1<<5) + 13] = rg_v13;
			tmem[(warp_id<<10) + (tid1<<5) + 14] = rg_v14;
			tmem[(warp_id<<10) + (tid1<<5) + 15] = rg_v15;
			tmem[(warp_id<<10) + (tid1<<5) + 16] = rg_v16;
			tmem[(warp_id<<10) + (tid1<<5) + 17] = rg_v17;
			tmem[(warp_id<<10) + (tid1<<5) + 18] = rg_v18;
			tmem[(warp_id<<10) + (tid1<<5) + 19] = rg_v19;
			tmem[(warp_id<<10) + (tid1<<5) + 20] = rg_v20;
			tmem[(warp_id<<10) + (tid1<<5) + 21] = rg_v21;
			tmem[(warp_id<<10) + (tid1<<5) + 22] = rg_v22;
			tmem[(warp_id<<10) + (tid1<<5) + 23] = rg_v23;
			tmem[(warp_id<<10) + (tid1<<5) + 24] = rg_v24;
			tmem[(warp_id<<10) + (tid1<<5) + 25] = rg_v25;
			tmem[(warp_id<<10) + (tid1<<5) + 26] = rg_v26;
			tmem[(warp_id<<10) + (tid1<<5) + 27] = rg_v27;
			tmem[(warp_id<<10) + (tid1<<5) + 28] = rg_v28;
			tmem[(warp_id<<10) + (tid1<<5) + 29] = rg_v29;
			tmem[(warp_id<<10) + (tid1<<5) + 30] = rg_v30;
			tmem[(warp_id<<10) + (tid1<<5) + 31] = rg_v31;
		}
		__syncthreads();

		// Merge in 4 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 1024;
			rhs_len = 1024;
			gran = tid1<<5;
			gran += (warp_id & 1) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 2048;
			rhs_len = 1024 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<5;
			gran += (warp_id & 3) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 4096;
			rhs_len = 1024 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<5;
			gran += (warp_id & 7) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 8192;
			rhs_len = 1024 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<5;
			gran += (warp_id & 15) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;

			if((tid<<5)+0 <seg_size) keyB[k+(tid<<5)+0] = rg_k0;
			if((tid<<5)+1 <seg_size) keyB[k+(tid<<5)+1] = rg_k1;
			if((tid<<5)+2 <seg_size) keyB[k+(tid<<5)+2] = rg_k2;
			if((tid<<5)+3 <seg_size) keyB[k+(tid<<5)+3] = rg_k3;
			if((tid<<5)+4 <seg_size) keyB[k+(tid<<5)+4] = rg_k4;
			if((tid<<5)+5 <seg_size) keyB[k+(tid<<5)+5] = rg_k5;
			if((tid<<5)+6 <seg_size) keyB[k+(tid<<5)+6] = rg_k6;
			if((tid<<5)+7 <seg_size) keyB[k+(tid<<5)+7] = rg_k7;
			if((tid<<5)+8 <seg_size) keyB[k+(tid<<5)+8] = rg_k8;
			if((tid<<5)+9 <seg_size) keyB[k+(tid<<5)+9] = rg_k9;
			if((tid<<5)+10 <seg_size) keyB[k+(tid<<5)+10] = rg_k10;
			if((tid<<5)+11 <seg_size) keyB[k+(tid<<5)+11] = rg_k11;
			if((tid<<5)+12 <seg_size) keyB[k+(tid<<5)+12] = rg_k12;
			if((tid<<5)+13 <seg_size) keyB[k+(tid<<5)+13] = rg_k13;
			if((tid<<5)+14 <seg_size) keyB[k+(tid<<5)+14] = rg_k14;
			if((tid<<5)+15 <seg_size) keyB[k+(tid<<5)+15] = rg_k15;
			if((tid<<5)+16 <seg_size) keyB[k+(tid<<5)+16] = rg_k16;
			if((tid<<5)+17 <seg_size) keyB[k+(tid<<5)+17] = rg_k17;
			if((tid<<5)+18 <seg_size) keyB[k+(tid<<5)+18] = rg_k18;
			if((tid<<5)+19 <seg_size) keyB[k+(tid<<5)+19] = rg_k19;
			if((tid<<5)+20 <seg_size) keyB[k+(tid<<5)+20] = rg_k20;
			if((tid<<5)+21 <seg_size) keyB[k+(tid<<5)+21] = rg_k21;
			if((tid<<5)+22 <seg_size) keyB[k+(tid<<5)+22] = rg_k22;
			if((tid<<5)+23 <seg_size) keyB[k+(tid<<5)+23] = rg_k23;
			if((tid<<5)+24 <seg_size) keyB[k+(tid<<5)+24] = rg_k24;
			if((tid<<5)+25 <seg_size) keyB[k+(tid<<5)+25] = rg_k25;
			if((tid<<5)+26 <seg_size) keyB[k+(tid<<5)+26] = rg_k26;
			if((tid<<5)+27 <seg_size) keyB[k+(tid<<5)+27] = rg_k27;
			if((tid<<5)+28 <seg_size) keyB[k+(tid<<5)+28] = rg_k28;
			if((tid<<5)+29 <seg_size) keyB[k+(tid<<5)+29] = rg_k29;
			if((tid<<5)+30 <seg_size) keyB[k+(tid<<5)+30] = rg_k30;
			if((tid<<5)+31 <seg_size) keyB[k+(tid<<5)+31] = rg_k31;
			if((tid<<5)+0 <seg_size) valB[k+(tid<<5)+0] = val[k + rg_v0];
			if((tid<<5)+1 <seg_size) valB[k+(tid<<5)+1] = val[k + rg_v1];
			if((tid<<5)+2 <seg_size) valB[k+(tid<<5)+2] = val[k + rg_v2];
			if((tid<<5)+3 <seg_size) valB[k+(tid<<5)+3] = val[k + rg_v3];
			if((tid<<5)+4 <seg_size) valB[k+(tid<<5)+4] = val[k + rg_v4];
			if((tid<<5)+5 <seg_size) valB[k+(tid<<5)+5] = val[k + rg_v5];
			if((tid<<5)+6 <seg_size) valB[k+(tid<<5)+6] = val[k + rg_v6];
			if((tid<<5)+7 <seg_size) valB[k+(tid<<5)+7] = val[k + rg_v7];
			if((tid<<5)+8 <seg_size) valB[k+(tid<<5)+8] = val[k + rg_v8];
			if((tid<<5)+9 <seg_size) valB[k+(tid<<5)+9] = val[k + rg_v9];
			if((tid<<5)+10 <seg_size) valB[k+(tid<<5)+10] = val[k + rg_v10];
			if((tid<<5)+11 <seg_size) valB[k+(tid<<5)+11] = val[k + rg_v11];
			if((tid<<5)+12 <seg_size) valB[k+(tid<<5)+12] = val[k + rg_v12];
			if((tid<<5)+13 <seg_size) valB[k+(tid<<5)+13] = val[k + rg_v13];
			if((tid<<5)+14 <seg_size) valB[k+(tid<<5)+14] = val[k + rg_v14];
			if((tid<<5)+15 <seg_size) valB[k+(tid<<5)+15] = val[k + rg_v15];
			if((tid<<5)+16 <seg_size) valB[k+(tid<<5)+16] = val[k + rg_v16];
			if((tid<<5)+17 <seg_size) valB[k+(tid<<5)+17] = val[k + rg_v17];
			if((tid<<5)+18 <seg_size) valB[k+(tid<<5)+18] = val[k + rg_v18];
			if((tid<<5)+19 <seg_size) valB[k+(tid<<5)+19] = val[k + rg_v19];
			if((tid<<5)+20 <seg_size) valB[k+(tid<<5)+20] = val[k + rg_v20];
			if((tid<<5)+21 <seg_size) valB[k+(tid<<5)+21] = val[k + rg_v21];
			if((tid<<5)+22 <seg_size) valB[k+(tid<<5)+22] = val[k + rg_v22];
			if((tid<<5)+23 <seg_size) valB[k+(tid<<5)+23] = val[k + rg_v23];
			if((tid<<5)+24 <seg_size) valB[k+(tid<<5)+24] = val[k + rg_v24];
			if((tid<<5)+25 <seg_size) valB[k+(tid<<5)+25] = val[k + rg_v25];
			if((tid<<5)+26 <seg_size) valB[k+(tid<<5)+26] = val[k + rg_v26];
			if((tid<<5)+27 <seg_size) valB[k+(tid<<5)+27] = val[k + rg_v27];
			if((tid<<5)+28 <seg_size) valB[k+(tid<<5)+28] = val[k + rg_v28];
			if((tid<<5)+29 <seg_size) valB[k+(tid<<5)+29] = val[k + rg_v29];
			if((tid<<5)+30 <seg_size) valB[k+(tid<<5)+30] = val[k + rg_v30];
			if((tid<<5)+31 <seg_size) valB[k+(tid<<5)+31] = val[k + rg_v31];
		}
	}
}

// segsize 512

// 256 threads per block | 2 ppt | strided
template<class K, class T>
__global__
void my_blk256_ppt2_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[512];
	__shared__ int tmem[512];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	int rg_v0;
	int rg_v1;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 63) / 64);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<6)+0	<seg_size)?key[k+tid1+(warp_id<<6)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<6)+32	<seg_size)?key[k+tid1+(warp_id<<6)+32	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<6)+0	<seg_size) rg_v0  = tid1+(warp_id<<6)+0	;
			if (tid1+(warp_id<<6)+32	<seg_size) rg_v1  = tid1+(warp_id<<6)+32	;

			// sort 64 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);

			// Store register results to shared memory
			smem[(warp_id<<6) + (tid1<<1) + 0] = rg_k0;
			smem[(warp_id<<6) + (tid1<<1) + 1] = rg_k1;
			tmem[(warp_id<<6) + (tid1<<1) + 0] = rg_v0;
			tmem[(warp_id<<6) + (tid1<<1) + 1] = rg_v1;
		}
		__syncthreads();

		// Merge in 3 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 64;
			rhs_len = 64;
			gran = tid1<<1;
			gran += (warp_id & 1) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 128;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 3) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 256;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 7) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		if ((warp_id << 6) + 0 + tid1 < seg_size) keyB[k + (warp_id << 6) + 0 + tid1] = smem[(warp_id << 6) + 0 + tid1];
		if ((warp_id << 6) + 32 + tid1 < seg_size) keyB[k + (warp_id << 6) + 32 + tid1] = smem[(warp_id << 6) + 32 + tid1];

		if ((warp_id << 6) + 0 + tid1 < seg_size) valB[k + (warp_id << 6) + 0 + tid1] = val[k + tmem[(warp_id << 6) + 0 + tid1]];
		if ((warp_id << 6) + 32 + tid1 < seg_size) valB[k + (warp_id << 6) + 32 + tid1] = val[k + tmem[(warp_id << 6) + 32 + tid1]];
	}
}

// 128 threads per block | 4 ppt | strided
template<class K, class T>
__global__
void my_blk128_ppt4_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[512];
	__shared__ int tmem[512];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 127) / 128);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<7)+0	<seg_size)?key[k+tid1+(warp_id<<7)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<7)+32	<seg_size)?key[k+tid1+(warp_id<<7)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<7)+64	<seg_size)?key[k+tid1+(warp_id<<7)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<7)+96	<seg_size)?key[k+tid1+(warp_id<<7)+96	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<7)+0	<seg_size) rg_v0  = tid1+(warp_id<<7)+0	;
			if (tid1+(warp_id<<7)+32	<seg_size) rg_v1  = tid1+(warp_id<<7)+32	;
			if (tid1+(warp_id<<7)+64	<seg_size) rg_v2  = tid1+(warp_id<<7)+64	;
			if (tid1+(warp_id<<7)+96	<seg_size) rg_v3  = tid1+(warp_id<<7)+96	;

			// sort 128 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);

			// Store register results to shared memory
			smem[(warp_id<<7) + (tid1<<2) + 0] = rg_k0;
			smem[(warp_id<<7) + (tid1<<2) + 1] = rg_k1;
			smem[(warp_id<<7) + (tid1<<2) + 2] = rg_k2;
			smem[(warp_id<<7) + (tid1<<2) + 3] = rg_k3;
			tmem[(warp_id<<7) + (tid1<<2) + 0] = rg_v0;
			tmem[(warp_id<<7) + (tid1<<2) + 1] = rg_v1;
			tmem[(warp_id<<7) + (tid1<<2) + 2] = rg_v2;
			tmem[(warp_id<<7) + (tid1<<2) + 3] = rg_v3;
		}
		__syncthreads();

		// Merge in 2 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 128;
			rhs_len = 128;
			gran = tid1<<2;
			gran += (warp_id & 1) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 256;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 3) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		if ((warp_id << 7) + 0 + tid1 < seg_size) keyB[k + (warp_id << 7) + 0 + tid1] = smem[(warp_id << 7) + 0 + tid1];
		if ((warp_id << 7) + 32 + tid1 < seg_size) keyB[k + (warp_id << 7) + 32 + tid1] = smem[(warp_id << 7) + 32 + tid1];
		if ((warp_id << 7) + 64 + tid1 < seg_size) keyB[k + (warp_id << 7) + 64 + tid1] = smem[(warp_id << 7) + 64 + tid1];
		if ((warp_id << 7) + 96 + tid1 < seg_size) keyB[k + (warp_id << 7) + 96 + tid1] = smem[(warp_id << 7) + 96 + tid1];

		if ((warp_id << 7) + 0 + tid1 < seg_size) valB[k + (warp_id << 7) + 0 + tid1] = val[k + tmem[(warp_id << 7) + 0 + tid1]];
		if ((warp_id << 7) + 32 + tid1 < seg_size) valB[k + (warp_id << 7) + 32 + tid1] = val[k + tmem[(warp_id << 7) + 32 + tid1]];
		if ((warp_id << 7) + 64 + tid1 < seg_size) valB[k + (warp_id << 7) + 64 + tid1] = val[k + tmem[(warp_id << 7) + 64 + tid1]];
		if ((warp_id << 7) + 96 + tid1 < seg_size) valB[k + (warp_id << 7) + 96 + tid1] = val[k + tmem[(warp_id << 7) + 96 + tid1]];
	}
}

// 64 threads per block | 8 ppt | strided
template<class K, class T>
__global__
void my_blk64_ppt8_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[512];
	__shared__ int tmem[512];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 255) / 256);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<8)+0	<seg_size)?key[k+tid1+(warp_id<<8)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<8)+32	<seg_size)?key[k+tid1+(warp_id<<8)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<8)+64	<seg_size)?key[k+tid1+(warp_id<<8)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<8)+96	<seg_size)?key[k+tid1+(warp_id<<8)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<8)+128	<seg_size)?key[k+tid1+(warp_id<<8)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<8)+160	<seg_size)?key[k+tid1+(warp_id<<8)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<8)+192	<seg_size)?key[k+tid1+(warp_id<<8)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<8)+224	<seg_size)?key[k+tid1+(warp_id<<8)+224	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<8)+0	<seg_size) rg_v0  = tid1+(warp_id<<8)+0	;
			if (tid1+(warp_id<<8)+32	<seg_size) rg_v1  = tid1+(warp_id<<8)+32	;
			if (tid1+(warp_id<<8)+64	<seg_size) rg_v2  = tid1+(warp_id<<8)+64	;
			if (tid1+(warp_id<<8)+96	<seg_size) rg_v3  = tid1+(warp_id<<8)+96	;
			if (tid1+(warp_id<<8)+128	<seg_size) rg_v4  = tid1+(warp_id<<8)+128	;
			if (tid1+(warp_id<<8)+160	<seg_size) rg_v5  = tid1+(warp_id<<8)+160	;
			if (tid1+(warp_id<<8)+192	<seg_size) rg_v6  = tid1+(warp_id<<8)+192	;
			if (tid1+(warp_id<<8)+224	<seg_size) rg_v7  = tid1+(warp_id<<8)+224	;

			// sort 256 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);

			// Store register results to shared memory
			smem[(warp_id<<8) + (tid1<<3) + 0] = rg_k0;
			smem[(warp_id<<8) + (tid1<<3) + 1] = rg_k1;
			smem[(warp_id<<8) + (tid1<<3) + 2] = rg_k2;
			smem[(warp_id<<8) + (tid1<<3) + 3] = rg_k3;
			smem[(warp_id<<8) + (tid1<<3) + 4] = rg_k4;
			smem[(warp_id<<8) + (tid1<<3) + 5] = rg_k5;
			smem[(warp_id<<8) + (tid1<<3) + 6] = rg_k6;
			smem[(warp_id<<8) + (tid1<<3) + 7] = rg_k7;
			tmem[(warp_id<<8) + (tid1<<3) + 0] = rg_v0;
			tmem[(warp_id<<8) + (tid1<<3) + 1] = rg_v1;
			tmem[(warp_id<<8) + (tid1<<3) + 2] = rg_v2;
			tmem[(warp_id<<8) + (tid1<<3) + 3] = rg_v3;
			tmem[(warp_id<<8) + (tid1<<3) + 4] = rg_v4;
			tmem[(warp_id<<8) + (tid1<<3) + 5] = rg_v5;
			tmem[(warp_id<<8) + (tid1<<3) + 6] = rg_v6;
			tmem[(warp_id<<8) + (tid1<<3) + 7] = rg_v7;
		}
		__syncthreads();

		// Merge in 1 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 256;
			rhs_len = 256;
			gran = tid1<<3;
			gran += (warp_id & 1) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		if ((warp_id << 8) + 0 + tid1 < seg_size) keyB[k + (warp_id << 8) + 0 + tid1] = smem[(warp_id << 8) + 0 + tid1];
		if ((warp_id << 8) + 32 + tid1 < seg_size) keyB[k + (warp_id << 8) + 32 + tid1] = smem[(warp_id << 8) + 32 + tid1];
		if ((warp_id << 8) + 64 + tid1 < seg_size) keyB[k + (warp_id << 8) + 64 + tid1] = smem[(warp_id << 8) + 64 + tid1];
		if ((warp_id << 8) + 96 + tid1 < seg_size) keyB[k + (warp_id << 8) + 96 + tid1] = smem[(warp_id << 8) + 96 + tid1];
		if ((warp_id << 8) + 128 + tid1 < seg_size) keyB[k + (warp_id << 8) + 128 + tid1] = smem[(warp_id << 8) + 128 + tid1];
		if ((warp_id << 8) + 160 + tid1 < seg_size) keyB[k + (warp_id << 8) + 160 + tid1] = smem[(warp_id << 8) + 160 + tid1];
		if ((warp_id << 8) + 192 + tid1 < seg_size) keyB[k + (warp_id << 8) + 192 + tid1] = smem[(warp_id << 8) + 192 + tid1];
		if ((warp_id << 8) + 224 + tid1 < seg_size) keyB[k + (warp_id << 8) + 224 + tid1] = smem[(warp_id << 8) + 224 + tid1];

		if ((warp_id << 8) + 0 + tid1 < seg_size) valB[k + (warp_id << 8) + 0 + tid1] = val[k + tmem[(warp_id << 8) + 0 + tid1]];
		if ((warp_id << 8) + 32 + tid1 < seg_size) valB[k + (warp_id << 8) + 32 + tid1] = val[k + tmem[(warp_id << 8) + 32 + tid1]];
		if ((warp_id << 8) + 64 + tid1 < seg_size) valB[k + (warp_id << 8) + 64 + tid1] = val[k + tmem[(warp_id << 8) + 64 + tid1]];
		if ((warp_id << 8) + 96 + tid1 < seg_size) valB[k + (warp_id << 8) + 96 + tid1] = val[k + tmem[(warp_id << 8) + 96 + tid1]];
		if ((warp_id << 8) + 128 + tid1 < seg_size) valB[k + (warp_id << 8) + 128 + tid1] = val[k + tmem[(warp_id << 8) + 128 + tid1]];
		if ((warp_id << 8) + 160 + tid1 < seg_size) valB[k + (warp_id << 8) + 160 + tid1] = val[k + tmem[(warp_id << 8) + 160 + tid1]];
		if ((warp_id << 8) + 192 + tid1 < seg_size) valB[k + (warp_id << 8) + 192 + tid1] = val[k + tmem[(warp_id << 8) + 192 + tid1]];
		if ((warp_id << 8) + 224 + tid1 < seg_size) valB[k + (warp_id << 8) + 224 + tid1] = val[k + tmem[(warp_id << 8) + 224 + tid1]];
	}
}

// segsize 1024

// 512 threads per block | 2 ppt | strided
template<class K, class T>
__global__
void my_blk512_ppt2_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[1024];
	__shared__ int tmem[1024];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	int rg_v0;
	int rg_v1;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 63) / 64);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<6)+0	<seg_size)?key[k+tid1+(warp_id<<6)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<6)+32	<seg_size)?key[k+tid1+(warp_id<<6)+32	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<6)+0	<seg_size) rg_v0  = tid1+(warp_id<<6)+0	;
			if (tid1+(warp_id<<6)+32	<seg_size) rg_v1  = tid1+(warp_id<<6)+32	;

			// sort 64 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);

			// Store register results to shared memory
			smem[(warp_id<<6) + (tid1<<1) + 0] = rg_k0;
			smem[(warp_id<<6) + (tid1<<1) + 1] = rg_k1;
			tmem[(warp_id<<6) + (tid1<<1) + 0] = rg_v0;
			tmem[(warp_id<<6) + (tid1<<1) + 1] = rg_v1;
		}
		__syncthreads();

		// Merge in 4 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 64;
			rhs_len = 64;
			gran = tid1<<1;
			gran += (warp_id & 1) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 128;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 3) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 256;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 7) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 512;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 15) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		if ((warp_id << 6) + 0 + tid1 < seg_size) keyB[k + (warp_id << 6) + 0 + tid1] = smem[(warp_id << 6) + 0 + tid1];
		if ((warp_id << 6) + 32 + tid1 < seg_size) keyB[k + (warp_id << 6) + 32 + tid1] = smem[(warp_id << 6) + 32 + tid1];

		if ((warp_id << 6) + 0 + tid1 < seg_size) valB[k + (warp_id << 6) + 0 + tid1] = val[k + tmem[(warp_id << 6) + 0 + tid1]];
		if ((warp_id << 6) + 32 + tid1 < seg_size) valB[k + (warp_id << 6) + 32 + tid1] = val[k + tmem[(warp_id << 6) + 32 + tid1]];
	}
}

// 256 threads per block | 4 ppt | strided
template<class K, class T>
__global__
void my_blk256_ppt4_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[1024];
	__shared__ int tmem[1024];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 127) / 128);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<7)+0	<seg_size)?key[k+tid1+(warp_id<<7)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<7)+32	<seg_size)?key[k+tid1+(warp_id<<7)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<7)+64	<seg_size)?key[k+tid1+(warp_id<<7)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<7)+96	<seg_size)?key[k+tid1+(warp_id<<7)+96	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<7)+0	<seg_size) rg_v0  = tid1+(warp_id<<7)+0	;
			if (tid1+(warp_id<<7)+32	<seg_size) rg_v1  = tid1+(warp_id<<7)+32	;
			if (tid1+(warp_id<<7)+64	<seg_size) rg_v2  = tid1+(warp_id<<7)+64	;
			if (tid1+(warp_id<<7)+96	<seg_size) rg_v3  = tid1+(warp_id<<7)+96	;

			// sort 128 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);

			// Store register results to shared memory
			smem[(warp_id<<7) + (tid1<<2) + 0] = rg_k0;
			smem[(warp_id<<7) + (tid1<<2) + 1] = rg_k1;
			smem[(warp_id<<7) + (tid1<<2) + 2] = rg_k2;
			smem[(warp_id<<7) + (tid1<<2) + 3] = rg_k3;
			tmem[(warp_id<<7) + (tid1<<2) + 0] = rg_v0;
			tmem[(warp_id<<7) + (tid1<<2) + 1] = rg_v1;
			tmem[(warp_id<<7) + (tid1<<2) + 2] = rg_v2;
			tmem[(warp_id<<7) + (tid1<<2) + 3] = rg_v3;
		}
		__syncthreads();

		// Merge in 3 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 128;
			rhs_len = 128;
			gran = tid1<<2;
			gran += (warp_id & 1) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 256;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 3) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 512;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 7) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		if ((warp_id << 7) + 0 + tid1 < seg_size) keyB[k + (warp_id << 7) + 0 + tid1] = smem[(warp_id << 7) + 0 + tid1];
		if ((warp_id << 7) + 32 + tid1 < seg_size) keyB[k + (warp_id << 7) + 32 + tid1] = smem[(warp_id << 7) + 32 + tid1];
		if ((warp_id << 7) + 64 + tid1 < seg_size) keyB[k + (warp_id << 7) + 64 + tid1] = smem[(warp_id << 7) + 64 + tid1];
		if ((warp_id << 7) + 96 + tid1 < seg_size) keyB[k + (warp_id << 7) + 96 + tid1] = smem[(warp_id << 7) + 96 + tid1];

		if ((warp_id << 7) + 0 + tid1 < seg_size) valB[k + (warp_id << 7) + 0 + tid1] = val[k + tmem[(warp_id << 7) + 0 + tid1]];
		if ((warp_id << 7) + 32 + tid1 < seg_size) valB[k + (warp_id << 7) + 32 + tid1] = val[k + tmem[(warp_id << 7) + 32 + tid1]];
		if ((warp_id << 7) + 64 + tid1 < seg_size) valB[k + (warp_id << 7) + 64 + tid1] = val[k + tmem[(warp_id << 7) + 64 + tid1]];
		if ((warp_id << 7) + 96 + tid1 < seg_size) valB[k + (warp_id << 7) + 96 + tid1] = val[k + tmem[(warp_id << 7) + 96 + tid1]];
	}
}

// 128 threads per block | 8 ppt | strided
template<class K, class T>
__global__
void my_blk128_ppt8_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[1024];
	__shared__ int tmem[1024];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 255) / 256);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<8)+0	<seg_size)?key[k+tid1+(warp_id<<8)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<8)+32	<seg_size)?key[k+tid1+(warp_id<<8)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<8)+64	<seg_size)?key[k+tid1+(warp_id<<8)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<8)+96	<seg_size)?key[k+tid1+(warp_id<<8)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<8)+128	<seg_size)?key[k+tid1+(warp_id<<8)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<8)+160	<seg_size)?key[k+tid1+(warp_id<<8)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<8)+192	<seg_size)?key[k+tid1+(warp_id<<8)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<8)+224	<seg_size)?key[k+tid1+(warp_id<<8)+224	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<8)+0	<seg_size) rg_v0  = tid1+(warp_id<<8)+0	;
			if (tid1+(warp_id<<8)+32	<seg_size) rg_v1  = tid1+(warp_id<<8)+32	;
			if (tid1+(warp_id<<8)+64	<seg_size) rg_v2  = tid1+(warp_id<<8)+64	;
			if (tid1+(warp_id<<8)+96	<seg_size) rg_v3  = tid1+(warp_id<<8)+96	;
			if (tid1+(warp_id<<8)+128	<seg_size) rg_v4  = tid1+(warp_id<<8)+128	;
			if (tid1+(warp_id<<8)+160	<seg_size) rg_v5  = tid1+(warp_id<<8)+160	;
			if (tid1+(warp_id<<8)+192	<seg_size) rg_v6  = tid1+(warp_id<<8)+192	;
			if (tid1+(warp_id<<8)+224	<seg_size) rg_v7  = tid1+(warp_id<<8)+224	;

			// sort 256 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);

			// Store register results to shared memory
			smem[(warp_id<<8) + (tid1<<3) + 0] = rg_k0;
			smem[(warp_id<<8) + (tid1<<3) + 1] = rg_k1;
			smem[(warp_id<<8) + (tid1<<3) + 2] = rg_k2;
			smem[(warp_id<<8) + (tid1<<3) + 3] = rg_k3;
			smem[(warp_id<<8) + (tid1<<3) + 4] = rg_k4;
			smem[(warp_id<<8) + (tid1<<3) + 5] = rg_k5;
			smem[(warp_id<<8) + (tid1<<3) + 6] = rg_k6;
			smem[(warp_id<<8) + (tid1<<3) + 7] = rg_k7;
			tmem[(warp_id<<8) + (tid1<<3) + 0] = rg_v0;
			tmem[(warp_id<<8) + (tid1<<3) + 1] = rg_v1;
			tmem[(warp_id<<8) + (tid1<<3) + 2] = rg_v2;
			tmem[(warp_id<<8) + (tid1<<3) + 3] = rg_v3;
			tmem[(warp_id<<8) + (tid1<<3) + 4] = rg_v4;
			tmem[(warp_id<<8) + (tid1<<3) + 5] = rg_v5;
			tmem[(warp_id<<8) + (tid1<<3) + 6] = rg_v6;
			tmem[(warp_id<<8) + (tid1<<3) + 7] = rg_v7;
		}
		__syncthreads();

		// Merge in 2 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 256;
			rhs_len = 256;
			gran = tid1<<3;
			gran += (warp_id & 1) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 512;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 3) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		if ((warp_id << 8) + 0 + tid1 < seg_size) keyB[k + (warp_id << 8) + 0 + tid1] = smem[(warp_id << 8) + 0 + tid1];
		if ((warp_id << 8) + 32 + tid1 < seg_size) keyB[k + (warp_id << 8) + 32 + tid1] = smem[(warp_id << 8) + 32 + tid1];
		if ((warp_id << 8) + 64 + tid1 < seg_size) keyB[k + (warp_id << 8) + 64 + tid1] = smem[(warp_id << 8) + 64 + tid1];
		if ((warp_id << 8) + 96 + tid1 < seg_size) keyB[k + (warp_id << 8) + 96 + tid1] = smem[(warp_id << 8) + 96 + tid1];
		if ((warp_id << 8) + 128 + tid1 < seg_size) keyB[k + (warp_id << 8) + 128 + tid1] = smem[(warp_id << 8) + 128 + tid1];
		if ((warp_id << 8) + 160 + tid1 < seg_size) keyB[k + (warp_id << 8) + 160 + tid1] = smem[(warp_id << 8) + 160 + tid1];
		if ((warp_id << 8) + 192 + tid1 < seg_size) keyB[k + (warp_id << 8) + 192 + tid1] = smem[(warp_id << 8) + 192 + tid1];
		if ((warp_id << 8) + 224 + tid1 < seg_size) keyB[k + (warp_id << 8) + 224 + tid1] = smem[(warp_id << 8) + 224 + tid1];

		if ((warp_id << 8) + 0 + tid1 < seg_size) valB[k + (warp_id << 8) + 0 + tid1] = val[k + tmem[(warp_id << 8) + 0 + tid1]];
		if ((warp_id << 8) + 32 + tid1 < seg_size) valB[k + (warp_id << 8) + 32 + tid1] = val[k + tmem[(warp_id << 8) + 32 + tid1]];
		if ((warp_id << 8) + 64 + tid1 < seg_size) valB[k + (warp_id << 8) + 64 + tid1] = val[k + tmem[(warp_id << 8) + 64 + tid1]];
		if ((warp_id << 8) + 96 + tid1 < seg_size) valB[k + (warp_id << 8) + 96 + tid1] = val[k + tmem[(warp_id << 8) + 96 + tid1]];
		if ((warp_id << 8) + 128 + tid1 < seg_size) valB[k + (warp_id << 8) + 128 + tid1] = val[k + tmem[(warp_id << 8) + 128 + tid1]];
		if ((warp_id << 8) + 160 + tid1 < seg_size) valB[k + (warp_id << 8) + 160 + tid1] = val[k + tmem[(warp_id << 8) + 160 + tid1]];
		if ((warp_id << 8) + 192 + tid1 < seg_size) valB[k + (warp_id << 8) + 192 + tid1] = val[k + tmem[(warp_id << 8) + 192 + tid1]];
		if ((warp_id << 8) + 224 + tid1 < seg_size) valB[k + (warp_id << 8) + 224 + tid1] = val[k + tmem[(warp_id << 8) + 224 + tid1]];
	}
}

// 64 threads per block | 16 ppt | strided
template<class K, class T>
__global__
void my_blk64_ppt16_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[1024];
	__shared__ int tmem[1024];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 511) / 512);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<9)+0	<seg_size)?key[k+tid1+(warp_id<<9)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<9)+32	<seg_size)?key[k+tid1+(warp_id<<9)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<9)+64	<seg_size)?key[k+tid1+(warp_id<<9)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<9)+96	<seg_size)?key[k+tid1+(warp_id<<9)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<9)+128	<seg_size)?key[k+tid1+(warp_id<<9)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<9)+160	<seg_size)?key[k+tid1+(warp_id<<9)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<9)+192	<seg_size)?key[k+tid1+(warp_id<<9)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<9)+224	<seg_size)?key[k+tid1+(warp_id<<9)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<9)+256	<seg_size)?key[k+tid1+(warp_id<<9)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<9)+288	<seg_size)?key[k+tid1+(warp_id<<9)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<9)+320	<seg_size)?key[k+tid1+(warp_id<<9)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<9)+352	<seg_size)?key[k+tid1+(warp_id<<9)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<9)+384	<seg_size)?key[k+tid1+(warp_id<<9)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<9)+416	<seg_size)?key[k+tid1+(warp_id<<9)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<9)+448	<seg_size)?key[k+tid1+(warp_id<<9)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<9)+480	<seg_size)?key[k+tid1+(warp_id<<9)+480	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<9)+0	<seg_size) rg_v0  = tid1+(warp_id<<9)+0	;
			if (tid1+(warp_id<<9)+32	<seg_size) rg_v1  = tid1+(warp_id<<9)+32	;
			if (tid1+(warp_id<<9)+64	<seg_size) rg_v2  = tid1+(warp_id<<9)+64	;
			if (tid1+(warp_id<<9)+96	<seg_size) rg_v3  = tid1+(warp_id<<9)+96	;
			if (tid1+(warp_id<<9)+128	<seg_size) rg_v4  = tid1+(warp_id<<9)+128	;
			if (tid1+(warp_id<<9)+160	<seg_size) rg_v5  = tid1+(warp_id<<9)+160	;
			if (tid1+(warp_id<<9)+192	<seg_size) rg_v6  = tid1+(warp_id<<9)+192	;
			if (tid1+(warp_id<<9)+224	<seg_size) rg_v7  = tid1+(warp_id<<9)+224	;
			if (tid1+(warp_id<<9)+256	<seg_size) rg_v8  = tid1+(warp_id<<9)+256	;
			if (tid1+(warp_id<<9)+288	<seg_size) rg_v9  = tid1+(warp_id<<9)+288	;
			if (tid1+(warp_id<<9)+320	<seg_size) rg_v10  = tid1+(warp_id<<9)+320	;
			if (tid1+(warp_id<<9)+352	<seg_size) rg_v11  = tid1+(warp_id<<9)+352	;
			if (tid1+(warp_id<<9)+384	<seg_size) rg_v12  = tid1+(warp_id<<9)+384	;
			if (tid1+(warp_id<<9)+416	<seg_size) rg_v13  = tid1+(warp_id<<9)+416	;
			if (tid1+(warp_id<<9)+448	<seg_size) rg_v14  = tid1+(warp_id<<9)+448	;
			if (tid1+(warp_id<<9)+480	<seg_size) rg_v15  = tid1+(warp_id<<9)+480	;

			// sort 512 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);

			// Store register results to shared memory
			smem[(warp_id<<9) + (tid1<<4) + 0] = rg_k0;
			smem[(warp_id<<9) + (tid1<<4) + 1] = rg_k1;
			smem[(warp_id<<9) + (tid1<<4) + 2] = rg_k2;
			smem[(warp_id<<9) + (tid1<<4) + 3] = rg_k3;
			smem[(warp_id<<9) + (tid1<<4) + 4] = rg_k4;
			smem[(warp_id<<9) + (tid1<<4) + 5] = rg_k5;
			smem[(warp_id<<9) + (tid1<<4) + 6] = rg_k6;
			smem[(warp_id<<9) + (tid1<<4) + 7] = rg_k7;
			smem[(warp_id<<9) + (tid1<<4) + 8] = rg_k8;
			smem[(warp_id<<9) + (tid1<<4) + 9] = rg_k9;
			smem[(warp_id<<9) + (tid1<<4) + 10] = rg_k10;
			smem[(warp_id<<9) + (tid1<<4) + 11] = rg_k11;
			smem[(warp_id<<9) + (tid1<<4) + 12] = rg_k12;
			smem[(warp_id<<9) + (tid1<<4) + 13] = rg_k13;
			smem[(warp_id<<9) + (tid1<<4) + 14] = rg_k14;
			smem[(warp_id<<9) + (tid1<<4) + 15] = rg_k15;
			tmem[(warp_id<<9) + (tid1<<4) + 0] = rg_v0;
			tmem[(warp_id<<9) + (tid1<<4) + 1] = rg_v1;
			tmem[(warp_id<<9) + (tid1<<4) + 2] = rg_v2;
			tmem[(warp_id<<9) + (tid1<<4) + 3] = rg_v3;
			tmem[(warp_id<<9) + (tid1<<4) + 4] = rg_v4;
			tmem[(warp_id<<9) + (tid1<<4) + 5] = rg_v5;
			tmem[(warp_id<<9) + (tid1<<4) + 6] = rg_v6;
			tmem[(warp_id<<9) + (tid1<<4) + 7] = rg_v7;
			tmem[(warp_id<<9) + (tid1<<4) + 8] = rg_v8;
			tmem[(warp_id<<9) + (tid1<<4) + 9] = rg_v9;
			tmem[(warp_id<<9) + (tid1<<4) + 10] = rg_v10;
			tmem[(warp_id<<9) + (tid1<<4) + 11] = rg_v11;
			tmem[(warp_id<<9) + (tid1<<4) + 12] = rg_v12;
			tmem[(warp_id<<9) + (tid1<<4) + 13] = rg_v13;
			tmem[(warp_id<<9) + (tid1<<4) + 14] = rg_v14;
			tmem[(warp_id<<9) + (tid1<<4) + 15] = rg_v15;
		}
		__syncthreads();

		// Merge in 1 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 512;
			rhs_len = 512;
			gran = tid1<<4;
			gran += (warp_id & 1) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		if ((warp_id << 9) + 0 + tid1 < seg_size) keyB[k + (warp_id << 9) + 0 + tid1] = smem[(warp_id << 9) + 0 + tid1];
		if ((warp_id << 9) + 32 + tid1 < seg_size) keyB[k + (warp_id << 9) + 32 + tid1] = smem[(warp_id << 9) + 32 + tid1];
		if ((warp_id << 9) + 64 + tid1 < seg_size) keyB[k + (warp_id << 9) + 64 + tid1] = smem[(warp_id << 9) + 64 + tid1];
		if ((warp_id << 9) + 96 + tid1 < seg_size) keyB[k + (warp_id << 9) + 96 + tid1] = smem[(warp_id << 9) + 96 + tid1];
		if ((warp_id << 9) + 128 + tid1 < seg_size) keyB[k + (warp_id << 9) + 128 + tid1] = smem[(warp_id << 9) + 128 + tid1];
		if ((warp_id << 9) + 160 + tid1 < seg_size) keyB[k + (warp_id << 9) + 160 + tid1] = smem[(warp_id << 9) + 160 + tid1];
		if ((warp_id << 9) + 192 + tid1 < seg_size) keyB[k + (warp_id << 9) + 192 + tid1] = smem[(warp_id << 9) + 192 + tid1];
		if ((warp_id << 9) + 224 + tid1 < seg_size) keyB[k + (warp_id << 9) + 224 + tid1] = smem[(warp_id << 9) + 224 + tid1];
		if ((warp_id << 9) + 256 + tid1 < seg_size) keyB[k + (warp_id << 9) + 256 + tid1] = smem[(warp_id << 9) + 256 + tid1];
		if ((warp_id << 9) + 288 + tid1 < seg_size) keyB[k + (warp_id << 9) + 288 + tid1] = smem[(warp_id << 9) + 288 + tid1];
		if ((warp_id << 9) + 320 + tid1 < seg_size) keyB[k + (warp_id << 9) + 320 + tid1] = smem[(warp_id << 9) + 320 + tid1];
		if ((warp_id << 9) + 352 + tid1 < seg_size) keyB[k + (warp_id << 9) + 352 + tid1] = smem[(warp_id << 9) + 352 + tid1];
		if ((warp_id << 9) + 384 + tid1 < seg_size) keyB[k + (warp_id << 9) + 384 + tid1] = smem[(warp_id << 9) + 384 + tid1];
		if ((warp_id << 9) + 416 + tid1 < seg_size) keyB[k + (warp_id << 9) + 416 + tid1] = smem[(warp_id << 9) + 416 + tid1];
		if ((warp_id << 9) + 448 + tid1 < seg_size) keyB[k + (warp_id << 9) + 448 + tid1] = smem[(warp_id << 9) + 448 + tid1];
		if ((warp_id << 9) + 480 + tid1 < seg_size) keyB[k + (warp_id << 9) + 480 + tid1] = smem[(warp_id << 9) + 480 + tid1];

		if ((warp_id << 9) + 0 + tid1 < seg_size) valB[k + (warp_id << 9) + 0 + tid1] = val[k + tmem[(warp_id << 9) + 0 + tid1]];
		if ((warp_id << 9) + 32 + tid1 < seg_size) valB[k + (warp_id << 9) + 32 + tid1] = val[k + tmem[(warp_id << 9) + 32 + tid1]];
		if ((warp_id << 9) + 64 + tid1 < seg_size) valB[k + (warp_id << 9) + 64 + tid1] = val[k + tmem[(warp_id << 9) + 64 + tid1]];
		if ((warp_id << 9) + 96 + tid1 < seg_size) valB[k + (warp_id << 9) + 96 + tid1] = val[k + tmem[(warp_id << 9) + 96 + tid1]];
		if ((warp_id << 9) + 128 + tid1 < seg_size) valB[k + (warp_id << 9) + 128 + tid1] = val[k + tmem[(warp_id << 9) + 128 + tid1]];
		if ((warp_id << 9) + 160 + tid1 < seg_size) valB[k + (warp_id << 9) + 160 + tid1] = val[k + tmem[(warp_id << 9) + 160 + tid1]];
		if ((warp_id << 9) + 192 + tid1 < seg_size) valB[k + (warp_id << 9) + 192 + tid1] = val[k + tmem[(warp_id << 9) + 192 + tid1]];
		if ((warp_id << 9) + 224 + tid1 < seg_size) valB[k + (warp_id << 9) + 224 + tid1] = val[k + tmem[(warp_id << 9) + 224 + tid1]];
		if ((warp_id << 9) + 256 + tid1 < seg_size) valB[k + (warp_id << 9) + 256 + tid1] = val[k + tmem[(warp_id << 9) + 256 + tid1]];
		if ((warp_id << 9) + 288 + tid1 < seg_size) valB[k + (warp_id << 9) + 288 + tid1] = val[k + tmem[(warp_id << 9) + 288 + tid1]];
		if ((warp_id << 9) + 320 + tid1 < seg_size) valB[k + (warp_id << 9) + 320 + tid1] = val[k + tmem[(warp_id << 9) + 320 + tid1]];
		if ((warp_id << 9) + 352 + tid1 < seg_size) valB[k + (warp_id << 9) + 352 + tid1] = val[k + tmem[(warp_id << 9) + 352 + tid1]];
		if ((warp_id << 9) + 384 + tid1 < seg_size) valB[k + (warp_id << 9) + 384 + tid1] = val[k + tmem[(warp_id << 9) + 384 + tid1]];
		if ((warp_id << 9) + 416 + tid1 < seg_size) valB[k + (warp_id << 9) + 416 + tid1] = val[k + tmem[(warp_id << 9) + 416 + tid1]];
		if ((warp_id << 9) + 448 + tid1 < seg_size) valB[k + (warp_id << 9) + 448 + tid1] = val[k + tmem[(warp_id << 9) + 448 + tid1]];
		if ((warp_id << 9) + 480 + tid1 < seg_size) valB[k + (warp_id << 9) + 480 + tid1] = val[k + tmem[(warp_id << 9) + 480 + tid1]];
	}
}

// segsize 2048

// 1024 threads per block | 2 ppt | strided
template<class K, class T>
__global__
void my_blk1024_ppt2_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[2048];
	__shared__ int tmem[2048];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	int rg_v0;
	int rg_v1;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 63) / 64);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<6)+0	<seg_size)?key[k+tid1+(warp_id<<6)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<6)+32	<seg_size)?key[k+tid1+(warp_id<<6)+32	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<6)+0	<seg_size) rg_v0  = tid1+(warp_id<<6)+0	;
			if (tid1+(warp_id<<6)+32	<seg_size) rg_v1  = tid1+(warp_id<<6)+32	;

			// sort 64 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_v0, rg_v1, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_v0, rg_v1, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);

			// Store register results to shared memory
			smem[(warp_id<<6) + (tid1<<1) + 0] = rg_k0;
			smem[(warp_id<<6) + (tid1<<1) + 1] = rg_k1;
			tmem[(warp_id<<6) + (tid1<<1) + 0] = rg_v0;
			tmem[(warp_id<<6) + (tid1<<1) + 1] = rg_v1;
		}
		__syncthreads();

		// Merge in 5 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 64;
			rhs_len = 64;
			gran = tid1<<1;
			gran += (warp_id & 1) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 128;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 3) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 256;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 7) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 512;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 15) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		// Step 4
		grp_start_wp_id = ((warp_id>>5)<<5);
		if(grp_start_wp_id + (1 << 4) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 64;
			lhs_len = 1024;
			rhs_len = 64 * (1 +
				(grp_start_wp_id + 17 < full_wp) +
				(grp_start_wp_id + 18 < full_wp) +
				(grp_start_wp_id + 19 < full_wp) +
				(grp_start_wp_id + 20 < full_wp) +
				(grp_start_wp_id + 21 < full_wp) +
				(grp_start_wp_id + 22 < full_wp) +
				(grp_start_wp_id + 23 < full_wp) +
				(grp_start_wp_id + 24 < full_wp) +
				(grp_start_wp_id + 25 < full_wp) +
				(grp_start_wp_id + 26 < full_wp) +
				(grp_start_wp_id + 27 < full_wp) +
				(grp_start_wp_id + 28 < full_wp) +
				(grp_start_wp_id + 29 < full_wp) +
				(grp_start_wp_id + 30 < full_wp) +
				(grp_start_wp_id + 31 < full_wp) );
			gran = tid1<<1;
			gran += (warp_id & 31) * 64;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 4) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
		}
		__syncthreads();

		if ((warp_id << 6) + 0 + tid1 < seg_size) keyB[k + (warp_id << 6) + 0 + tid1] = smem[(warp_id << 6) + 0 + tid1];
		if ((warp_id << 6) + 32 + tid1 < seg_size) keyB[k + (warp_id << 6) + 32 + tid1] = smem[(warp_id << 6) + 32 + tid1];

		if ((warp_id << 6) + 0 + tid1 < seg_size) valB[k + (warp_id << 6) + 0 + tid1] = val[k + tmem[(warp_id << 6) + 0 + tid1]];
		if ((warp_id << 6) + 32 + tid1 < seg_size) valB[k + (warp_id << 6) + 32 + tid1] = val[k + tmem[(warp_id << 6) + 32 + tid1]];
	}
}

// 512 threads per block | 4 ppt | strided
template<class K, class T>
__global__
void my_blk512_ppt4_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[2048];
	__shared__ int tmem[2048];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 127) / 128);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<7)+0	<seg_size)?key[k+tid1+(warp_id<<7)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<7)+32	<seg_size)?key[k+tid1+(warp_id<<7)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<7)+64	<seg_size)?key[k+tid1+(warp_id<<7)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<7)+96	<seg_size)?key[k+tid1+(warp_id<<7)+96	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<7)+0	<seg_size) rg_v0  = tid1+(warp_id<<7)+0	;
			if (tid1+(warp_id<<7)+32	<seg_size) rg_v1  = tid1+(warp_id<<7)+32	;
			if (tid1+(warp_id<<7)+64	<seg_size) rg_v2  = tid1+(warp_id<<7)+64	;
			if (tid1+(warp_id<<7)+96	<seg_size) rg_v3  = tid1+(warp_id<<7)+96	;

			// sort 128 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);

			// Store register results to shared memory
			smem[(warp_id<<7) + (tid1<<2) + 0] = rg_k0;
			smem[(warp_id<<7) + (tid1<<2) + 1] = rg_k1;
			smem[(warp_id<<7) + (tid1<<2) + 2] = rg_k2;
			smem[(warp_id<<7) + (tid1<<2) + 3] = rg_k3;
			tmem[(warp_id<<7) + (tid1<<2) + 0] = rg_v0;
			tmem[(warp_id<<7) + (tid1<<2) + 1] = rg_v1;
			tmem[(warp_id<<7) + (tid1<<2) + 2] = rg_v2;
			tmem[(warp_id<<7) + (tid1<<2) + 3] = rg_v3;
		}
		__syncthreads();

		// Merge in 4 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 128;
			rhs_len = 128;
			gran = tid1<<2;
			gran += (warp_id & 1) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 256;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 3) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 512;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 7) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 1024;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 15) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		if ((warp_id << 7) + 0 + tid1 < seg_size) keyB[k + (warp_id << 7) + 0 + tid1] = smem[(warp_id << 7) + 0 + tid1];
		if ((warp_id << 7) + 32 + tid1 < seg_size) keyB[k + (warp_id << 7) + 32 + tid1] = smem[(warp_id << 7) + 32 + tid1];
		if ((warp_id << 7) + 64 + tid1 < seg_size) keyB[k + (warp_id << 7) + 64 + tid1] = smem[(warp_id << 7) + 64 + tid1];
		if ((warp_id << 7) + 96 + tid1 < seg_size) keyB[k + (warp_id << 7) + 96 + tid1] = smem[(warp_id << 7) + 96 + tid1];

		if ((warp_id << 7) + 0 + tid1 < seg_size) valB[k + (warp_id << 7) + 0 + tid1] = val[k + tmem[(warp_id << 7) + 0 + tid1]];
		if ((warp_id << 7) + 32 + tid1 < seg_size) valB[k + (warp_id << 7) + 32 + tid1] = val[k + tmem[(warp_id << 7) + 32 + tid1]];
		if ((warp_id << 7) + 64 + tid1 < seg_size) valB[k + (warp_id << 7) + 64 + tid1] = val[k + tmem[(warp_id << 7) + 64 + tid1]];
		if ((warp_id << 7) + 96 + tid1 < seg_size) valB[k + (warp_id << 7) + 96 + tid1] = val[k + tmem[(warp_id << 7) + 96 + tid1]];
	}
}

// 256 threads per block | 8 ppt | strided
template<class K, class T>
__global__
void my_blk256_ppt8_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[2048];
	__shared__ int tmem[2048];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 255) / 256);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<8)+0	<seg_size)?key[k+tid1+(warp_id<<8)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<8)+32	<seg_size)?key[k+tid1+(warp_id<<8)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<8)+64	<seg_size)?key[k+tid1+(warp_id<<8)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<8)+96	<seg_size)?key[k+tid1+(warp_id<<8)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<8)+128	<seg_size)?key[k+tid1+(warp_id<<8)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<8)+160	<seg_size)?key[k+tid1+(warp_id<<8)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<8)+192	<seg_size)?key[k+tid1+(warp_id<<8)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<8)+224	<seg_size)?key[k+tid1+(warp_id<<8)+224	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<8)+0	<seg_size) rg_v0  = tid1+(warp_id<<8)+0	;
			if (tid1+(warp_id<<8)+32	<seg_size) rg_v1  = tid1+(warp_id<<8)+32	;
			if (tid1+(warp_id<<8)+64	<seg_size) rg_v2  = tid1+(warp_id<<8)+64	;
			if (tid1+(warp_id<<8)+96	<seg_size) rg_v3  = tid1+(warp_id<<8)+96	;
			if (tid1+(warp_id<<8)+128	<seg_size) rg_v4  = tid1+(warp_id<<8)+128	;
			if (tid1+(warp_id<<8)+160	<seg_size) rg_v5  = tid1+(warp_id<<8)+160	;
			if (tid1+(warp_id<<8)+192	<seg_size) rg_v6  = tid1+(warp_id<<8)+192	;
			if (tid1+(warp_id<<8)+224	<seg_size) rg_v7  = tid1+(warp_id<<8)+224	;

			// sort 256 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);

			// Store register results to shared memory
			smem[(warp_id<<8) + (tid1<<3) + 0] = rg_k0;
			smem[(warp_id<<8) + (tid1<<3) + 1] = rg_k1;
			smem[(warp_id<<8) + (tid1<<3) + 2] = rg_k2;
			smem[(warp_id<<8) + (tid1<<3) + 3] = rg_k3;
			smem[(warp_id<<8) + (tid1<<3) + 4] = rg_k4;
			smem[(warp_id<<8) + (tid1<<3) + 5] = rg_k5;
			smem[(warp_id<<8) + (tid1<<3) + 6] = rg_k6;
			smem[(warp_id<<8) + (tid1<<3) + 7] = rg_k7;
			tmem[(warp_id<<8) + (tid1<<3) + 0] = rg_v0;
			tmem[(warp_id<<8) + (tid1<<3) + 1] = rg_v1;
			tmem[(warp_id<<8) + (tid1<<3) + 2] = rg_v2;
			tmem[(warp_id<<8) + (tid1<<3) + 3] = rg_v3;
			tmem[(warp_id<<8) + (tid1<<3) + 4] = rg_v4;
			tmem[(warp_id<<8) + (tid1<<3) + 5] = rg_v5;
			tmem[(warp_id<<8) + (tid1<<3) + 6] = rg_v6;
			tmem[(warp_id<<8) + (tid1<<3) + 7] = rg_v7;
		}
		__syncthreads();

		// Merge in 3 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 256;
			rhs_len = 256;
			gran = tid1<<3;
			gran += (warp_id & 1) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 512;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 3) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 1024;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 7) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		if ((warp_id << 8) + 0 + tid1 < seg_size) keyB[k + (warp_id << 8) + 0 + tid1] = smem[(warp_id << 8) + 0 + tid1];
		if ((warp_id << 8) + 32 + tid1 < seg_size) keyB[k + (warp_id << 8) + 32 + tid1] = smem[(warp_id << 8) + 32 + tid1];
		if ((warp_id << 8) + 64 + tid1 < seg_size) keyB[k + (warp_id << 8) + 64 + tid1] = smem[(warp_id << 8) + 64 + tid1];
		if ((warp_id << 8) + 96 + tid1 < seg_size) keyB[k + (warp_id << 8) + 96 + tid1] = smem[(warp_id << 8) + 96 + tid1];
		if ((warp_id << 8) + 128 + tid1 < seg_size) keyB[k + (warp_id << 8) + 128 + tid1] = smem[(warp_id << 8) + 128 + tid1];
		if ((warp_id << 8) + 160 + tid1 < seg_size) keyB[k + (warp_id << 8) + 160 + tid1] = smem[(warp_id << 8) + 160 + tid1];
		if ((warp_id << 8) + 192 + tid1 < seg_size) keyB[k + (warp_id << 8) + 192 + tid1] = smem[(warp_id << 8) + 192 + tid1];
		if ((warp_id << 8) + 224 + tid1 < seg_size) keyB[k + (warp_id << 8) + 224 + tid1] = smem[(warp_id << 8) + 224 + tid1];

		if ((warp_id << 8) + 0 + tid1 < seg_size) valB[k + (warp_id << 8) + 0 + tid1] = val[k + tmem[(warp_id << 8) + 0 + tid1]];
		if ((warp_id << 8) + 32 + tid1 < seg_size) valB[k + (warp_id << 8) + 32 + tid1] = val[k + tmem[(warp_id << 8) + 32 + tid1]];
		if ((warp_id << 8) + 64 + tid1 < seg_size) valB[k + (warp_id << 8) + 64 + tid1] = val[k + tmem[(warp_id << 8) + 64 + tid1]];
		if ((warp_id << 8) + 96 + tid1 < seg_size) valB[k + (warp_id << 8) + 96 + tid1] = val[k + tmem[(warp_id << 8) + 96 + tid1]];
		if ((warp_id << 8) + 128 + tid1 < seg_size) valB[k + (warp_id << 8) + 128 + tid1] = val[k + tmem[(warp_id << 8) + 128 + tid1]];
		if ((warp_id << 8) + 160 + tid1 < seg_size) valB[k + (warp_id << 8) + 160 + tid1] = val[k + tmem[(warp_id << 8) + 160 + tid1]];
		if ((warp_id << 8) + 192 + tid1 < seg_size) valB[k + (warp_id << 8) + 192 + tid1] = val[k + tmem[(warp_id << 8) + 192 + tid1]];
		if ((warp_id << 8) + 224 + tid1 < seg_size) valB[k + (warp_id << 8) + 224 + tid1] = val[k + tmem[(warp_id << 8) + 224 + tid1]];
	}
}

// 128 threads per block | 16 ppt | strided
template<class K, class T>
__global__
void my_blk128_ppt16_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[2048];
	__shared__ int tmem[2048];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 511) / 512);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<9)+0	<seg_size)?key[k+tid1+(warp_id<<9)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<9)+32	<seg_size)?key[k+tid1+(warp_id<<9)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<9)+64	<seg_size)?key[k+tid1+(warp_id<<9)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<9)+96	<seg_size)?key[k+tid1+(warp_id<<9)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<9)+128	<seg_size)?key[k+tid1+(warp_id<<9)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<9)+160	<seg_size)?key[k+tid1+(warp_id<<9)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<9)+192	<seg_size)?key[k+tid1+(warp_id<<9)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<9)+224	<seg_size)?key[k+tid1+(warp_id<<9)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<9)+256	<seg_size)?key[k+tid1+(warp_id<<9)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<9)+288	<seg_size)?key[k+tid1+(warp_id<<9)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<9)+320	<seg_size)?key[k+tid1+(warp_id<<9)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<9)+352	<seg_size)?key[k+tid1+(warp_id<<9)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<9)+384	<seg_size)?key[k+tid1+(warp_id<<9)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<9)+416	<seg_size)?key[k+tid1+(warp_id<<9)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<9)+448	<seg_size)?key[k+tid1+(warp_id<<9)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<9)+480	<seg_size)?key[k+tid1+(warp_id<<9)+480	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<9)+0	<seg_size) rg_v0  = tid1+(warp_id<<9)+0	;
			if (tid1+(warp_id<<9)+32	<seg_size) rg_v1  = tid1+(warp_id<<9)+32	;
			if (tid1+(warp_id<<9)+64	<seg_size) rg_v2  = tid1+(warp_id<<9)+64	;
			if (tid1+(warp_id<<9)+96	<seg_size) rg_v3  = tid1+(warp_id<<9)+96	;
			if (tid1+(warp_id<<9)+128	<seg_size) rg_v4  = tid1+(warp_id<<9)+128	;
			if (tid1+(warp_id<<9)+160	<seg_size) rg_v5  = tid1+(warp_id<<9)+160	;
			if (tid1+(warp_id<<9)+192	<seg_size) rg_v6  = tid1+(warp_id<<9)+192	;
			if (tid1+(warp_id<<9)+224	<seg_size) rg_v7  = tid1+(warp_id<<9)+224	;
			if (tid1+(warp_id<<9)+256	<seg_size) rg_v8  = tid1+(warp_id<<9)+256	;
			if (tid1+(warp_id<<9)+288	<seg_size) rg_v9  = tid1+(warp_id<<9)+288	;
			if (tid1+(warp_id<<9)+320	<seg_size) rg_v10  = tid1+(warp_id<<9)+320	;
			if (tid1+(warp_id<<9)+352	<seg_size) rg_v11  = tid1+(warp_id<<9)+352	;
			if (tid1+(warp_id<<9)+384	<seg_size) rg_v12  = tid1+(warp_id<<9)+384	;
			if (tid1+(warp_id<<9)+416	<seg_size) rg_v13  = tid1+(warp_id<<9)+416	;
			if (tid1+(warp_id<<9)+448	<seg_size) rg_v14  = tid1+(warp_id<<9)+448	;
			if (tid1+(warp_id<<9)+480	<seg_size) rg_v15  = tid1+(warp_id<<9)+480	;

			// sort 512 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);

			// Store register results to shared memory
			smem[(warp_id<<9) + (tid1<<4) + 0] = rg_k0;
			smem[(warp_id<<9) + (tid1<<4) + 1] = rg_k1;
			smem[(warp_id<<9) + (tid1<<4) + 2] = rg_k2;
			smem[(warp_id<<9) + (tid1<<4) + 3] = rg_k3;
			smem[(warp_id<<9) + (tid1<<4) + 4] = rg_k4;
			smem[(warp_id<<9) + (tid1<<4) + 5] = rg_k5;
			smem[(warp_id<<9) + (tid1<<4) + 6] = rg_k6;
			smem[(warp_id<<9) + (tid1<<4) + 7] = rg_k7;
			smem[(warp_id<<9) + (tid1<<4) + 8] = rg_k8;
			smem[(warp_id<<9) + (tid1<<4) + 9] = rg_k9;
			smem[(warp_id<<9) + (tid1<<4) + 10] = rg_k10;
			smem[(warp_id<<9) + (tid1<<4) + 11] = rg_k11;
			smem[(warp_id<<9) + (tid1<<4) + 12] = rg_k12;
			smem[(warp_id<<9) + (tid1<<4) + 13] = rg_k13;
			smem[(warp_id<<9) + (tid1<<4) + 14] = rg_k14;
			smem[(warp_id<<9) + (tid1<<4) + 15] = rg_k15;
			tmem[(warp_id<<9) + (tid1<<4) + 0] = rg_v0;
			tmem[(warp_id<<9) + (tid1<<4) + 1] = rg_v1;
			tmem[(warp_id<<9) + (tid1<<4) + 2] = rg_v2;
			tmem[(warp_id<<9) + (tid1<<4) + 3] = rg_v3;
			tmem[(warp_id<<9) + (tid1<<4) + 4] = rg_v4;
			tmem[(warp_id<<9) + (tid1<<4) + 5] = rg_v5;
			tmem[(warp_id<<9) + (tid1<<4) + 6] = rg_v6;
			tmem[(warp_id<<9) + (tid1<<4) + 7] = rg_v7;
			tmem[(warp_id<<9) + (tid1<<4) + 8] = rg_v8;
			tmem[(warp_id<<9) + (tid1<<4) + 9] = rg_v9;
			tmem[(warp_id<<9) + (tid1<<4) + 10] = rg_v10;
			tmem[(warp_id<<9) + (tid1<<4) + 11] = rg_v11;
			tmem[(warp_id<<9) + (tid1<<4) + 12] = rg_v12;
			tmem[(warp_id<<9) + (tid1<<4) + 13] = rg_v13;
			tmem[(warp_id<<9) + (tid1<<4) + 14] = rg_v14;
			tmem[(warp_id<<9) + (tid1<<4) + 15] = rg_v15;
		}
		__syncthreads();

		// Merge in 2 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 512;
			rhs_len = 512;
			gran = tid1<<4;
			gran += (warp_id & 1) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 1024;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 3) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		if ((warp_id << 9) + 0 + tid1 < seg_size) keyB[k + (warp_id << 9) + 0 + tid1] = smem[(warp_id << 9) + 0 + tid1];
		if ((warp_id << 9) + 32 + tid1 < seg_size) keyB[k + (warp_id << 9) + 32 + tid1] = smem[(warp_id << 9) + 32 + tid1];
		if ((warp_id << 9) + 64 + tid1 < seg_size) keyB[k + (warp_id << 9) + 64 + tid1] = smem[(warp_id << 9) + 64 + tid1];
		if ((warp_id << 9) + 96 + tid1 < seg_size) keyB[k + (warp_id << 9) + 96 + tid1] = smem[(warp_id << 9) + 96 + tid1];
		if ((warp_id << 9) + 128 + tid1 < seg_size) keyB[k + (warp_id << 9) + 128 + tid1] = smem[(warp_id << 9) + 128 + tid1];
		if ((warp_id << 9) + 160 + tid1 < seg_size) keyB[k + (warp_id << 9) + 160 + tid1] = smem[(warp_id << 9) + 160 + tid1];
		if ((warp_id << 9) + 192 + tid1 < seg_size) keyB[k + (warp_id << 9) + 192 + tid1] = smem[(warp_id << 9) + 192 + tid1];
		if ((warp_id << 9) + 224 + tid1 < seg_size) keyB[k + (warp_id << 9) + 224 + tid1] = smem[(warp_id << 9) + 224 + tid1];
		if ((warp_id << 9) + 256 + tid1 < seg_size) keyB[k + (warp_id << 9) + 256 + tid1] = smem[(warp_id << 9) + 256 + tid1];
		if ((warp_id << 9) + 288 + tid1 < seg_size) keyB[k + (warp_id << 9) + 288 + tid1] = smem[(warp_id << 9) + 288 + tid1];
		if ((warp_id << 9) + 320 + tid1 < seg_size) keyB[k + (warp_id << 9) + 320 + tid1] = smem[(warp_id << 9) + 320 + tid1];
		if ((warp_id << 9) + 352 + tid1 < seg_size) keyB[k + (warp_id << 9) + 352 + tid1] = smem[(warp_id << 9) + 352 + tid1];
		if ((warp_id << 9) + 384 + tid1 < seg_size) keyB[k + (warp_id << 9) + 384 + tid1] = smem[(warp_id << 9) + 384 + tid1];
		if ((warp_id << 9) + 416 + tid1 < seg_size) keyB[k + (warp_id << 9) + 416 + tid1] = smem[(warp_id << 9) + 416 + tid1];
		if ((warp_id << 9) + 448 + tid1 < seg_size) keyB[k + (warp_id << 9) + 448 + tid1] = smem[(warp_id << 9) + 448 + tid1];
		if ((warp_id << 9) + 480 + tid1 < seg_size) keyB[k + (warp_id << 9) + 480 + tid1] = smem[(warp_id << 9) + 480 + tid1];

		if ((warp_id << 9) + 0 + tid1 < seg_size) valB[k + (warp_id << 9) + 0 + tid1] = val[k + tmem[(warp_id << 9) + 0 + tid1]];
		if ((warp_id << 9) + 32 + tid1 < seg_size) valB[k + (warp_id << 9) + 32 + tid1] = val[k + tmem[(warp_id << 9) + 32 + tid1]];
		if ((warp_id << 9) + 64 + tid1 < seg_size) valB[k + (warp_id << 9) + 64 + tid1] = val[k + tmem[(warp_id << 9) + 64 + tid1]];
		if ((warp_id << 9) + 96 + tid1 < seg_size) valB[k + (warp_id << 9) + 96 + tid1] = val[k + tmem[(warp_id << 9) + 96 + tid1]];
		if ((warp_id << 9) + 128 + tid1 < seg_size) valB[k + (warp_id << 9) + 128 + tid1] = val[k + tmem[(warp_id << 9) + 128 + tid1]];
		if ((warp_id << 9) + 160 + tid1 < seg_size) valB[k + (warp_id << 9) + 160 + tid1] = val[k + tmem[(warp_id << 9) + 160 + tid1]];
		if ((warp_id << 9) + 192 + tid1 < seg_size) valB[k + (warp_id << 9) + 192 + tid1] = val[k + tmem[(warp_id << 9) + 192 + tid1]];
		if ((warp_id << 9) + 224 + tid1 < seg_size) valB[k + (warp_id << 9) + 224 + tid1] = val[k + tmem[(warp_id << 9) + 224 + tid1]];
		if ((warp_id << 9) + 256 + tid1 < seg_size) valB[k + (warp_id << 9) + 256 + tid1] = val[k + tmem[(warp_id << 9) + 256 + tid1]];
		if ((warp_id << 9) + 288 + tid1 < seg_size) valB[k + (warp_id << 9) + 288 + tid1] = val[k + tmem[(warp_id << 9) + 288 + tid1]];
		if ((warp_id << 9) + 320 + tid1 < seg_size) valB[k + (warp_id << 9) + 320 + tid1] = val[k + tmem[(warp_id << 9) + 320 + tid1]];
		if ((warp_id << 9) + 352 + tid1 < seg_size) valB[k + (warp_id << 9) + 352 + tid1] = val[k + tmem[(warp_id << 9) + 352 + tid1]];
		if ((warp_id << 9) + 384 + tid1 < seg_size) valB[k + (warp_id << 9) + 384 + tid1] = val[k + tmem[(warp_id << 9) + 384 + tid1]];
		if ((warp_id << 9) + 416 + tid1 < seg_size) valB[k + (warp_id << 9) + 416 + tid1] = val[k + tmem[(warp_id << 9) + 416 + tid1]];
		if ((warp_id << 9) + 448 + tid1 < seg_size) valB[k + (warp_id << 9) + 448 + tid1] = val[k + tmem[(warp_id << 9) + 448 + tid1]];
		if ((warp_id << 9) + 480 + tid1 < seg_size) valB[k + (warp_id << 9) + 480 + tid1] = val[k + tmem[(warp_id << 9) + 480 + tid1]];
	}
}

// 64 threads per block | 32 ppt | strided
template<class K, class T>
__global__
void my_blk64_ppt32_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[2048];
	__shared__ int tmem[2048];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	K rg_k16;
	K rg_k17;
	K rg_k18;
	K rg_k19;
	K rg_k20;
	K rg_k21;
	K rg_k22;
	K rg_k23;
	K rg_k24;
	K rg_k25;
	K rg_k26;
	K rg_k27;
	K rg_k28;
	K rg_k29;
	K rg_k30;
	K rg_k31;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int rg_v16;
	int rg_v17;
	int rg_v18;
	int rg_v19;
	int rg_v20;
	int rg_v21;
	int rg_v22;
	int rg_v23;
	int rg_v24;
	int rg_v25;
	int rg_v26;
	int rg_v27;
	int rg_v28;
	int rg_v29;
	int rg_v30;
	int rg_v31;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 1023) / 1024);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<10)+0	<seg_size)?key[k+tid1+(warp_id<<10)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<10)+32	<seg_size)?key[k+tid1+(warp_id<<10)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<10)+64	<seg_size)?key[k+tid1+(warp_id<<10)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<10)+96	<seg_size)?key[k+tid1+(warp_id<<10)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<10)+128	<seg_size)?key[k+tid1+(warp_id<<10)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<10)+160	<seg_size)?key[k+tid1+(warp_id<<10)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<10)+192	<seg_size)?key[k+tid1+(warp_id<<10)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<10)+224	<seg_size)?key[k+tid1+(warp_id<<10)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<10)+256	<seg_size)?key[k+tid1+(warp_id<<10)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<10)+288	<seg_size)?key[k+tid1+(warp_id<<10)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<10)+320	<seg_size)?key[k+tid1+(warp_id<<10)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<10)+352	<seg_size)?key[k+tid1+(warp_id<<10)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<10)+384	<seg_size)?key[k+tid1+(warp_id<<10)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<10)+416	<seg_size)?key[k+tid1+(warp_id<<10)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<10)+448	<seg_size)?key[k+tid1+(warp_id<<10)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<10)+480	<seg_size)?key[k+tid1+(warp_id<<10)+480	]:std::numeric_limits<K>::max();
			rg_k16  = (tid1+(warp_id<<10)+512	<seg_size)?key[k+tid1+(warp_id<<10)+512	]:std::numeric_limits<K>::max();
			rg_k17  = (tid1+(warp_id<<10)+544	<seg_size)?key[k+tid1+(warp_id<<10)+544	]:std::numeric_limits<K>::max();
			rg_k18  = (tid1+(warp_id<<10)+576	<seg_size)?key[k+tid1+(warp_id<<10)+576	]:std::numeric_limits<K>::max();
			rg_k19  = (tid1+(warp_id<<10)+608	<seg_size)?key[k+tid1+(warp_id<<10)+608	]:std::numeric_limits<K>::max();
			rg_k20  = (tid1+(warp_id<<10)+640	<seg_size)?key[k+tid1+(warp_id<<10)+640	]:std::numeric_limits<K>::max();
			rg_k21  = (tid1+(warp_id<<10)+672	<seg_size)?key[k+tid1+(warp_id<<10)+672	]:std::numeric_limits<K>::max();
			rg_k22  = (tid1+(warp_id<<10)+704	<seg_size)?key[k+tid1+(warp_id<<10)+704	]:std::numeric_limits<K>::max();
			rg_k23  = (tid1+(warp_id<<10)+736	<seg_size)?key[k+tid1+(warp_id<<10)+736	]:std::numeric_limits<K>::max();
			rg_k24  = (tid1+(warp_id<<10)+768	<seg_size)?key[k+tid1+(warp_id<<10)+768	]:std::numeric_limits<K>::max();
			rg_k25  = (tid1+(warp_id<<10)+800	<seg_size)?key[k+tid1+(warp_id<<10)+800	]:std::numeric_limits<K>::max();
			rg_k26  = (tid1+(warp_id<<10)+832	<seg_size)?key[k+tid1+(warp_id<<10)+832	]:std::numeric_limits<K>::max();
			rg_k27  = (tid1+(warp_id<<10)+864	<seg_size)?key[k+tid1+(warp_id<<10)+864	]:std::numeric_limits<K>::max();
			rg_k28  = (tid1+(warp_id<<10)+896	<seg_size)?key[k+tid1+(warp_id<<10)+896	]:std::numeric_limits<K>::max();
			rg_k29  = (tid1+(warp_id<<10)+928	<seg_size)?key[k+tid1+(warp_id<<10)+928	]:std::numeric_limits<K>::max();
			rg_k30  = (tid1+(warp_id<<10)+960	<seg_size)?key[k+tid1+(warp_id<<10)+960	]:std::numeric_limits<K>::max();
			rg_k31  = (tid1+(warp_id<<10)+992	<seg_size)?key[k+tid1+(warp_id<<10)+992	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<10)+0	<seg_size) rg_v0  = tid1+(warp_id<<10)+0	;
			if (tid1+(warp_id<<10)+32	<seg_size) rg_v1  = tid1+(warp_id<<10)+32	;
			if (tid1+(warp_id<<10)+64	<seg_size) rg_v2  = tid1+(warp_id<<10)+64	;
			if (tid1+(warp_id<<10)+96	<seg_size) rg_v3  = tid1+(warp_id<<10)+96	;
			if (tid1+(warp_id<<10)+128	<seg_size) rg_v4  = tid1+(warp_id<<10)+128	;
			if (tid1+(warp_id<<10)+160	<seg_size) rg_v5  = tid1+(warp_id<<10)+160	;
			if (tid1+(warp_id<<10)+192	<seg_size) rg_v6  = tid1+(warp_id<<10)+192	;
			if (tid1+(warp_id<<10)+224	<seg_size) rg_v7  = tid1+(warp_id<<10)+224	;
			if (tid1+(warp_id<<10)+256	<seg_size) rg_v8  = tid1+(warp_id<<10)+256	;
			if (tid1+(warp_id<<10)+288	<seg_size) rg_v9  = tid1+(warp_id<<10)+288	;
			if (tid1+(warp_id<<10)+320	<seg_size) rg_v10  = tid1+(warp_id<<10)+320	;
			if (tid1+(warp_id<<10)+352	<seg_size) rg_v11  = tid1+(warp_id<<10)+352	;
			if (tid1+(warp_id<<10)+384	<seg_size) rg_v12  = tid1+(warp_id<<10)+384	;
			if (tid1+(warp_id<<10)+416	<seg_size) rg_v13  = tid1+(warp_id<<10)+416	;
			if (tid1+(warp_id<<10)+448	<seg_size) rg_v14  = tid1+(warp_id<<10)+448	;
			if (tid1+(warp_id<<10)+480	<seg_size) rg_v15  = tid1+(warp_id<<10)+480	;
			if (tid1+(warp_id<<10)+512	<seg_size) rg_v16  = tid1+(warp_id<<10)+512	;
			if (tid1+(warp_id<<10)+544	<seg_size) rg_v17  = tid1+(warp_id<<10)+544	;
			if (tid1+(warp_id<<10)+576	<seg_size) rg_v18  = tid1+(warp_id<<10)+576	;
			if (tid1+(warp_id<<10)+608	<seg_size) rg_v19  = tid1+(warp_id<<10)+608	;
			if (tid1+(warp_id<<10)+640	<seg_size) rg_v20  = tid1+(warp_id<<10)+640	;
			if (tid1+(warp_id<<10)+672	<seg_size) rg_v21  = tid1+(warp_id<<10)+672	;
			if (tid1+(warp_id<<10)+704	<seg_size) rg_v22  = tid1+(warp_id<<10)+704	;
			if (tid1+(warp_id<<10)+736	<seg_size) rg_v23  = tid1+(warp_id<<10)+736	;
			if (tid1+(warp_id<<10)+768	<seg_size) rg_v24  = tid1+(warp_id<<10)+768	;
			if (tid1+(warp_id<<10)+800	<seg_size) rg_v25  = tid1+(warp_id<<10)+800	;
			if (tid1+(warp_id<<10)+832	<seg_size) rg_v26  = tid1+(warp_id<<10)+832	;
			if (tid1+(warp_id<<10)+864	<seg_size) rg_v27  = tid1+(warp_id<<10)+864	;
			if (tid1+(warp_id<<10)+896	<seg_size) rg_v28  = tid1+(warp_id<<10)+896	;
			if (tid1+(warp_id<<10)+928	<seg_size) rg_v29  = tid1+(warp_id<<10)+928	;
			if (tid1+(warp_id<<10)+960	<seg_size) rg_v30  = tid1+(warp_id<<10)+960	;
			if (tid1+(warp_id<<10)+992	<seg_size) rg_v31  = tid1+(warp_id<<10)+992	;

			// sort 1024 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			CMP_SWP(K, rg_k16, rg_k19, int, rg_v16, rg_v19);
			CMP_SWP(K, rg_k17, rg_k18, int, rg_v17, rg_v18);
			CMP_SWP(K, rg_k20, rg_k23, int, rg_v20, rg_v23);
			CMP_SWP(K, rg_k21, rg_k22, int, rg_v21, rg_v22);
			CMP_SWP(K, rg_k24, rg_k27, int, rg_v24, rg_v27);
			CMP_SWP(K, rg_k25, rg_k26, int, rg_v25, rg_v26);
			CMP_SWP(K, rg_k28, rg_k31, int, rg_v28, rg_v31);
			CMP_SWP(K, rg_k29, rg_k30, int, rg_v29, rg_v30);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			CMP_SWP(K, rg_k16, rg_k23, int, rg_v16, rg_v23);
			CMP_SWP(K, rg_k17, rg_k22, int, rg_v17, rg_v22);
			CMP_SWP(K, rg_k18, rg_k21, int, rg_v18, rg_v21);
			CMP_SWP(K, rg_k19, rg_k20, int, rg_v19, rg_v20);
			CMP_SWP(K, rg_k24, rg_k31, int, rg_v24, rg_v31);
			CMP_SWP(K, rg_k25, rg_k30, int, rg_v25, rg_v30);
			CMP_SWP(K, rg_k26, rg_k29, int, rg_v26, rg_v29);
			CMP_SWP(K, rg_k27, rg_k28, int, rg_v27, rg_v28);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			CMP_SWP(K, rg_k16, rg_k31, int, rg_v16, rg_v31);
			CMP_SWP(K, rg_k17, rg_k30, int, rg_v17, rg_v30);
			CMP_SWP(K, rg_k18, rg_k29, int, rg_v18, rg_v29);
			CMP_SWP(K, rg_k19, rg_k28, int, rg_v19, rg_v28);
			CMP_SWP(K, rg_k20, rg_k27, int, rg_v20, rg_v27);
			CMP_SWP(K, rg_k21, rg_k26, int, rg_v21, rg_v26);
			CMP_SWP(K, rg_k22, rg_k25, int, rg_v22, rg_v25);
			CMP_SWP(K, rg_k23, rg_k24, int, rg_v23, rg_v24);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k31, int, rg_v0, rg_v31);
			CMP_SWP(K, rg_k1, rg_k30, int, rg_v1, rg_v30);
			CMP_SWP(K, rg_k2, rg_k29, int, rg_v2, rg_v29);
			CMP_SWP(K, rg_k3, rg_k28, int, rg_v3, rg_v28);
			CMP_SWP(K, rg_k4, rg_k27, int, rg_v4, rg_v27);
			CMP_SWP(K, rg_k5, rg_k26, int, rg_v5, rg_v26);
			CMP_SWP(K, rg_k6, rg_k25, int, rg_v6, rg_v25);
			CMP_SWP(K, rg_k7, rg_k24, int, rg_v7, rg_v24);
			CMP_SWP(K, rg_k8, rg_k23, int, rg_v8, rg_v23);
			CMP_SWP(K, rg_k9, rg_k22, int, rg_v9, rg_v22);
			CMP_SWP(K, rg_k10, rg_k21, int, rg_v10, rg_v21);
			CMP_SWP(K, rg_k11, rg_k20, int, rg_v11, rg_v20);
			CMP_SWP(K, rg_k12, rg_k19, int, rg_v12, rg_v19);
			CMP_SWP(K, rg_k13, rg_k18, int, rg_v13, rg_v18);
			CMP_SWP(K, rg_k14, rg_k17, int, rg_v14, rg_v17);
			CMP_SWP(K, rg_k15, rg_k16, int, rg_v15, rg_v16);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);

			// Store register results to shared memory
			smem[(warp_id<<10) + (tid1<<5) + 0] = rg_k0;
			smem[(warp_id<<10) + (tid1<<5) + 1] = rg_k1;
			smem[(warp_id<<10) + (tid1<<5) + 2] = rg_k2;
			smem[(warp_id<<10) + (tid1<<5) + 3] = rg_k3;
			smem[(warp_id<<10) + (tid1<<5) + 4] = rg_k4;
			smem[(warp_id<<10) + (tid1<<5) + 5] = rg_k5;
			smem[(warp_id<<10) + (tid1<<5) + 6] = rg_k6;
			smem[(warp_id<<10) + (tid1<<5) + 7] = rg_k7;
			smem[(warp_id<<10) + (tid1<<5) + 8] = rg_k8;
			smem[(warp_id<<10) + (tid1<<5) + 9] = rg_k9;
			smem[(warp_id<<10) + (tid1<<5) + 10] = rg_k10;
			smem[(warp_id<<10) + (tid1<<5) + 11] = rg_k11;
			smem[(warp_id<<10) + (tid1<<5) + 12] = rg_k12;
			smem[(warp_id<<10) + (tid1<<5) + 13] = rg_k13;
			smem[(warp_id<<10) + (tid1<<5) + 14] = rg_k14;
			smem[(warp_id<<10) + (tid1<<5) + 15] = rg_k15;
			smem[(warp_id<<10) + (tid1<<5) + 16] = rg_k16;
			smem[(warp_id<<10) + (tid1<<5) + 17] = rg_k17;
			smem[(warp_id<<10) + (tid1<<5) + 18] = rg_k18;
			smem[(warp_id<<10) + (tid1<<5) + 19] = rg_k19;
			smem[(warp_id<<10) + (tid1<<5) + 20] = rg_k20;
			smem[(warp_id<<10) + (tid1<<5) + 21] = rg_k21;
			smem[(warp_id<<10) + (tid1<<5) + 22] = rg_k22;
			smem[(warp_id<<10) + (tid1<<5) + 23] = rg_k23;
			smem[(warp_id<<10) + (tid1<<5) + 24] = rg_k24;
			smem[(warp_id<<10) + (tid1<<5) + 25] = rg_k25;
			smem[(warp_id<<10) + (tid1<<5) + 26] = rg_k26;
			smem[(warp_id<<10) + (tid1<<5) + 27] = rg_k27;
			smem[(warp_id<<10) + (tid1<<5) + 28] = rg_k28;
			smem[(warp_id<<10) + (tid1<<5) + 29] = rg_k29;
			smem[(warp_id<<10) + (tid1<<5) + 30] = rg_k30;
			smem[(warp_id<<10) + (tid1<<5) + 31] = rg_k31;
			tmem[(warp_id<<10) + (tid1<<5) + 0] = rg_v0;
			tmem[(warp_id<<10) + (tid1<<5) + 1] = rg_v1;
			tmem[(warp_id<<10) + (tid1<<5) + 2] = rg_v2;
			tmem[(warp_id<<10) + (tid1<<5) + 3] = rg_v3;
			tmem[(warp_id<<10) + (tid1<<5) + 4] = rg_v4;
			tmem[(warp_id<<10) + (tid1<<5) + 5] = rg_v5;
			tmem[(warp_id<<10) + (tid1<<5) + 6] = rg_v6;
			tmem[(warp_id<<10) + (tid1<<5) + 7] = rg_v7;
			tmem[(warp_id<<10) + (tid1<<5) + 8] = rg_v8;
			tmem[(warp_id<<10) + (tid1<<5) + 9] = rg_v9;
			tmem[(warp_id<<10) + (tid1<<5) + 10] = rg_v10;
			tmem[(warp_id<<10) + (tid1<<5) + 11] = rg_v11;
			tmem[(warp_id<<10) + (tid1<<5) + 12] = rg_v12;
			tmem[(warp_id<<10) + (tid1<<5) + 13] = rg_v13;
			tmem[(warp_id<<10) + (tid1<<5) + 14] = rg_v14;
			tmem[(warp_id<<10) + (tid1<<5) + 15] = rg_v15;
			tmem[(warp_id<<10) + (tid1<<5) + 16] = rg_v16;
			tmem[(warp_id<<10) + (tid1<<5) + 17] = rg_v17;
			tmem[(warp_id<<10) + (tid1<<5) + 18] = rg_v18;
			tmem[(warp_id<<10) + (tid1<<5) + 19] = rg_v19;
			tmem[(warp_id<<10) + (tid1<<5) + 20] = rg_v20;
			tmem[(warp_id<<10) + (tid1<<5) + 21] = rg_v21;
			tmem[(warp_id<<10) + (tid1<<5) + 22] = rg_v22;
			tmem[(warp_id<<10) + (tid1<<5) + 23] = rg_v23;
			tmem[(warp_id<<10) + (tid1<<5) + 24] = rg_v24;
			tmem[(warp_id<<10) + (tid1<<5) + 25] = rg_v25;
			tmem[(warp_id<<10) + (tid1<<5) + 26] = rg_v26;
			tmem[(warp_id<<10) + (tid1<<5) + 27] = rg_v27;
			tmem[(warp_id<<10) + (tid1<<5) + 28] = rg_v28;
			tmem[(warp_id<<10) + (tid1<<5) + 29] = rg_v29;
			tmem[(warp_id<<10) + (tid1<<5) + 30] = rg_v30;
			tmem[(warp_id<<10) + (tid1<<5) + 31] = rg_v31;
		}
		__syncthreads();

		// Merge in 1 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 1024;
			rhs_len = 1024;
			gran = tid1<<5;
			gran += (warp_id & 1) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		if ((warp_id << 10) + 0 + tid1 < seg_size) keyB[k + (warp_id << 10) + 0 + tid1] = smem[(warp_id << 10) + 0 + tid1];
		if ((warp_id << 10) + 32 + tid1 < seg_size) keyB[k + (warp_id << 10) + 32 + tid1] = smem[(warp_id << 10) + 32 + tid1];
		if ((warp_id << 10) + 64 + tid1 < seg_size) keyB[k + (warp_id << 10) + 64 + tid1] = smem[(warp_id << 10) + 64 + tid1];
		if ((warp_id << 10) + 96 + tid1 < seg_size) keyB[k + (warp_id << 10) + 96 + tid1] = smem[(warp_id << 10) + 96 + tid1];
		if ((warp_id << 10) + 128 + tid1 < seg_size) keyB[k + (warp_id << 10) + 128 + tid1] = smem[(warp_id << 10) + 128 + tid1];
		if ((warp_id << 10) + 160 + tid1 < seg_size) keyB[k + (warp_id << 10) + 160 + tid1] = smem[(warp_id << 10) + 160 + tid1];
		if ((warp_id << 10) + 192 + tid1 < seg_size) keyB[k + (warp_id << 10) + 192 + tid1] = smem[(warp_id << 10) + 192 + tid1];
		if ((warp_id << 10) + 224 + tid1 < seg_size) keyB[k + (warp_id << 10) + 224 + tid1] = smem[(warp_id << 10) + 224 + tid1];
		if ((warp_id << 10) + 256 + tid1 < seg_size) keyB[k + (warp_id << 10) + 256 + tid1] = smem[(warp_id << 10) + 256 + tid1];
		if ((warp_id << 10) + 288 + tid1 < seg_size) keyB[k + (warp_id << 10) + 288 + tid1] = smem[(warp_id << 10) + 288 + tid1];
		if ((warp_id << 10) + 320 + tid1 < seg_size) keyB[k + (warp_id << 10) + 320 + tid1] = smem[(warp_id << 10) + 320 + tid1];
		if ((warp_id << 10) + 352 + tid1 < seg_size) keyB[k + (warp_id << 10) + 352 + tid1] = smem[(warp_id << 10) + 352 + tid1];
		if ((warp_id << 10) + 384 + tid1 < seg_size) keyB[k + (warp_id << 10) + 384 + tid1] = smem[(warp_id << 10) + 384 + tid1];
		if ((warp_id << 10) + 416 + tid1 < seg_size) keyB[k + (warp_id << 10) + 416 + tid1] = smem[(warp_id << 10) + 416 + tid1];
		if ((warp_id << 10) + 448 + tid1 < seg_size) keyB[k + (warp_id << 10) + 448 + tid1] = smem[(warp_id << 10) + 448 + tid1];
		if ((warp_id << 10) + 480 + tid1 < seg_size) keyB[k + (warp_id << 10) + 480 + tid1] = smem[(warp_id << 10) + 480 + tid1];
		if ((warp_id << 10) + 512 + tid1 < seg_size) keyB[k + (warp_id << 10) + 512 + tid1] = smem[(warp_id << 10) + 512 + tid1];
		if ((warp_id << 10) + 544 + tid1 < seg_size) keyB[k + (warp_id << 10) + 544 + tid1] = smem[(warp_id << 10) + 544 + tid1];
		if ((warp_id << 10) + 576 + tid1 < seg_size) keyB[k + (warp_id << 10) + 576 + tid1] = smem[(warp_id << 10) + 576 + tid1];
		if ((warp_id << 10) + 608 + tid1 < seg_size) keyB[k + (warp_id << 10) + 608 + tid1] = smem[(warp_id << 10) + 608 + tid1];
		if ((warp_id << 10) + 640 + tid1 < seg_size) keyB[k + (warp_id << 10) + 640 + tid1] = smem[(warp_id << 10) + 640 + tid1];
		if ((warp_id << 10) + 672 + tid1 < seg_size) keyB[k + (warp_id << 10) + 672 + tid1] = smem[(warp_id << 10) + 672 + tid1];
		if ((warp_id << 10) + 704 + tid1 < seg_size) keyB[k + (warp_id << 10) + 704 + tid1] = smem[(warp_id << 10) + 704 + tid1];
		if ((warp_id << 10) + 736 + tid1 < seg_size) keyB[k + (warp_id << 10) + 736 + tid1] = smem[(warp_id << 10) + 736 + tid1];
		if ((warp_id << 10) + 768 + tid1 < seg_size) keyB[k + (warp_id << 10) + 768 + tid1] = smem[(warp_id << 10) + 768 + tid1];
		if ((warp_id << 10) + 800 + tid1 < seg_size) keyB[k + (warp_id << 10) + 800 + tid1] = smem[(warp_id << 10) + 800 + tid1];
		if ((warp_id << 10) + 832 + tid1 < seg_size) keyB[k + (warp_id << 10) + 832 + tid1] = smem[(warp_id << 10) + 832 + tid1];
		if ((warp_id << 10) + 864 + tid1 < seg_size) keyB[k + (warp_id << 10) + 864 + tid1] = smem[(warp_id << 10) + 864 + tid1];
		if ((warp_id << 10) + 896 + tid1 < seg_size) keyB[k + (warp_id << 10) + 896 + tid1] = smem[(warp_id << 10) + 896 + tid1];
		if ((warp_id << 10) + 928 + tid1 < seg_size) keyB[k + (warp_id << 10) + 928 + tid1] = smem[(warp_id << 10) + 928 + tid1];
		if ((warp_id << 10) + 960 + tid1 < seg_size) keyB[k + (warp_id << 10) + 960 + tid1] = smem[(warp_id << 10) + 960 + tid1];
		if ((warp_id << 10) + 992 + tid1 < seg_size) keyB[k + (warp_id << 10) + 992 + tid1] = smem[(warp_id << 10) + 992 + tid1];

		if ((warp_id << 10) + 0 + tid1 < seg_size) valB[k + (warp_id << 10) + 0 + tid1] = val[k + tmem[(warp_id << 10) + 0 + tid1]];
		if ((warp_id << 10) + 32 + tid1 < seg_size) valB[k + (warp_id << 10) + 32 + tid1] = val[k + tmem[(warp_id << 10) + 32 + tid1]];
		if ((warp_id << 10) + 64 + tid1 < seg_size) valB[k + (warp_id << 10) + 64 + tid1] = val[k + tmem[(warp_id << 10) + 64 + tid1]];
		if ((warp_id << 10) + 96 + tid1 < seg_size) valB[k + (warp_id << 10) + 96 + tid1] = val[k + tmem[(warp_id << 10) + 96 + tid1]];
		if ((warp_id << 10) + 128 + tid1 < seg_size) valB[k + (warp_id << 10) + 128 + tid1] = val[k + tmem[(warp_id << 10) + 128 + tid1]];
		if ((warp_id << 10) + 160 + tid1 < seg_size) valB[k + (warp_id << 10) + 160 + tid1] = val[k + tmem[(warp_id << 10) + 160 + tid1]];
		if ((warp_id << 10) + 192 + tid1 < seg_size) valB[k + (warp_id << 10) + 192 + tid1] = val[k + tmem[(warp_id << 10) + 192 + tid1]];
		if ((warp_id << 10) + 224 + tid1 < seg_size) valB[k + (warp_id << 10) + 224 + tid1] = val[k + tmem[(warp_id << 10) + 224 + tid1]];
		if ((warp_id << 10) + 256 + tid1 < seg_size) valB[k + (warp_id << 10) + 256 + tid1] = val[k + tmem[(warp_id << 10) + 256 + tid1]];
		if ((warp_id << 10) + 288 + tid1 < seg_size) valB[k + (warp_id << 10) + 288 + tid1] = val[k + tmem[(warp_id << 10) + 288 + tid1]];
		if ((warp_id << 10) + 320 + tid1 < seg_size) valB[k + (warp_id << 10) + 320 + tid1] = val[k + tmem[(warp_id << 10) + 320 + tid1]];
		if ((warp_id << 10) + 352 + tid1 < seg_size) valB[k + (warp_id << 10) + 352 + tid1] = val[k + tmem[(warp_id << 10) + 352 + tid1]];
		if ((warp_id << 10) + 384 + tid1 < seg_size) valB[k + (warp_id << 10) + 384 + tid1] = val[k + tmem[(warp_id << 10) + 384 + tid1]];
		if ((warp_id << 10) + 416 + tid1 < seg_size) valB[k + (warp_id << 10) + 416 + tid1] = val[k + tmem[(warp_id << 10) + 416 + tid1]];
		if ((warp_id << 10) + 448 + tid1 < seg_size) valB[k + (warp_id << 10) + 448 + tid1] = val[k + tmem[(warp_id << 10) + 448 + tid1]];
		if ((warp_id << 10) + 480 + tid1 < seg_size) valB[k + (warp_id << 10) + 480 + tid1] = val[k + tmem[(warp_id << 10) + 480 + tid1]];
		if ((warp_id << 10) + 512 + tid1 < seg_size) valB[k + (warp_id << 10) + 512 + tid1] = val[k + tmem[(warp_id << 10) + 512 + tid1]];
		if ((warp_id << 10) + 544 + tid1 < seg_size) valB[k + (warp_id << 10) + 544 + tid1] = val[k + tmem[(warp_id << 10) + 544 + tid1]];
		if ((warp_id << 10) + 576 + tid1 < seg_size) valB[k + (warp_id << 10) + 576 + tid1] = val[k + tmem[(warp_id << 10) + 576 + tid1]];
		if ((warp_id << 10) + 608 + tid1 < seg_size) valB[k + (warp_id << 10) + 608 + tid1] = val[k + tmem[(warp_id << 10) + 608 + tid1]];
		if ((warp_id << 10) + 640 + tid1 < seg_size) valB[k + (warp_id << 10) + 640 + tid1] = val[k + tmem[(warp_id << 10) + 640 + tid1]];
		if ((warp_id << 10) + 672 + tid1 < seg_size) valB[k + (warp_id << 10) + 672 + tid1] = val[k + tmem[(warp_id << 10) + 672 + tid1]];
		if ((warp_id << 10) + 704 + tid1 < seg_size) valB[k + (warp_id << 10) + 704 + tid1] = val[k + tmem[(warp_id << 10) + 704 + tid1]];
		if ((warp_id << 10) + 736 + tid1 < seg_size) valB[k + (warp_id << 10) + 736 + tid1] = val[k + tmem[(warp_id << 10) + 736 + tid1]];
		if ((warp_id << 10) + 768 + tid1 < seg_size) valB[k + (warp_id << 10) + 768 + tid1] = val[k + tmem[(warp_id << 10) + 768 + tid1]];
		if ((warp_id << 10) + 800 + tid1 < seg_size) valB[k + (warp_id << 10) + 800 + tid1] = val[k + tmem[(warp_id << 10) + 800 + tid1]];
		if ((warp_id << 10) + 832 + tid1 < seg_size) valB[k + (warp_id << 10) + 832 + tid1] = val[k + tmem[(warp_id << 10) + 832 + tid1]];
		if ((warp_id << 10) + 864 + tid1 < seg_size) valB[k + (warp_id << 10) + 864 + tid1] = val[k + tmem[(warp_id << 10) + 864 + tid1]];
		if ((warp_id << 10) + 896 + tid1 < seg_size) valB[k + (warp_id << 10) + 896 + tid1] = val[k + tmem[(warp_id << 10) + 896 + tid1]];
		if ((warp_id << 10) + 928 + tid1 < seg_size) valB[k + (warp_id << 10) + 928 + tid1] = val[k + tmem[(warp_id << 10) + 928 + tid1]];
		if ((warp_id << 10) + 960 + tid1 < seg_size) valB[k + (warp_id << 10) + 960 + tid1] = val[k + tmem[(warp_id << 10) + 960 + tid1]];
		if ((warp_id << 10) + 992 + tid1 < seg_size) valB[k + (warp_id << 10) + 992 + tid1] = val[k + tmem[(warp_id << 10) + 992 + tid1]];
	}
}

// segsize 4096

// 1024 threads per block | 4 ppt | strided
template<class K, class T>
__global__
void my_blk1024_ppt4_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[4096];
	__shared__ int tmem[4096];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 127) / 128);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<7)+0	<seg_size)?key[k+tid1+(warp_id<<7)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<7)+32	<seg_size)?key[k+tid1+(warp_id<<7)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<7)+64	<seg_size)?key[k+tid1+(warp_id<<7)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<7)+96	<seg_size)?key[k+tid1+(warp_id<<7)+96	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<7)+0	<seg_size) rg_v0  = tid1+(warp_id<<7)+0	;
			if (tid1+(warp_id<<7)+32	<seg_size) rg_v1  = tid1+(warp_id<<7)+32	;
			if (tid1+(warp_id<<7)+64	<seg_size) rg_v2  = tid1+(warp_id<<7)+64	;
			if (tid1+(warp_id<<7)+96	<seg_size) rg_v3  = tid1+(warp_id<<7)+96	;

			// sort 128 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_v0, rg_v1, rg_v2, rg_v3, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);

			// Store register results to shared memory
			smem[(warp_id<<7) + (tid1<<2) + 0] = rg_k0;
			smem[(warp_id<<7) + (tid1<<2) + 1] = rg_k1;
			smem[(warp_id<<7) + (tid1<<2) + 2] = rg_k2;
			smem[(warp_id<<7) + (tid1<<2) + 3] = rg_k3;
			tmem[(warp_id<<7) + (tid1<<2) + 0] = rg_v0;
			tmem[(warp_id<<7) + (tid1<<2) + 1] = rg_v1;
			tmem[(warp_id<<7) + (tid1<<2) + 2] = rg_v2;
			tmem[(warp_id<<7) + (tid1<<2) + 3] = rg_v3;
		}
		__syncthreads();

		// Merge in 5 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 128;
			rhs_len = 128;
			gran = tid1<<2;
			gran += (warp_id & 1) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 256;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 3) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 512;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 7) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 1024;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 15) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		// Step 4
		grp_start_wp_id = ((warp_id>>5)<<5);
		if(grp_start_wp_id + (1 << 4) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 128;
			lhs_len = 2048;
			rhs_len = 128 * (1 +
				(grp_start_wp_id + 17 < full_wp) +
				(grp_start_wp_id + 18 < full_wp) +
				(grp_start_wp_id + 19 < full_wp) +
				(grp_start_wp_id + 20 < full_wp) +
				(grp_start_wp_id + 21 < full_wp) +
				(grp_start_wp_id + 22 < full_wp) +
				(grp_start_wp_id + 23 < full_wp) +
				(grp_start_wp_id + 24 < full_wp) +
				(grp_start_wp_id + 25 < full_wp) +
				(grp_start_wp_id + 26 < full_wp) +
				(grp_start_wp_id + 27 < full_wp) +
				(grp_start_wp_id + 28 < full_wp) +
				(grp_start_wp_id + 29 < full_wp) +
				(grp_start_wp_id + 30 < full_wp) +
				(grp_start_wp_id + 31 < full_wp) );
			gran = tid1<<2;
			gran += (warp_id & 31) * 128;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 4) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
		}
		__syncthreads();

		if ((warp_id << 7) + 0 + tid1 < seg_size) keyB[k + (warp_id << 7) + 0 + tid1] = smem[(warp_id << 7) + 0 + tid1];
		if ((warp_id << 7) + 32 + tid1 < seg_size) keyB[k + (warp_id << 7) + 32 + tid1] = smem[(warp_id << 7) + 32 + tid1];
		if ((warp_id << 7) + 64 + tid1 < seg_size) keyB[k + (warp_id << 7) + 64 + tid1] = smem[(warp_id << 7) + 64 + tid1];
		if ((warp_id << 7) + 96 + tid1 < seg_size) keyB[k + (warp_id << 7) + 96 + tid1] = smem[(warp_id << 7) + 96 + tid1];

		if ((warp_id << 7) + 0 + tid1 < seg_size) valB[k + (warp_id << 7) + 0 + tid1] = val[k + tmem[(warp_id << 7) + 0 + tid1]];
		if ((warp_id << 7) + 32 + tid1 < seg_size) valB[k + (warp_id << 7) + 32 + tid1] = val[k + tmem[(warp_id << 7) + 32 + tid1]];
		if ((warp_id << 7) + 64 + tid1 < seg_size) valB[k + (warp_id << 7) + 64 + tid1] = val[k + tmem[(warp_id << 7) + 64 + tid1]];
		if ((warp_id << 7) + 96 + tid1 < seg_size) valB[k + (warp_id << 7) + 96 + tid1] = val[k + tmem[(warp_id << 7) + 96 + tid1]];
	}
}

// 512 threads per block | 8 ppt | strided
template<class K, class T>
__global__
void my_blk512_ppt8_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[4096];
	__shared__ int tmem[4096];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 255) / 256);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<8)+0	<seg_size)?key[k+tid1+(warp_id<<8)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<8)+32	<seg_size)?key[k+tid1+(warp_id<<8)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<8)+64	<seg_size)?key[k+tid1+(warp_id<<8)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<8)+96	<seg_size)?key[k+tid1+(warp_id<<8)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<8)+128	<seg_size)?key[k+tid1+(warp_id<<8)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<8)+160	<seg_size)?key[k+tid1+(warp_id<<8)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<8)+192	<seg_size)?key[k+tid1+(warp_id<<8)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<8)+224	<seg_size)?key[k+tid1+(warp_id<<8)+224	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<8)+0	<seg_size) rg_v0  = tid1+(warp_id<<8)+0	;
			if (tid1+(warp_id<<8)+32	<seg_size) rg_v1  = tid1+(warp_id<<8)+32	;
			if (tid1+(warp_id<<8)+64	<seg_size) rg_v2  = tid1+(warp_id<<8)+64	;
			if (tid1+(warp_id<<8)+96	<seg_size) rg_v3  = tid1+(warp_id<<8)+96	;
			if (tid1+(warp_id<<8)+128	<seg_size) rg_v4  = tid1+(warp_id<<8)+128	;
			if (tid1+(warp_id<<8)+160	<seg_size) rg_v5  = tid1+(warp_id<<8)+160	;
			if (tid1+(warp_id<<8)+192	<seg_size) rg_v6  = tid1+(warp_id<<8)+192	;
			if (tid1+(warp_id<<8)+224	<seg_size) rg_v7  = tid1+(warp_id<<8)+224	;

			// sort 256 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);

			// Store register results to shared memory
			smem[(warp_id<<8) + (tid1<<3) + 0] = rg_k0;
			smem[(warp_id<<8) + (tid1<<3) + 1] = rg_k1;
			smem[(warp_id<<8) + (tid1<<3) + 2] = rg_k2;
			smem[(warp_id<<8) + (tid1<<3) + 3] = rg_k3;
			smem[(warp_id<<8) + (tid1<<3) + 4] = rg_k4;
			smem[(warp_id<<8) + (tid1<<3) + 5] = rg_k5;
			smem[(warp_id<<8) + (tid1<<3) + 6] = rg_k6;
			smem[(warp_id<<8) + (tid1<<3) + 7] = rg_k7;
			tmem[(warp_id<<8) + (tid1<<3) + 0] = rg_v0;
			tmem[(warp_id<<8) + (tid1<<3) + 1] = rg_v1;
			tmem[(warp_id<<8) + (tid1<<3) + 2] = rg_v2;
			tmem[(warp_id<<8) + (tid1<<3) + 3] = rg_v3;
			tmem[(warp_id<<8) + (tid1<<3) + 4] = rg_v4;
			tmem[(warp_id<<8) + (tid1<<3) + 5] = rg_v5;
			tmem[(warp_id<<8) + (tid1<<3) + 6] = rg_v6;
			tmem[(warp_id<<8) + (tid1<<3) + 7] = rg_v7;
		}
		__syncthreads();

		// Merge in 4 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 256;
			rhs_len = 256;
			gran = tid1<<3;
			gran += (warp_id & 1) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 512;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 3) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 1024;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 7) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 2048;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 15) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		if ((warp_id << 8) + 0 + tid1 < seg_size) keyB[k + (warp_id << 8) + 0 + tid1] = smem[(warp_id << 8) + 0 + tid1];
		if ((warp_id << 8) + 32 + tid1 < seg_size) keyB[k + (warp_id << 8) + 32 + tid1] = smem[(warp_id << 8) + 32 + tid1];
		if ((warp_id << 8) + 64 + tid1 < seg_size) keyB[k + (warp_id << 8) + 64 + tid1] = smem[(warp_id << 8) + 64 + tid1];
		if ((warp_id << 8) + 96 + tid1 < seg_size) keyB[k + (warp_id << 8) + 96 + tid1] = smem[(warp_id << 8) + 96 + tid1];
		if ((warp_id << 8) + 128 + tid1 < seg_size) keyB[k + (warp_id << 8) + 128 + tid1] = smem[(warp_id << 8) + 128 + tid1];
		if ((warp_id << 8) + 160 + tid1 < seg_size) keyB[k + (warp_id << 8) + 160 + tid1] = smem[(warp_id << 8) + 160 + tid1];
		if ((warp_id << 8) + 192 + tid1 < seg_size) keyB[k + (warp_id << 8) + 192 + tid1] = smem[(warp_id << 8) + 192 + tid1];
		if ((warp_id << 8) + 224 + tid1 < seg_size) keyB[k + (warp_id << 8) + 224 + tid1] = smem[(warp_id << 8) + 224 + tid1];

		if ((warp_id << 8) + 0 + tid1 < seg_size) valB[k + (warp_id << 8) + 0 + tid1] = val[k + tmem[(warp_id << 8) + 0 + tid1]];
		if ((warp_id << 8) + 32 + tid1 < seg_size) valB[k + (warp_id << 8) + 32 + tid1] = val[k + tmem[(warp_id << 8) + 32 + tid1]];
		if ((warp_id << 8) + 64 + tid1 < seg_size) valB[k + (warp_id << 8) + 64 + tid1] = val[k + tmem[(warp_id << 8) + 64 + tid1]];
		if ((warp_id << 8) + 96 + tid1 < seg_size) valB[k + (warp_id << 8) + 96 + tid1] = val[k + tmem[(warp_id << 8) + 96 + tid1]];
		if ((warp_id << 8) + 128 + tid1 < seg_size) valB[k + (warp_id << 8) + 128 + tid1] = val[k + tmem[(warp_id << 8) + 128 + tid1]];
		if ((warp_id << 8) + 160 + tid1 < seg_size) valB[k + (warp_id << 8) + 160 + tid1] = val[k + tmem[(warp_id << 8) + 160 + tid1]];
		if ((warp_id << 8) + 192 + tid1 < seg_size) valB[k + (warp_id << 8) + 192 + tid1] = val[k + tmem[(warp_id << 8) + 192 + tid1]];
		if ((warp_id << 8) + 224 + tid1 < seg_size) valB[k + (warp_id << 8) + 224 + tid1] = val[k + tmem[(warp_id << 8) + 224 + tid1]];
	}
}

// 256 threads per block | 16 ppt | strided
template<class K, class T>
__global__
void my_blk256_ppt16_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[4096];
	__shared__ int tmem[4096];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 511) / 512);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<9)+0	<seg_size)?key[k+tid1+(warp_id<<9)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<9)+32	<seg_size)?key[k+tid1+(warp_id<<9)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<9)+64	<seg_size)?key[k+tid1+(warp_id<<9)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<9)+96	<seg_size)?key[k+tid1+(warp_id<<9)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<9)+128	<seg_size)?key[k+tid1+(warp_id<<9)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<9)+160	<seg_size)?key[k+tid1+(warp_id<<9)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<9)+192	<seg_size)?key[k+tid1+(warp_id<<9)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<9)+224	<seg_size)?key[k+tid1+(warp_id<<9)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<9)+256	<seg_size)?key[k+tid1+(warp_id<<9)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<9)+288	<seg_size)?key[k+tid1+(warp_id<<9)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<9)+320	<seg_size)?key[k+tid1+(warp_id<<9)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<9)+352	<seg_size)?key[k+tid1+(warp_id<<9)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<9)+384	<seg_size)?key[k+tid1+(warp_id<<9)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<9)+416	<seg_size)?key[k+tid1+(warp_id<<9)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<9)+448	<seg_size)?key[k+tid1+(warp_id<<9)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<9)+480	<seg_size)?key[k+tid1+(warp_id<<9)+480	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<9)+0	<seg_size) rg_v0  = tid1+(warp_id<<9)+0	;
			if (tid1+(warp_id<<9)+32	<seg_size) rg_v1  = tid1+(warp_id<<9)+32	;
			if (tid1+(warp_id<<9)+64	<seg_size) rg_v2  = tid1+(warp_id<<9)+64	;
			if (tid1+(warp_id<<9)+96	<seg_size) rg_v3  = tid1+(warp_id<<9)+96	;
			if (tid1+(warp_id<<9)+128	<seg_size) rg_v4  = tid1+(warp_id<<9)+128	;
			if (tid1+(warp_id<<9)+160	<seg_size) rg_v5  = tid1+(warp_id<<9)+160	;
			if (tid1+(warp_id<<9)+192	<seg_size) rg_v6  = tid1+(warp_id<<9)+192	;
			if (tid1+(warp_id<<9)+224	<seg_size) rg_v7  = tid1+(warp_id<<9)+224	;
			if (tid1+(warp_id<<9)+256	<seg_size) rg_v8  = tid1+(warp_id<<9)+256	;
			if (tid1+(warp_id<<9)+288	<seg_size) rg_v9  = tid1+(warp_id<<9)+288	;
			if (tid1+(warp_id<<9)+320	<seg_size) rg_v10  = tid1+(warp_id<<9)+320	;
			if (tid1+(warp_id<<9)+352	<seg_size) rg_v11  = tid1+(warp_id<<9)+352	;
			if (tid1+(warp_id<<9)+384	<seg_size) rg_v12  = tid1+(warp_id<<9)+384	;
			if (tid1+(warp_id<<9)+416	<seg_size) rg_v13  = tid1+(warp_id<<9)+416	;
			if (tid1+(warp_id<<9)+448	<seg_size) rg_v14  = tid1+(warp_id<<9)+448	;
			if (tid1+(warp_id<<9)+480	<seg_size) rg_v15  = tid1+(warp_id<<9)+480	;

			// sort 512 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);

			// Store register results to shared memory
			smem[(warp_id<<9) + (tid1<<4) + 0] = rg_k0;
			smem[(warp_id<<9) + (tid1<<4) + 1] = rg_k1;
			smem[(warp_id<<9) + (tid1<<4) + 2] = rg_k2;
			smem[(warp_id<<9) + (tid1<<4) + 3] = rg_k3;
			smem[(warp_id<<9) + (tid1<<4) + 4] = rg_k4;
			smem[(warp_id<<9) + (tid1<<4) + 5] = rg_k5;
			smem[(warp_id<<9) + (tid1<<4) + 6] = rg_k6;
			smem[(warp_id<<9) + (tid1<<4) + 7] = rg_k7;
			smem[(warp_id<<9) + (tid1<<4) + 8] = rg_k8;
			smem[(warp_id<<9) + (tid1<<4) + 9] = rg_k9;
			smem[(warp_id<<9) + (tid1<<4) + 10] = rg_k10;
			smem[(warp_id<<9) + (tid1<<4) + 11] = rg_k11;
			smem[(warp_id<<9) + (tid1<<4) + 12] = rg_k12;
			smem[(warp_id<<9) + (tid1<<4) + 13] = rg_k13;
			smem[(warp_id<<9) + (tid1<<4) + 14] = rg_k14;
			smem[(warp_id<<9) + (tid1<<4) + 15] = rg_k15;
			tmem[(warp_id<<9) + (tid1<<4) + 0] = rg_v0;
			tmem[(warp_id<<9) + (tid1<<4) + 1] = rg_v1;
			tmem[(warp_id<<9) + (tid1<<4) + 2] = rg_v2;
			tmem[(warp_id<<9) + (tid1<<4) + 3] = rg_v3;
			tmem[(warp_id<<9) + (tid1<<4) + 4] = rg_v4;
			tmem[(warp_id<<9) + (tid1<<4) + 5] = rg_v5;
			tmem[(warp_id<<9) + (tid1<<4) + 6] = rg_v6;
			tmem[(warp_id<<9) + (tid1<<4) + 7] = rg_v7;
			tmem[(warp_id<<9) + (tid1<<4) + 8] = rg_v8;
			tmem[(warp_id<<9) + (tid1<<4) + 9] = rg_v9;
			tmem[(warp_id<<9) + (tid1<<4) + 10] = rg_v10;
			tmem[(warp_id<<9) + (tid1<<4) + 11] = rg_v11;
			tmem[(warp_id<<9) + (tid1<<4) + 12] = rg_v12;
			tmem[(warp_id<<9) + (tid1<<4) + 13] = rg_v13;
			tmem[(warp_id<<9) + (tid1<<4) + 14] = rg_v14;
			tmem[(warp_id<<9) + (tid1<<4) + 15] = rg_v15;
		}
		__syncthreads();

		// Merge in 3 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 512;
			rhs_len = 512;
			gran = tid1<<4;
			gran += (warp_id & 1) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 1024;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 3) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 2048;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 7) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		if ((warp_id << 9) + 0 + tid1 < seg_size) keyB[k + (warp_id << 9) + 0 + tid1] = smem[(warp_id << 9) + 0 + tid1];
		if ((warp_id << 9) + 32 + tid1 < seg_size) keyB[k + (warp_id << 9) + 32 + tid1] = smem[(warp_id << 9) + 32 + tid1];
		if ((warp_id << 9) + 64 + tid1 < seg_size) keyB[k + (warp_id << 9) + 64 + tid1] = smem[(warp_id << 9) + 64 + tid1];
		if ((warp_id << 9) + 96 + tid1 < seg_size) keyB[k + (warp_id << 9) + 96 + tid1] = smem[(warp_id << 9) + 96 + tid1];
		if ((warp_id << 9) + 128 + tid1 < seg_size) keyB[k + (warp_id << 9) + 128 + tid1] = smem[(warp_id << 9) + 128 + tid1];
		if ((warp_id << 9) + 160 + tid1 < seg_size) keyB[k + (warp_id << 9) + 160 + tid1] = smem[(warp_id << 9) + 160 + tid1];
		if ((warp_id << 9) + 192 + tid1 < seg_size) keyB[k + (warp_id << 9) + 192 + tid1] = smem[(warp_id << 9) + 192 + tid1];
		if ((warp_id << 9) + 224 + tid1 < seg_size) keyB[k + (warp_id << 9) + 224 + tid1] = smem[(warp_id << 9) + 224 + tid1];
		if ((warp_id << 9) + 256 + tid1 < seg_size) keyB[k + (warp_id << 9) + 256 + tid1] = smem[(warp_id << 9) + 256 + tid1];
		if ((warp_id << 9) + 288 + tid1 < seg_size) keyB[k + (warp_id << 9) + 288 + tid1] = smem[(warp_id << 9) + 288 + tid1];
		if ((warp_id << 9) + 320 + tid1 < seg_size) keyB[k + (warp_id << 9) + 320 + tid1] = smem[(warp_id << 9) + 320 + tid1];
		if ((warp_id << 9) + 352 + tid1 < seg_size) keyB[k + (warp_id << 9) + 352 + tid1] = smem[(warp_id << 9) + 352 + tid1];
		if ((warp_id << 9) + 384 + tid1 < seg_size) keyB[k + (warp_id << 9) + 384 + tid1] = smem[(warp_id << 9) + 384 + tid1];
		if ((warp_id << 9) + 416 + tid1 < seg_size) keyB[k + (warp_id << 9) + 416 + tid1] = smem[(warp_id << 9) + 416 + tid1];
		if ((warp_id << 9) + 448 + tid1 < seg_size) keyB[k + (warp_id << 9) + 448 + tid1] = smem[(warp_id << 9) + 448 + tid1];
		if ((warp_id << 9) + 480 + tid1 < seg_size) keyB[k + (warp_id << 9) + 480 + tid1] = smem[(warp_id << 9) + 480 + tid1];

		if ((warp_id << 9) + 0 + tid1 < seg_size) valB[k + (warp_id << 9) + 0 + tid1] = val[k + tmem[(warp_id << 9) + 0 + tid1]];
		if ((warp_id << 9) + 32 + tid1 < seg_size) valB[k + (warp_id << 9) + 32 + tid1] = val[k + tmem[(warp_id << 9) + 32 + tid1]];
		if ((warp_id << 9) + 64 + tid1 < seg_size) valB[k + (warp_id << 9) + 64 + tid1] = val[k + tmem[(warp_id << 9) + 64 + tid1]];
		if ((warp_id << 9) + 96 + tid1 < seg_size) valB[k + (warp_id << 9) + 96 + tid1] = val[k + tmem[(warp_id << 9) + 96 + tid1]];
		if ((warp_id << 9) + 128 + tid1 < seg_size) valB[k + (warp_id << 9) + 128 + tid1] = val[k + tmem[(warp_id << 9) + 128 + tid1]];
		if ((warp_id << 9) + 160 + tid1 < seg_size) valB[k + (warp_id << 9) + 160 + tid1] = val[k + tmem[(warp_id << 9) + 160 + tid1]];
		if ((warp_id << 9) + 192 + tid1 < seg_size) valB[k + (warp_id << 9) + 192 + tid1] = val[k + tmem[(warp_id << 9) + 192 + tid1]];
		if ((warp_id << 9) + 224 + tid1 < seg_size) valB[k + (warp_id << 9) + 224 + tid1] = val[k + tmem[(warp_id << 9) + 224 + tid1]];
		if ((warp_id << 9) + 256 + tid1 < seg_size) valB[k + (warp_id << 9) + 256 + tid1] = val[k + tmem[(warp_id << 9) + 256 + tid1]];
		if ((warp_id << 9) + 288 + tid1 < seg_size) valB[k + (warp_id << 9) + 288 + tid1] = val[k + tmem[(warp_id << 9) + 288 + tid1]];
		if ((warp_id << 9) + 320 + tid1 < seg_size) valB[k + (warp_id << 9) + 320 + tid1] = val[k + tmem[(warp_id << 9) + 320 + tid1]];
		if ((warp_id << 9) + 352 + tid1 < seg_size) valB[k + (warp_id << 9) + 352 + tid1] = val[k + tmem[(warp_id << 9) + 352 + tid1]];
		if ((warp_id << 9) + 384 + tid1 < seg_size) valB[k + (warp_id << 9) + 384 + tid1] = val[k + tmem[(warp_id << 9) + 384 + tid1]];
		if ((warp_id << 9) + 416 + tid1 < seg_size) valB[k + (warp_id << 9) + 416 + tid1] = val[k + tmem[(warp_id << 9) + 416 + tid1]];
		if ((warp_id << 9) + 448 + tid1 < seg_size) valB[k + (warp_id << 9) + 448 + tid1] = val[k + tmem[(warp_id << 9) + 448 + tid1]];
		if ((warp_id << 9) + 480 + tid1 < seg_size) valB[k + (warp_id << 9) + 480 + tid1] = val[k + tmem[(warp_id << 9) + 480 + tid1]];
	}
}

// 128 threads per block | 32 ppt | strided
template<class K, class T>
__global__
void my_blk128_ppt32_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	__shared__ K smem[4096];
	__shared__ int tmem[4096];
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	K rg_k16;
	K rg_k17;
	K rg_k18;
	K rg_k19;
	K rg_k20;
	K rg_k21;
	K rg_k22;
	K rg_k23;
	K rg_k24;
	K rg_k25;
	K rg_k26;
	K rg_k27;
	K rg_k28;
	K rg_k29;
	K rg_k30;
	K rg_k31;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int rg_v16;
	int rg_v17;
	int rg_v18;
	int rg_v19;
	int rg_v20;
	int rg_v21;
	int rg_v22;
	int rg_v23;
	int rg_v24;
	int rg_v25;
	int rg_v26;
	int rg_v27;
	int rg_v28;
	int rg_v29;
	int rg_v30;
	int rg_v31;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 1023) / 1024);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<10)+0	<seg_size)?key[k+tid1+(warp_id<<10)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<10)+32	<seg_size)?key[k+tid1+(warp_id<<10)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<10)+64	<seg_size)?key[k+tid1+(warp_id<<10)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<10)+96	<seg_size)?key[k+tid1+(warp_id<<10)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<10)+128	<seg_size)?key[k+tid1+(warp_id<<10)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<10)+160	<seg_size)?key[k+tid1+(warp_id<<10)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<10)+192	<seg_size)?key[k+tid1+(warp_id<<10)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<10)+224	<seg_size)?key[k+tid1+(warp_id<<10)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<10)+256	<seg_size)?key[k+tid1+(warp_id<<10)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<10)+288	<seg_size)?key[k+tid1+(warp_id<<10)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<10)+320	<seg_size)?key[k+tid1+(warp_id<<10)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<10)+352	<seg_size)?key[k+tid1+(warp_id<<10)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<10)+384	<seg_size)?key[k+tid1+(warp_id<<10)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<10)+416	<seg_size)?key[k+tid1+(warp_id<<10)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<10)+448	<seg_size)?key[k+tid1+(warp_id<<10)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<10)+480	<seg_size)?key[k+tid1+(warp_id<<10)+480	]:std::numeric_limits<K>::max();
			rg_k16  = (tid1+(warp_id<<10)+512	<seg_size)?key[k+tid1+(warp_id<<10)+512	]:std::numeric_limits<K>::max();
			rg_k17  = (tid1+(warp_id<<10)+544	<seg_size)?key[k+tid1+(warp_id<<10)+544	]:std::numeric_limits<K>::max();
			rg_k18  = (tid1+(warp_id<<10)+576	<seg_size)?key[k+tid1+(warp_id<<10)+576	]:std::numeric_limits<K>::max();
			rg_k19  = (tid1+(warp_id<<10)+608	<seg_size)?key[k+tid1+(warp_id<<10)+608	]:std::numeric_limits<K>::max();
			rg_k20  = (tid1+(warp_id<<10)+640	<seg_size)?key[k+tid1+(warp_id<<10)+640	]:std::numeric_limits<K>::max();
			rg_k21  = (tid1+(warp_id<<10)+672	<seg_size)?key[k+tid1+(warp_id<<10)+672	]:std::numeric_limits<K>::max();
			rg_k22  = (tid1+(warp_id<<10)+704	<seg_size)?key[k+tid1+(warp_id<<10)+704	]:std::numeric_limits<K>::max();
			rg_k23  = (tid1+(warp_id<<10)+736	<seg_size)?key[k+tid1+(warp_id<<10)+736	]:std::numeric_limits<K>::max();
			rg_k24  = (tid1+(warp_id<<10)+768	<seg_size)?key[k+tid1+(warp_id<<10)+768	]:std::numeric_limits<K>::max();
			rg_k25  = (tid1+(warp_id<<10)+800	<seg_size)?key[k+tid1+(warp_id<<10)+800	]:std::numeric_limits<K>::max();
			rg_k26  = (tid1+(warp_id<<10)+832	<seg_size)?key[k+tid1+(warp_id<<10)+832	]:std::numeric_limits<K>::max();
			rg_k27  = (tid1+(warp_id<<10)+864	<seg_size)?key[k+tid1+(warp_id<<10)+864	]:std::numeric_limits<K>::max();
			rg_k28  = (tid1+(warp_id<<10)+896	<seg_size)?key[k+tid1+(warp_id<<10)+896	]:std::numeric_limits<K>::max();
			rg_k29  = (tid1+(warp_id<<10)+928	<seg_size)?key[k+tid1+(warp_id<<10)+928	]:std::numeric_limits<K>::max();
			rg_k30  = (tid1+(warp_id<<10)+960	<seg_size)?key[k+tid1+(warp_id<<10)+960	]:std::numeric_limits<K>::max();
			rg_k31  = (tid1+(warp_id<<10)+992	<seg_size)?key[k+tid1+(warp_id<<10)+992	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<10)+0	<seg_size) rg_v0  = tid1+(warp_id<<10)+0	;
			if (tid1+(warp_id<<10)+32	<seg_size) rg_v1  = tid1+(warp_id<<10)+32	;
			if (tid1+(warp_id<<10)+64	<seg_size) rg_v2  = tid1+(warp_id<<10)+64	;
			if (tid1+(warp_id<<10)+96	<seg_size) rg_v3  = tid1+(warp_id<<10)+96	;
			if (tid1+(warp_id<<10)+128	<seg_size) rg_v4  = tid1+(warp_id<<10)+128	;
			if (tid1+(warp_id<<10)+160	<seg_size) rg_v5  = tid1+(warp_id<<10)+160	;
			if (tid1+(warp_id<<10)+192	<seg_size) rg_v6  = tid1+(warp_id<<10)+192	;
			if (tid1+(warp_id<<10)+224	<seg_size) rg_v7  = tid1+(warp_id<<10)+224	;
			if (tid1+(warp_id<<10)+256	<seg_size) rg_v8  = tid1+(warp_id<<10)+256	;
			if (tid1+(warp_id<<10)+288	<seg_size) rg_v9  = tid1+(warp_id<<10)+288	;
			if (tid1+(warp_id<<10)+320	<seg_size) rg_v10  = tid1+(warp_id<<10)+320	;
			if (tid1+(warp_id<<10)+352	<seg_size) rg_v11  = tid1+(warp_id<<10)+352	;
			if (tid1+(warp_id<<10)+384	<seg_size) rg_v12  = tid1+(warp_id<<10)+384	;
			if (tid1+(warp_id<<10)+416	<seg_size) rg_v13  = tid1+(warp_id<<10)+416	;
			if (tid1+(warp_id<<10)+448	<seg_size) rg_v14  = tid1+(warp_id<<10)+448	;
			if (tid1+(warp_id<<10)+480	<seg_size) rg_v15  = tid1+(warp_id<<10)+480	;
			if (tid1+(warp_id<<10)+512	<seg_size) rg_v16  = tid1+(warp_id<<10)+512	;
			if (tid1+(warp_id<<10)+544	<seg_size) rg_v17  = tid1+(warp_id<<10)+544	;
			if (tid1+(warp_id<<10)+576	<seg_size) rg_v18  = tid1+(warp_id<<10)+576	;
			if (tid1+(warp_id<<10)+608	<seg_size) rg_v19  = tid1+(warp_id<<10)+608	;
			if (tid1+(warp_id<<10)+640	<seg_size) rg_v20  = tid1+(warp_id<<10)+640	;
			if (tid1+(warp_id<<10)+672	<seg_size) rg_v21  = tid1+(warp_id<<10)+672	;
			if (tid1+(warp_id<<10)+704	<seg_size) rg_v22  = tid1+(warp_id<<10)+704	;
			if (tid1+(warp_id<<10)+736	<seg_size) rg_v23  = tid1+(warp_id<<10)+736	;
			if (tid1+(warp_id<<10)+768	<seg_size) rg_v24  = tid1+(warp_id<<10)+768	;
			if (tid1+(warp_id<<10)+800	<seg_size) rg_v25  = tid1+(warp_id<<10)+800	;
			if (tid1+(warp_id<<10)+832	<seg_size) rg_v26  = tid1+(warp_id<<10)+832	;
			if (tid1+(warp_id<<10)+864	<seg_size) rg_v27  = tid1+(warp_id<<10)+864	;
			if (tid1+(warp_id<<10)+896	<seg_size) rg_v28  = tid1+(warp_id<<10)+896	;
			if (tid1+(warp_id<<10)+928	<seg_size) rg_v29  = tid1+(warp_id<<10)+928	;
			if (tid1+(warp_id<<10)+960	<seg_size) rg_v30  = tid1+(warp_id<<10)+960	;
			if (tid1+(warp_id<<10)+992	<seg_size) rg_v31  = tid1+(warp_id<<10)+992	;

			// sort 1024 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			CMP_SWP(K, rg_k16, rg_k19, int, rg_v16, rg_v19);
			CMP_SWP(K, rg_k17, rg_k18, int, rg_v17, rg_v18);
			CMP_SWP(K, rg_k20, rg_k23, int, rg_v20, rg_v23);
			CMP_SWP(K, rg_k21, rg_k22, int, rg_v21, rg_v22);
			CMP_SWP(K, rg_k24, rg_k27, int, rg_v24, rg_v27);
			CMP_SWP(K, rg_k25, rg_k26, int, rg_v25, rg_v26);
			CMP_SWP(K, rg_k28, rg_k31, int, rg_v28, rg_v31);
			CMP_SWP(K, rg_k29, rg_k30, int, rg_v29, rg_v30);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			CMP_SWP(K, rg_k16, rg_k23, int, rg_v16, rg_v23);
			CMP_SWP(K, rg_k17, rg_k22, int, rg_v17, rg_v22);
			CMP_SWP(K, rg_k18, rg_k21, int, rg_v18, rg_v21);
			CMP_SWP(K, rg_k19, rg_k20, int, rg_v19, rg_v20);
			CMP_SWP(K, rg_k24, rg_k31, int, rg_v24, rg_v31);
			CMP_SWP(K, rg_k25, rg_k30, int, rg_v25, rg_v30);
			CMP_SWP(K, rg_k26, rg_k29, int, rg_v26, rg_v29);
			CMP_SWP(K, rg_k27, rg_k28, int, rg_v27, rg_v28);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			CMP_SWP(K, rg_k16, rg_k31, int, rg_v16, rg_v31);
			CMP_SWP(K, rg_k17, rg_k30, int, rg_v17, rg_v30);
			CMP_SWP(K, rg_k18, rg_k29, int, rg_v18, rg_v29);
			CMP_SWP(K, rg_k19, rg_k28, int, rg_v19, rg_v28);
			CMP_SWP(K, rg_k20, rg_k27, int, rg_v20, rg_v27);
			CMP_SWP(K, rg_k21, rg_k26, int, rg_v21, rg_v26);
			CMP_SWP(K, rg_k22, rg_k25, int, rg_v22, rg_v25);
			CMP_SWP(K, rg_k23, rg_k24, int, rg_v23, rg_v24);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k31, int, rg_v0, rg_v31);
			CMP_SWP(K, rg_k1, rg_k30, int, rg_v1, rg_v30);
			CMP_SWP(K, rg_k2, rg_k29, int, rg_v2, rg_v29);
			CMP_SWP(K, rg_k3, rg_k28, int, rg_v3, rg_v28);
			CMP_SWP(K, rg_k4, rg_k27, int, rg_v4, rg_v27);
			CMP_SWP(K, rg_k5, rg_k26, int, rg_v5, rg_v26);
			CMP_SWP(K, rg_k6, rg_k25, int, rg_v6, rg_v25);
			CMP_SWP(K, rg_k7, rg_k24, int, rg_v7, rg_v24);
			CMP_SWP(K, rg_k8, rg_k23, int, rg_v8, rg_v23);
			CMP_SWP(K, rg_k9, rg_k22, int, rg_v9, rg_v22);
			CMP_SWP(K, rg_k10, rg_k21, int, rg_v10, rg_v21);
			CMP_SWP(K, rg_k11, rg_k20, int, rg_v11, rg_v20);
			CMP_SWP(K, rg_k12, rg_k19, int, rg_v12, rg_v19);
			CMP_SWP(K, rg_k13, rg_k18, int, rg_v13, rg_v18);
			CMP_SWP(K, rg_k14, rg_k17, int, rg_v14, rg_v17);
			CMP_SWP(K, rg_k15, rg_k16, int, rg_v15, rg_v16);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);

			// Store register results to shared memory
			smem[(warp_id<<10) + (tid1<<5) + 0] = rg_k0;
			smem[(warp_id<<10) + (tid1<<5) + 1] = rg_k1;
			smem[(warp_id<<10) + (tid1<<5) + 2] = rg_k2;
			smem[(warp_id<<10) + (tid1<<5) + 3] = rg_k3;
			smem[(warp_id<<10) + (tid1<<5) + 4] = rg_k4;
			smem[(warp_id<<10) + (tid1<<5) + 5] = rg_k5;
			smem[(warp_id<<10) + (tid1<<5) + 6] = rg_k6;
			smem[(warp_id<<10) + (tid1<<5) + 7] = rg_k7;
			smem[(warp_id<<10) + (tid1<<5) + 8] = rg_k8;
			smem[(warp_id<<10) + (tid1<<5) + 9] = rg_k9;
			smem[(warp_id<<10) + (tid1<<5) + 10] = rg_k10;
			smem[(warp_id<<10) + (tid1<<5) + 11] = rg_k11;
			smem[(warp_id<<10) + (tid1<<5) + 12] = rg_k12;
			smem[(warp_id<<10) + (tid1<<5) + 13] = rg_k13;
			smem[(warp_id<<10) + (tid1<<5) + 14] = rg_k14;
			smem[(warp_id<<10) + (tid1<<5) + 15] = rg_k15;
			smem[(warp_id<<10) + (tid1<<5) + 16] = rg_k16;
			smem[(warp_id<<10) + (tid1<<5) + 17] = rg_k17;
			smem[(warp_id<<10) + (tid1<<5) + 18] = rg_k18;
			smem[(warp_id<<10) + (tid1<<5) + 19] = rg_k19;
			smem[(warp_id<<10) + (tid1<<5) + 20] = rg_k20;
			smem[(warp_id<<10) + (tid1<<5) + 21] = rg_k21;
			smem[(warp_id<<10) + (tid1<<5) + 22] = rg_k22;
			smem[(warp_id<<10) + (tid1<<5) + 23] = rg_k23;
			smem[(warp_id<<10) + (tid1<<5) + 24] = rg_k24;
			smem[(warp_id<<10) + (tid1<<5) + 25] = rg_k25;
			smem[(warp_id<<10) + (tid1<<5) + 26] = rg_k26;
			smem[(warp_id<<10) + (tid1<<5) + 27] = rg_k27;
			smem[(warp_id<<10) + (tid1<<5) + 28] = rg_k28;
			smem[(warp_id<<10) + (tid1<<5) + 29] = rg_k29;
			smem[(warp_id<<10) + (tid1<<5) + 30] = rg_k30;
			smem[(warp_id<<10) + (tid1<<5) + 31] = rg_k31;
			tmem[(warp_id<<10) + (tid1<<5) + 0] = rg_v0;
			tmem[(warp_id<<10) + (tid1<<5) + 1] = rg_v1;
			tmem[(warp_id<<10) + (tid1<<5) + 2] = rg_v2;
			tmem[(warp_id<<10) + (tid1<<5) + 3] = rg_v3;
			tmem[(warp_id<<10) + (tid1<<5) + 4] = rg_v4;
			tmem[(warp_id<<10) + (tid1<<5) + 5] = rg_v5;
			tmem[(warp_id<<10) + (tid1<<5) + 6] = rg_v6;
			tmem[(warp_id<<10) + (tid1<<5) + 7] = rg_v7;
			tmem[(warp_id<<10) + (tid1<<5) + 8] = rg_v8;
			tmem[(warp_id<<10) + (tid1<<5) + 9] = rg_v9;
			tmem[(warp_id<<10) + (tid1<<5) + 10] = rg_v10;
			tmem[(warp_id<<10) + (tid1<<5) + 11] = rg_v11;
			tmem[(warp_id<<10) + (tid1<<5) + 12] = rg_v12;
			tmem[(warp_id<<10) + (tid1<<5) + 13] = rg_v13;
			tmem[(warp_id<<10) + (tid1<<5) + 14] = rg_v14;
			tmem[(warp_id<<10) + (tid1<<5) + 15] = rg_v15;
			tmem[(warp_id<<10) + (tid1<<5) + 16] = rg_v16;
			tmem[(warp_id<<10) + (tid1<<5) + 17] = rg_v17;
			tmem[(warp_id<<10) + (tid1<<5) + 18] = rg_v18;
			tmem[(warp_id<<10) + (tid1<<5) + 19] = rg_v19;
			tmem[(warp_id<<10) + (tid1<<5) + 20] = rg_v20;
			tmem[(warp_id<<10) + (tid1<<5) + 21] = rg_v21;
			tmem[(warp_id<<10) + (tid1<<5) + 22] = rg_v22;
			tmem[(warp_id<<10) + (tid1<<5) + 23] = rg_v23;
			tmem[(warp_id<<10) + (tid1<<5) + 24] = rg_v24;
			tmem[(warp_id<<10) + (tid1<<5) + 25] = rg_v25;
			tmem[(warp_id<<10) + (tid1<<5) + 26] = rg_v26;
			tmem[(warp_id<<10) + (tid1<<5) + 27] = rg_v27;
			tmem[(warp_id<<10) + (tid1<<5) + 28] = rg_v28;
			tmem[(warp_id<<10) + (tid1<<5) + 29] = rg_v29;
			tmem[(warp_id<<10) + (tid1<<5) + 30] = rg_v30;
			tmem[(warp_id<<10) + (tid1<<5) + 31] = rg_v31;
		}
		__syncthreads();

		// Merge in 2 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 1024;
			rhs_len = 1024;
			gran = tid1<<5;
			gran += (warp_id & 1) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 2048;
			rhs_len = 1024 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<5;
			gran += (warp_id & 3) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		if ((warp_id << 10) + 0 + tid1 < seg_size) keyB[k + (warp_id << 10) + 0 + tid1] = smem[(warp_id << 10) + 0 + tid1];
		if ((warp_id << 10) + 32 + tid1 < seg_size) keyB[k + (warp_id << 10) + 32 + tid1] = smem[(warp_id << 10) + 32 + tid1];
		if ((warp_id << 10) + 64 + tid1 < seg_size) keyB[k + (warp_id << 10) + 64 + tid1] = smem[(warp_id << 10) + 64 + tid1];
		if ((warp_id << 10) + 96 + tid1 < seg_size) keyB[k + (warp_id << 10) + 96 + tid1] = smem[(warp_id << 10) + 96 + tid1];
		if ((warp_id << 10) + 128 + tid1 < seg_size) keyB[k + (warp_id << 10) + 128 + tid1] = smem[(warp_id << 10) + 128 + tid1];
		if ((warp_id << 10) + 160 + tid1 < seg_size) keyB[k + (warp_id << 10) + 160 + tid1] = smem[(warp_id << 10) + 160 + tid1];
		if ((warp_id << 10) + 192 + tid1 < seg_size) keyB[k + (warp_id << 10) + 192 + tid1] = smem[(warp_id << 10) + 192 + tid1];
		if ((warp_id << 10) + 224 + tid1 < seg_size) keyB[k + (warp_id << 10) + 224 + tid1] = smem[(warp_id << 10) + 224 + tid1];
		if ((warp_id << 10) + 256 + tid1 < seg_size) keyB[k + (warp_id << 10) + 256 + tid1] = smem[(warp_id << 10) + 256 + tid1];
		if ((warp_id << 10) + 288 + tid1 < seg_size) keyB[k + (warp_id << 10) + 288 + tid1] = smem[(warp_id << 10) + 288 + tid1];
		if ((warp_id << 10) + 320 + tid1 < seg_size) keyB[k + (warp_id << 10) + 320 + tid1] = smem[(warp_id << 10) + 320 + tid1];
		if ((warp_id << 10) + 352 + tid1 < seg_size) keyB[k + (warp_id << 10) + 352 + tid1] = smem[(warp_id << 10) + 352 + tid1];
		if ((warp_id << 10) + 384 + tid1 < seg_size) keyB[k + (warp_id << 10) + 384 + tid1] = smem[(warp_id << 10) + 384 + tid1];
		if ((warp_id << 10) + 416 + tid1 < seg_size) keyB[k + (warp_id << 10) + 416 + tid1] = smem[(warp_id << 10) + 416 + tid1];
		if ((warp_id << 10) + 448 + tid1 < seg_size) keyB[k + (warp_id << 10) + 448 + tid1] = smem[(warp_id << 10) + 448 + tid1];
		if ((warp_id << 10) + 480 + tid1 < seg_size) keyB[k + (warp_id << 10) + 480 + tid1] = smem[(warp_id << 10) + 480 + tid1];
		if ((warp_id << 10) + 512 + tid1 < seg_size) keyB[k + (warp_id << 10) + 512 + tid1] = smem[(warp_id << 10) + 512 + tid1];
		if ((warp_id << 10) + 544 + tid1 < seg_size) keyB[k + (warp_id << 10) + 544 + tid1] = smem[(warp_id << 10) + 544 + tid1];
		if ((warp_id << 10) + 576 + tid1 < seg_size) keyB[k + (warp_id << 10) + 576 + tid1] = smem[(warp_id << 10) + 576 + tid1];
		if ((warp_id << 10) + 608 + tid1 < seg_size) keyB[k + (warp_id << 10) + 608 + tid1] = smem[(warp_id << 10) + 608 + tid1];
		if ((warp_id << 10) + 640 + tid1 < seg_size) keyB[k + (warp_id << 10) + 640 + tid1] = smem[(warp_id << 10) + 640 + tid1];
		if ((warp_id << 10) + 672 + tid1 < seg_size) keyB[k + (warp_id << 10) + 672 + tid1] = smem[(warp_id << 10) + 672 + tid1];
		if ((warp_id << 10) + 704 + tid1 < seg_size) keyB[k + (warp_id << 10) + 704 + tid1] = smem[(warp_id << 10) + 704 + tid1];
		if ((warp_id << 10) + 736 + tid1 < seg_size) keyB[k + (warp_id << 10) + 736 + tid1] = smem[(warp_id << 10) + 736 + tid1];
		if ((warp_id << 10) + 768 + tid1 < seg_size) keyB[k + (warp_id << 10) + 768 + tid1] = smem[(warp_id << 10) + 768 + tid1];
		if ((warp_id << 10) + 800 + tid1 < seg_size) keyB[k + (warp_id << 10) + 800 + tid1] = smem[(warp_id << 10) + 800 + tid1];
		if ((warp_id << 10) + 832 + tid1 < seg_size) keyB[k + (warp_id << 10) + 832 + tid1] = smem[(warp_id << 10) + 832 + tid1];
		if ((warp_id << 10) + 864 + tid1 < seg_size) keyB[k + (warp_id << 10) + 864 + tid1] = smem[(warp_id << 10) + 864 + tid1];
		if ((warp_id << 10) + 896 + tid1 < seg_size) keyB[k + (warp_id << 10) + 896 + tid1] = smem[(warp_id << 10) + 896 + tid1];
		if ((warp_id << 10) + 928 + tid1 < seg_size) keyB[k + (warp_id << 10) + 928 + tid1] = smem[(warp_id << 10) + 928 + tid1];
		if ((warp_id << 10) + 960 + tid1 < seg_size) keyB[k + (warp_id << 10) + 960 + tid1] = smem[(warp_id << 10) + 960 + tid1];
		if ((warp_id << 10) + 992 + tid1 < seg_size) keyB[k + (warp_id << 10) + 992 + tid1] = smem[(warp_id << 10) + 992 + tid1];

		if ((warp_id << 10) + 0 + tid1 < seg_size) valB[k + (warp_id << 10) + 0 + tid1] = val[k + tmem[(warp_id << 10) + 0 + tid1]];
		if ((warp_id << 10) + 32 + tid1 < seg_size) valB[k + (warp_id << 10) + 32 + tid1] = val[k + tmem[(warp_id << 10) + 32 + tid1]];
		if ((warp_id << 10) + 64 + tid1 < seg_size) valB[k + (warp_id << 10) + 64 + tid1] = val[k + tmem[(warp_id << 10) + 64 + tid1]];
		if ((warp_id << 10) + 96 + tid1 < seg_size) valB[k + (warp_id << 10) + 96 + tid1] = val[k + tmem[(warp_id << 10) + 96 + tid1]];
		if ((warp_id << 10) + 128 + tid1 < seg_size) valB[k + (warp_id << 10) + 128 + tid1] = val[k + tmem[(warp_id << 10) + 128 + tid1]];
		if ((warp_id << 10) + 160 + tid1 < seg_size) valB[k + (warp_id << 10) + 160 + tid1] = val[k + tmem[(warp_id << 10) + 160 + tid1]];
		if ((warp_id << 10) + 192 + tid1 < seg_size) valB[k + (warp_id << 10) + 192 + tid1] = val[k + tmem[(warp_id << 10) + 192 + tid1]];
		if ((warp_id << 10) + 224 + tid1 < seg_size) valB[k + (warp_id << 10) + 224 + tid1] = val[k + tmem[(warp_id << 10) + 224 + tid1]];
		if ((warp_id << 10) + 256 + tid1 < seg_size) valB[k + (warp_id << 10) + 256 + tid1] = val[k + tmem[(warp_id << 10) + 256 + tid1]];
		if ((warp_id << 10) + 288 + tid1 < seg_size) valB[k + (warp_id << 10) + 288 + tid1] = val[k + tmem[(warp_id << 10) + 288 + tid1]];
		if ((warp_id << 10) + 320 + tid1 < seg_size) valB[k + (warp_id << 10) + 320 + tid1] = val[k + tmem[(warp_id << 10) + 320 + tid1]];
		if ((warp_id << 10) + 352 + tid1 < seg_size) valB[k + (warp_id << 10) + 352 + tid1] = val[k + tmem[(warp_id << 10) + 352 + tid1]];
		if ((warp_id << 10) + 384 + tid1 < seg_size) valB[k + (warp_id << 10) + 384 + tid1] = val[k + tmem[(warp_id << 10) + 384 + tid1]];
		if ((warp_id << 10) + 416 + tid1 < seg_size) valB[k + (warp_id << 10) + 416 + tid1] = val[k + tmem[(warp_id << 10) + 416 + tid1]];
		if ((warp_id << 10) + 448 + tid1 < seg_size) valB[k + (warp_id << 10) + 448 + tid1] = val[k + tmem[(warp_id << 10) + 448 + tid1]];
		if ((warp_id << 10) + 480 + tid1 < seg_size) valB[k + (warp_id << 10) + 480 + tid1] = val[k + tmem[(warp_id << 10) + 480 + tid1]];
		if ((warp_id << 10) + 512 + tid1 < seg_size) valB[k + (warp_id << 10) + 512 + tid1] = val[k + tmem[(warp_id << 10) + 512 + tid1]];
		if ((warp_id << 10) + 544 + tid1 < seg_size) valB[k + (warp_id << 10) + 544 + tid1] = val[k + tmem[(warp_id << 10) + 544 + tid1]];
		if ((warp_id << 10) + 576 + tid1 < seg_size) valB[k + (warp_id << 10) + 576 + tid1] = val[k + tmem[(warp_id << 10) + 576 + tid1]];
		if ((warp_id << 10) + 608 + tid1 < seg_size) valB[k + (warp_id << 10) + 608 + tid1] = val[k + tmem[(warp_id << 10) + 608 + tid1]];
		if ((warp_id << 10) + 640 + tid1 < seg_size) valB[k + (warp_id << 10) + 640 + tid1] = val[k + tmem[(warp_id << 10) + 640 + tid1]];
		if ((warp_id << 10) + 672 + tid1 < seg_size) valB[k + (warp_id << 10) + 672 + tid1] = val[k + tmem[(warp_id << 10) + 672 + tid1]];
		if ((warp_id << 10) + 704 + tid1 < seg_size) valB[k + (warp_id << 10) + 704 + tid1] = val[k + tmem[(warp_id << 10) + 704 + tid1]];
		if ((warp_id << 10) + 736 + tid1 < seg_size) valB[k + (warp_id << 10) + 736 + tid1] = val[k + tmem[(warp_id << 10) + 736 + tid1]];
		if ((warp_id << 10) + 768 + tid1 < seg_size) valB[k + (warp_id << 10) + 768 + tid1] = val[k + tmem[(warp_id << 10) + 768 + tid1]];
		if ((warp_id << 10) + 800 + tid1 < seg_size) valB[k + (warp_id << 10) + 800 + tid1] = val[k + tmem[(warp_id << 10) + 800 + tid1]];
		if ((warp_id << 10) + 832 + tid1 < seg_size) valB[k + (warp_id << 10) + 832 + tid1] = val[k + tmem[(warp_id << 10) + 832 + tid1]];
		if ((warp_id << 10) + 864 + tid1 < seg_size) valB[k + (warp_id << 10) + 864 + tid1] = val[k + tmem[(warp_id << 10) + 864 + tid1]];
		if ((warp_id << 10) + 896 + tid1 < seg_size) valB[k + (warp_id << 10) + 896 + tid1] = val[k + tmem[(warp_id << 10) + 896 + tid1]];
		if ((warp_id << 10) + 928 + tid1 < seg_size) valB[k + (warp_id << 10) + 928 + tid1] = val[k + tmem[(warp_id << 10) + 928 + tid1]];
		if ((warp_id << 10) + 960 + tid1 < seg_size) valB[k + (warp_id << 10) + 960 + tid1] = val[k + tmem[(warp_id << 10) + 960 + tid1]];
		if ((warp_id << 10) + 992 + tid1 < seg_size) valB[k + (warp_id << 10) + 992 + tid1] = val[k + tmem[(warp_id << 10) + 992 + tid1]];
	}
}

// segsize 8192

// 1024 threads per block | 8 ppt | strided
template<class K, class T>
__global__
void my_blk1024_ppt8_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	extern __shared__ char ext_shared_memory[];
	K* smem = (K*) ext_shared_memory;
	int* tmem = (int*) (&smem[8192]);
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 255) / 256);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<8)+0	<seg_size)?key[k+tid1+(warp_id<<8)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<8)+32	<seg_size)?key[k+tid1+(warp_id<<8)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<8)+64	<seg_size)?key[k+tid1+(warp_id<<8)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<8)+96	<seg_size)?key[k+tid1+(warp_id<<8)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<8)+128	<seg_size)?key[k+tid1+(warp_id<<8)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<8)+160	<seg_size)?key[k+tid1+(warp_id<<8)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<8)+192	<seg_size)?key[k+tid1+(warp_id<<8)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<8)+224	<seg_size)?key[k+tid1+(warp_id<<8)+224	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<8)+0	<seg_size) rg_v0  = tid1+(warp_id<<8)+0	;
			if (tid1+(warp_id<<8)+32	<seg_size) rg_v1  = tid1+(warp_id<<8)+32	;
			if (tid1+(warp_id<<8)+64	<seg_size) rg_v2  = tid1+(warp_id<<8)+64	;
			if (tid1+(warp_id<<8)+96	<seg_size) rg_v3  = tid1+(warp_id<<8)+96	;
			if (tid1+(warp_id<<8)+128	<seg_size) rg_v4  = tid1+(warp_id<<8)+128	;
			if (tid1+(warp_id<<8)+160	<seg_size) rg_v5  = tid1+(warp_id<<8)+160	;
			if (tid1+(warp_id<<8)+192	<seg_size) rg_v6  = tid1+(warp_id<<8)+192	;
			if (tid1+(warp_id<<8)+224	<seg_size) rg_v7  = tid1+(warp_id<<8)+224	;

			// sort 256 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);

			// Store register results to shared memory
			smem[(warp_id<<8) + (tid1<<3) + 0] = rg_k0;
			smem[(warp_id<<8) + (tid1<<3) + 1] = rg_k1;
			smem[(warp_id<<8) + (tid1<<3) + 2] = rg_k2;
			smem[(warp_id<<8) + (tid1<<3) + 3] = rg_k3;
			smem[(warp_id<<8) + (tid1<<3) + 4] = rg_k4;
			smem[(warp_id<<8) + (tid1<<3) + 5] = rg_k5;
			smem[(warp_id<<8) + (tid1<<3) + 6] = rg_k6;
			smem[(warp_id<<8) + (tid1<<3) + 7] = rg_k7;
			tmem[(warp_id<<8) + (tid1<<3) + 0] = rg_v0;
			tmem[(warp_id<<8) + (tid1<<3) + 1] = rg_v1;
			tmem[(warp_id<<8) + (tid1<<3) + 2] = rg_v2;
			tmem[(warp_id<<8) + (tid1<<3) + 3] = rg_v3;
			tmem[(warp_id<<8) + (tid1<<3) + 4] = rg_v4;
			tmem[(warp_id<<8) + (tid1<<3) + 5] = rg_v5;
			tmem[(warp_id<<8) + (tid1<<3) + 6] = rg_v6;
			tmem[(warp_id<<8) + (tid1<<3) + 7] = rg_v7;
		}
		__syncthreads();

		// Merge in 5 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 256;
			rhs_len = 256;
			gran = tid1<<3;
			gran += (warp_id & 1) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 512;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 3) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 1024;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 7) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 2048;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 15) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		// Step 4
		grp_start_wp_id = ((warp_id>>5)<<5);
		if(grp_start_wp_id + (1 << 4) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 256;
			lhs_len = 4096;
			rhs_len = 256 * (1 +
				(grp_start_wp_id + 17 < full_wp) +
				(grp_start_wp_id + 18 < full_wp) +
				(grp_start_wp_id + 19 < full_wp) +
				(grp_start_wp_id + 20 < full_wp) +
				(grp_start_wp_id + 21 < full_wp) +
				(grp_start_wp_id + 22 < full_wp) +
				(grp_start_wp_id + 23 < full_wp) +
				(grp_start_wp_id + 24 < full_wp) +
				(grp_start_wp_id + 25 < full_wp) +
				(grp_start_wp_id + 26 < full_wp) +
				(grp_start_wp_id + 27 < full_wp) +
				(grp_start_wp_id + 28 < full_wp) +
				(grp_start_wp_id + 29 < full_wp) +
				(grp_start_wp_id + 30 < full_wp) +
				(grp_start_wp_id + 31 < full_wp) );
			gran = tid1<<3;
			gran += (warp_id & 31) * 256;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 4) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
		}
		__syncthreads();

		if ((warp_id << 8) + 0 + tid1 < seg_size) keyB[k + (warp_id << 8) + 0 + tid1] = smem[(warp_id << 8) + 0 + tid1];
		if ((warp_id << 8) + 32 + tid1 < seg_size) keyB[k + (warp_id << 8) + 32 + tid1] = smem[(warp_id << 8) + 32 + tid1];
		if ((warp_id << 8) + 64 + tid1 < seg_size) keyB[k + (warp_id << 8) + 64 + tid1] = smem[(warp_id << 8) + 64 + tid1];
		if ((warp_id << 8) + 96 + tid1 < seg_size) keyB[k + (warp_id << 8) + 96 + tid1] = smem[(warp_id << 8) + 96 + tid1];
		if ((warp_id << 8) + 128 + tid1 < seg_size) keyB[k + (warp_id << 8) + 128 + tid1] = smem[(warp_id << 8) + 128 + tid1];
		if ((warp_id << 8) + 160 + tid1 < seg_size) keyB[k + (warp_id << 8) + 160 + tid1] = smem[(warp_id << 8) + 160 + tid1];
		if ((warp_id << 8) + 192 + tid1 < seg_size) keyB[k + (warp_id << 8) + 192 + tid1] = smem[(warp_id << 8) + 192 + tid1];
		if ((warp_id << 8) + 224 + tid1 < seg_size) keyB[k + (warp_id << 8) + 224 + tid1] = smem[(warp_id << 8) + 224 + tid1];

		if ((warp_id << 8) + 0 + tid1 < seg_size) valB[k + (warp_id << 8) + 0 + tid1] = val[k + tmem[(warp_id << 8) + 0 + tid1]];
		if ((warp_id << 8) + 32 + tid1 < seg_size) valB[k + (warp_id << 8) + 32 + tid1] = val[k + tmem[(warp_id << 8) + 32 + tid1]];
		if ((warp_id << 8) + 64 + tid1 < seg_size) valB[k + (warp_id << 8) + 64 + tid1] = val[k + tmem[(warp_id << 8) + 64 + tid1]];
		if ((warp_id << 8) + 96 + tid1 < seg_size) valB[k + (warp_id << 8) + 96 + tid1] = val[k + tmem[(warp_id << 8) + 96 + tid1]];
		if ((warp_id << 8) + 128 + tid1 < seg_size) valB[k + (warp_id << 8) + 128 + tid1] = val[k + tmem[(warp_id << 8) + 128 + tid1]];
		if ((warp_id << 8) + 160 + tid1 < seg_size) valB[k + (warp_id << 8) + 160 + tid1] = val[k + tmem[(warp_id << 8) + 160 + tid1]];
		if ((warp_id << 8) + 192 + tid1 < seg_size) valB[k + (warp_id << 8) + 192 + tid1] = val[k + tmem[(warp_id << 8) + 192 + tid1]];
		if ((warp_id << 8) + 224 + tid1 < seg_size) valB[k + (warp_id << 8) + 224 + tid1] = val[k + tmem[(warp_id << 8) + 224 + tid1]];
	}
}

// 512 threads per block | 16 ppt | strided
template<class K, class T>
__global__
void my_blk512_ppt16_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	extern __shared__ char ext_shared_memory[];
	K* smem = (K*) ext_shared_memory;
	int* tmem = (int*) (&smem[8192]);
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 511) / 512);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<9)+0	<seg_size)?key[k+tid1+(warp_id<<9)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<9)+32	<seg_size)?key[k+tid1+(warp_id<<9)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<9)+64	<seg_size)?key[k+tid1+(warp_id<<9)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<9)+96	<seg_size)?key[k+tid1+(warp_id<<9)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<9)+128	<seg_size)?key[k+tid1+(warp_id<<9)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<9)+160	<seg_size)?key[k+tid1+(warp_id<<9)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<9)+192	<seg_size)?key[k+tid1+(warp_id<<9)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<9)+224	<seg_size)?key[k+tid1+(warp_id<<9)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<9)+256	<seg_size)?key[k+tid1+(warp_id<<9)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<9)+288	<seg_size)?key[k+tid1+(warp_id<<9)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<9)+320	<seg_size)?key[k+tid1+(warp_id<<9)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<9)+352	<seg_size)?key[k+tid1+(warp_id<<9)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<9)+384	<seg_size)?key[k+tid1+(warp_id<<9)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<9)+416	<seg_size)?key[k+tid1+(warp_id<<9)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<9)+448	<seg_size)?key[k+tid1+(warp_id<<9)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<9)+480	<seg_size)?key[k+tid1+(warp_id<<9)+480	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<9)+0	<seg_size) rg_v0  = tid1+(warp_id<<9)+0	;
			if (tid1+(warp_id<<9)+32	<seg_size) rg_v1  = tid1+(warp_id<<9)+32	;
			if (tid1+(warp_id<<9)+64	<seg_size) rg_v2  = tid1+(warp_id<<9)+64	;
			if (tid1+(warp_id<<9)+96	<seg_size) rg_v3  = tid1+(warp_id<<9)+96	;
			if (tid1+(warp_id<<9)+128	<seg_size) rg_v4  = tid1+(warp_id<<9)+128	;
			if (tid1+(warp_id<<9)+160	<seg_size) rg_v5  = tid1+(warp_id<<9)+160	;
			if (tid1+(warp_id<<9)+192	<seg_size) rg_v6  = tid1+(warp_id<<9)+192	;
			if (tid1+(warp_id<<9)+224	<seg_size) rg_v7  = tid1+(warp_id<<9)+224	;
			if (tid1+(warp_id<<9)+256	<seg_size) rg_v8  = tid1+(warp_id<<9)+256	;
			if (tid1+(warp_id<<9)+288	<seg_size) rg_v9  = tid1+(warp_id<<9)+288	;
			if (tid1+(warp_id<<9)+320	<seg_size) rg_v10  = tid1+(warp_id<<9)+320	;
			if (tid1+(warp_id<<9)+352	<seg_size) rg_v11  = tid1+(warp_id<<9)+352	;
			if (tid1+(warp_id<<9)+384	<seg_size) rg_v12  = tid1+(warp_id<<9)+384	;
			if (tid1+(warp_id<<9)+416	<seg_size) rg_v13  = tid1+(warp_id<<9)+416	;
			if (tid1+(warp_id<<9)+448	<seg_size) rg_v14  = tid1+(warp_id<<9)+448	;
			if (tid1+(warp_id<<9)+480	<seg_size) rg_v15  = tid1+(warp_id<<9)+480	;

			// sort 512 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);

			// Store register results to shared memory
			smem[(warp_id<<9) + (tid1<<4) + 0] = rg_k0;
			smem[(warp_id<<9) + (tid1<<4) + 1] = rg_k1;
			smem[(warp_id<<9) + (tid1<<4) + 2] = rg_k2;
			smem[(warp_id<<9) + (tid1<<4) + 3] = rg_k3;
			smem[(warp_id<<9) + (tid1<<4) + 4] = rg_k4;
			smem[(warp_id<<9) + (tid1<<4) + 5] = rg_k5;
			smem[(warp_id<<9) + (tid1<<4) + 6] = rg_k6;
			smem[(warp_id<<9) + (tid1<<4) + 7] = rg_k7;
			smem[(warp_id<<9) + (tid1<<4) + 8] = rg_k8;
			smem[(warp_id<<9) + (tid1<<4) + 9] = rg_k9;
			smem[(warp_id<<9) + (tid1<<4) + 10] = rg_k10;
			smem[(warp_id<<9) + (tid1<<4) + 11] = rg_k11;
			smem[(warp_id<<9) + (tid1<<4) + 12] = rg_k12;
			smem[(warp_id<<9) + (tid1<<4) + 13] = rg_k13;
			smem[(warp_id<<9) + (tid1<<4) + 14] = rg_k14;
			smem[(warp_id<<9) + (tid1<<4) + 15] = rg_k15;
			tmem[(warp_id<<9) + (tid1<<4) + 0] = rg_v0;
			tmem[(warp_id<<9) + (tid1<<4) + 1] = rg_v1;
			tmem[(warp_id<<9) + (tid1<<4) + 2] = rg_v2;
			tmem[(warp_id<<9) + (tid1<<4) + 3] = rg_v3;
			tmem[(warp_id<<9) + (tid1<<4) + 4] = rg_v4;
			tmem[(warp_id<<9) + (tid1<<4) + 5] = rg_v5;
			tmem[(warp_id<<9) + (tid1<<4) + 6] = rg_v6;
			tmem[(warp_id<<9) + (tid1<<4) + 7] = rg_v7;
			tmem[(warp_id<<9) + (tid1<<4) + 8] = rg_v8;
			tmem[(warp_id<<9) + (tid1<<4) + 9] = rg_v9;
			tmem[(warp_id<<9) + (tid1<<4) + 10] = rg_v10;
			tmem[(warp_id<<9) + (tid1<<4) + 11] = rg_v11;
			tmem[(warp_id<<9) + (tid1<<4) + 12] = rg_v12;
			tmem[(warp_id<<9) + (tid1<<4) + 13] = rg_v13;
			tmem[(warp_id<<9) + (tid1<<4) + 14] = rg_v14;
			tmem[(warp_id<<9) + (tid1<<4) + 15] = rg_v15;
		}
		__syncthreads();

		// Merge in 4 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 512;
			rhs_len = 512;
			gran = tid1<<4;
			gran += (warp_id & 1) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 1024;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 3) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 2048;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 7) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 4096;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 15) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		if ((warp_id << 9) + 0 + tid1 < seg_size) keyB[k + (warp_id << 9) + 0 + tid1] = smem[(warp_id << 9) + 0 + tid1];
		if ((warp_id << 9) + 32 + tid1 < seg_size) keyB[k + (warp_id << 9) + 32 + tid1] = smem[(warp_id << 9) + 32 + tid1];
		if ((warp_id << 9) + 64 + tid1 < seg_size) keyB[k + (warp_id << 9) + 64 + tid1] = smem[(warp_id << 9) + 64 + tid1];
		if ((warp_id << 9) + 96 + tid1 < seg_size) keyB[k + (warp_id << 9) + 96 + tid1] = smem[(warp_id << 9) + 96 + tid1];
		if ((warp_id << 9) + 128 + tid1 < seg_size) keyB[k + (warp_id << 9) + 128 + tid1] = smem[(warp_id << 9) + 128 + tid1];
		if ((warp_id << 9) + 160 + tid1 < seg_size) keyB[k + (warp_id << 9) + 160 + tid1] = smem[(warp_id << 9) + 160 + tid1];
		if ((warp_id << 9) + 192 + tid1 < seg_size) keyB[k + (warp_id << 9) + 192 + tid1] = smem[(warp_id << 9) + 192 + tid1];
		if ((warp_id << 9) + 224 + tid1 < seg_size) keyB[k + (warp_id << 9) + 224 + tid1] = smem[(warp_id << 9) + 224 + tid1];
		if ((warp_id << 9) + 256 + tid1 < seg_size) keyB[k + (warp_id << 9) + 256 + tid1] = smem[(warp_id << 9) + 256 + tid1];
		if ((warp_id << 9) + 288 + tid1 < seg_size) keyB[k + (warp_id << 9) + 288 + tid1] = smem[(warp_id << 9) + 288 + tid1];
		if ((warp_id << 9) + 320 + tid1 < seg_size) keyB[k + (warp_id << 9) + 320 + tid1] = smem[(warp_id << 9) + 320 + tid1];
		if ((warp_id << 9) + 352 + tid1 < seg_size) keyB[k + (warp_id << 9) + 352 + tid1] = smem[(warp_id << 9) + 352 + tid1];
		if ((warp_id << 9) + 384 + tid1 < seg_size) keyB[k + (warp_id << 9) + 384 + tid1] = smem[(warp_id << 9) + 384 + tid1];
		if ((warp_id << 9) + 416 + tid1 < seg_size) keyB[k + (warp_id << 9) + 416 + tid1] = smem[(warp_id << 9) + 416 + tid1];
		if ((warp_id << 9) + 448 + tid1 < seg_size) keyB[k + (warp_id << 9) + 448 + tid1] = smem[(warp_id << 9) + 448 + tid1];
		if ((warp_id << 9) + 480 + tid1 < seg_size) keyB[k + (warp_id << 9) + 480 + tid1] = smem[(warp_id << 9) + 480 + tid1];

		if ((warp_id << 9) + 0 + tid1 < seg_size) valB[k + (warp_id << 9) + 0 + tid1] = val[k + tmem[(warp_id << 9) + 0 + tid1]];
		if ((warp_id << 9) + 32 + tid1 < seg_size) valB[k + (warp_id << 9) + 32 + tid1] = val[k + tmem[(warp_id << 9) + 32 + tid1]];
		if ((warp_id << 9) + 64 + tid1 < seg_size) valB[k + (warp_id << 9) + 64 + tid1] = val[k + tmem[(warp_id << 9) + 64 + tid1]];
		if ((warp_id << 9) + 96 + tid1 < seg_size) valB[k + (warp_id << 9) + 96 + tid1] = val[k + tmem[(warp_id << 9) + 96 + tid1]];
		if ((warp_id << 9) + 128 + tid1 < seg_size) valB[k + (warp_id << 9) + 128 + tid1] = val[k + tmem[(warp_id << 9) + 128 + tid1]];
		if ((warp_id << 9) + 160 + tid1 < seg_size) valB[k + (warp_id << 9) + 160 + tid1] = val[k + tmem[(warp_id << 9) + 160 + tid1]];
		if ((warp_id << 9) + 192 + tid1 < seg_size) valB[k + (warp_id << 9) + 192 + tid1] = val[k + tmem[(warp_id << 9) + 192 + tid1]];
		if ((warp_id << 9) + 224 + tid1 < seg_size) valB[k + (warp_id << 9) + 224 + tid1] = val[k + tmem[(warp_id << 9) + 224 + tid1]];
		if ((warp_id << 9) + 256 + tid1 < seg_size) valB[k + (warp_id << 9) + 256 + tid1] = val[k + tmem[(warp_id << 9) + 256 + tid1]];
		if ((warp_id << 9) + 288 + tid1 < seg_size) valB[k + (warp_id << 9) + 288 + tid1] = val[k + tmem[(warp_id << 9) + 288 + tid1]];
		if ((warp_id << 9) + 320 + tid1 < seg_size) valB[k + (warp_id << 9) + 320 + tid1] = val[k + tmem[(warp_id << 9) + 320 + tid1]];
		if ((warp_id << 9) + 352 + tid1 < seg_size) valB[k + (warp_id << 9) + 352 + tid1] = val[k + tmem[(warp_id << 9) + 352 + tid1]];
		if ((warp_id << 9) + 384 + tid1 < seg_size) valB[k + (warp_id << 9) + 384 + tid1] = val[k + tmem[(warp_id << 9) + 384 + tid1]];
		if ((warp_id << 9) + 416 + tid1 < seg_size) valB[k + (warp_id << 9) + 416 + tid1] = val[k + tmem[(warp_id << 9) + 416 + tid1]];
		if ((warp_id << 9) + 448 + tid1 < seg_size) valB[k + (warp_id << 9) + 448 + tid1] = val[k + tmem[(warp_id << 9) + 448 + tid1]];
		if ((warp_id << 9) + 480 + tid1 < seg_size) valB[k + (warp_id << 9) + 480 + tid1] = val[k + tmem[(warp_id << 9) + 480 + tid1]];
	}
}

// 256 threads per block | 32 ppt | strided
template<class K, class T>
__global__
void my_blk256_ppt32_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	extern __shared__ char ext_shared_memory[];
	K* smem = (K*) ext_shared_memory;
	int* tmem = (int*) (&smem[8192]);
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	K rg_k16;
	K rg_k17;
	K rg_k18;
	K rg_k19;
	K rg_k20;
	K rg_k21;
	K rg_k22;
	K rg_k23;
	K rg_k24;
	K rg_k25;
	K rg_k26;
	K rg_k27;
	K rg_k28;
	K rg_k29;
	K rg_k30;
	K rg_k31;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int rg_v16;
	int rg_v17;
	int rg_v18;
	int rg_v19;
	int rg_v20;
	int rg_v21;
	int rg_v22;
	int rg_v23;
	int rg_v24;
	int rg_v25;
	int rg_v26;
	int rg_v27;
	int rg_v28;
	int rg_v29;
	int rg_v30;
	int rg_v31;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 1023) / 1024);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<10)+0	<seg_size)?key[k+tid1+(warp_id<<10)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<10)+32	<seg_size)?key[k+tid1+(warp_id<<10)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<10)+64	<seg_size)?key[k+tid1+(warp_id<<10)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<10)+96	<seg_size)?key[k+tid1+(warp_id<<10)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<10)+128	<seg_size)?key[k+tid1+(warp_id<<10)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<10)+160	<seg_size)?key[k+tid1+(warp_id<<10)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<10)+192	<seg_size)?key[k+tid1+(warp_id<<10)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<10)+224	<seg_size)?key[k+tid1+(warp_id<<10)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<10)+256	<seg_size)?key[k+tid1+(warp_id<<10)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<10)+288	<seg_size)?key[k+tid1+(warp_id<<10)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<10)+320	<seg_size)?key[k+tid1+(warp_id<<10)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<10)+352	<seg_size)?key[k+tid1+(warp_id<<10)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<10)+384	<seg_size)?key[k+tid1+(warp_id<<10)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<10)+416	<seg_size)?key[k+tid1+(warp_id<<10)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<10)+448	<seg_size)?key[k+tid1+(warp_id<<10)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<10)+480	<seg_size)?key[k+tid1+(warp_id<<10)+480	]:std::numeric_limits<K>::max();
			rg_k16  = (tid1+(warp_id<<10)+512	<seg_size)?key[k+tid1+(warp_id<<10)+512	]:std::numeric_limits<K>::max();
			rg_k17  = (tid1+(warp_id<<10)+544	<seg_size)?key[k+tid1+(warp_id<<10)+544	]:std::numeric_limits<K>::max();
			rg_k18  = (tid1+(warp_id<<10)+576	<seg_size)?key[k+tid1+(warp_id<<10)+576	]:std::numeric_limits<K>::max();
			rg_k19  = (tid1+(warp_id<<10)+608	<seg_size)?key[k+tid1+(warp_id<<10)+608	]:std::numeric_limits<K>::max();
			rg_k20  = (tid1+(warp_id<<10)+640	<seg_size)?key[k+tid1+(warp_id<<10)+640	]:std::numeric_limits<K>::max();
			rg_k21  = (tid1+(warp_id<<10)+672	<seg_size)?key[k+tid1+(warp_id<<10)+672	]:std::numeric_limits<K>::max();
			rg_k22  = (tid1+(warp_id<<10)+704	<seg_size)?key[k+tid1+(warp_id<<10)+704	]:std::numeric_limits<K>::max();
			rg_k23  = (tid1+(warp_id<<10)+736	<seg_size)?key[k+tid1+(warp_id<<10)+736	]:std::numeric_limits<K>::max();
			rg_k24  = (tid1+(warp_id<<10)+768	<seg_size)?key[k+tid1+(warp_id<<10)+768	]:std::numeric_limits<K>::max();
			rg_k25  = (tid1+(warp_id<<10)+800	<seg_size)?key[k+tid1+(warp_id<<10)+800	]:std::numeric_limits<K>::max();
			rg_k26  = (tid1+(warp_id<<10)+832	<seg_size)?key[k+tid1+(warp_id<<10)+832	]:std::numeric_limits<K>::max();
			rg_k27  = (tid1+(warp_id<<10)+864	<seg_size)?key[k+tid1+(warp_id<<10)+864	]:std::numeric_limits<K>::max();
			rg_k28  = (tid1+(warp_id<<10)+896	<seg_size)?key[k+tid1+(warp_id<<10)+896	]:std::numeric_limits<K>::max();
			rg_k29  = (tid1+(warp_id<<10)+928	<seg_size)?key[k+tid1+(warp_id<<10)+928	]:std::numeric_limits<K>::max();
			rg_k30  = (tid1+(warp_id<<10)+960	<seg_size)?key[k+tid1+(warp_id<<10)+960	]:std::numeric_limits<K>::max();
			rg_k31  = (tid1+(warp_id<<10)+992	<seg_size)?key[k+tid1+(warp_id<<10)+992	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<10)+0	<seg_size) rg_v0  = tid1+(warp_id<<10)+0	;
			if (tid1+(warp_id<<10)+32	<seg_size) rg_v1  = tid1+(warp_id<<10)+32	;
			if (tid1+(warp_id<<10)+64	<seg_size) rg_v2  = tid1+(warp_id<<10)+64	;
			if (tid1+(warp_id<<10)+96	<seg_size) rg_v3  = tid1+(warp_id<<10)+96	;
			if (tid1+(warp_id<<10)+128	<seg_size) rg_v4  = tid1+(warp_id<<10)+128	;
			if (tid1+(warp_id<<10)+160	<seg_size) rg_v5  = tid1+(warp_id<<10)+160	;
			if (tid1+(warp_id<<10)+192	<seg_size) rg_v6  = tid1+(warp_id<<10)+192	;
			if (tid1+(warp_id<<10)+224	<seg_size) rg_v7  = tid1+(warp_id<<10)+224	;
			if (tid1+(warp_id<<10)+256	<seg_size) rg_v8  = tid1+(warp_id<<10)+256	;
			if (tid1+(warp_id<<10)+288	<seg_size) rg_v9  = tid1+(warp_id<<10)+288	;
			if (tid1+(warp_id<<10)+320	<seg_size) rg_v10  = tid1+(warp_id<<10)+320	;
			if (tid1+(warp_id<<10)+352	<seg_size) rg_v11  = tid1+(warp_id<<10)+352	;
			if (tid1+(warp_id<<10)+384	<seg_size) rg_v12  = tid1+(warp_id<<10)+384	;
			if (tid1+(warp_id<<10)+416	<seg_size) rg_v13  = tid1+(warp_id<<10)+416	;
			if (tid1+(warp_id<<10)+448	<seg_size) rg_v14  = tid1+(warp_id<<10)+448	;
			if (tid1+(warp_id<<10)+480	<seg_size) rg_v15  = tid1+(warp_id<<10)+480	;
			if (tid1+(warp_id<<10)+512	<seg_size) rg_v16  = tid1+(warp_id<<10)+512	;
			if (tid1+(warp_id<<10)+544	<seg_size) rg_v17  = tid1+(warp_id<<10)+544	;
			if (tid1+(warp_id<<10)+576	<seg_size) rg_v18  = tid1+(warp_id<<10)+576	;
			if (tid1+(warp_id<<10)+608	<seg_size) rg_v19  = tid1+(warp_id<<10)+608	;
			if (tid1+(warp_id<<10)+640	<seg_size) rg_v20  = tid1+(warp_id<<10)+640	;
			if (tid1+(warp_id<<10)+672	<seg_size) rg_v21  = tid1+(warp_id<<10)+672	;
			if (tid1+(warp_id<<10)+704	<seg_size) rg_v22  = tid1+(warp_id<<10)+704	;
			if (tid1+(warp_id<<10)+736	<seg_size) rg_v23  = tid1+(warp_id<<10)+736	;
			if (tid1+(warp_id<<10)+768	<seg_size) rg_v24  = tid1+(warp_id<<10)+768	;
			if (tid1+(warp_id<<10)+800	<seg_size) rg_v25  = tid1+(warp_id<<10)+800	;
			if (tid1+(warp_id<<10)+832	<seg_size) rg_v26  = tid1+(warp_id<<10)+832	;
			if (tid1+(warp_id<<10)+864	<seg_size) rg_v27  = tid1+(warp_id<<10)+864	;
			if (tid1+(warp_id<<10)+896	<seg_size) rg_v28  = tid1+(warp_id<<10)+896	;
			if (tid1+(warp_id<<10)+928	<seg_size) rg_v29  = tid1+(warp_id<<10)+928	;
			if (tid1+(warp_id<<10)+960	<seg_size) rg_v30  = tid1+(warp_id<<10)+960	;
			if (tid1+(warp_id<<10)+992	<seg_size) rg_v31  = tid1+(warp_id<<10)+992	;

			// sort 1024 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			CMP_SWP(K, rg_k16, rg_k19, int, rg_v16, rg_v19);
			CMP_SWP(K, rg_k17, rg_k18, int, rg_v17, rg_v18);
			CMP_SWP(K, rg_k20, rg_k23, int, rg_v20, rg_v23);
			CMP_SWP(K, rg_k21, rg_k22, int, rg_v21, rg_v22);
			CMP_SWP(K, rg_k24, rg_k27, int, rg_v24, rg_v27);
			CMP_SWP(K, rg_k25, rg_k26, int, rg_v25, rg_v26);
			CMP_SWP(K, rg_k28, rg_k31, int, rg_v28, rg_v31);
			CMP_SWP(K, rg_k29, rg_k30, int, rg_v29, rg_v30);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			CMP_SWP(K, rg_k16, rg_k23, int, rg_v16, rg_v23);
			CMP_SWP(K, rg_k17, rg_k22, int, rg_v17, rg_v22);
			CMP_SWP(K, rg_k18, rg_k21, int, rg_v18, rg_v21);
			CMP_SWP(K, rg_k19, rg_k20, int, rg_v19, rg_v20);
			CMP_SWP(K, rg_k24, rg_k31, int, rg_v24, rg_v31);
			CMP_SWP(K, rg_k25, rg_k30, int, rg_v25, rg_v30);
			CMP_SWP(K, rg_k26, rg_k29, int, rg_v26, rg_v29);
			CMP_SWP(K, rg_k27, rg_k28, int, rg_v27, rg_v28);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			CMP_SWP(K, rg_k16, rg_k31, int, rg_v16, rg_v31);
			CMP_SWP(K, rg_k17, rg_k30, int, rg_v17, rg_v30);
			CMP_SWP(K, rg_k18, rg_k29, int, rg_v18, rg_v29);
			CMP_SWP(K, rg_k19, rg_k28, int, rg_v19, rg_v28);
			CMP_SWP(K, rg_k20, rg_k27, int, rg_v20, rg_v27);
			CMP_SWP(K, rg_k21, rg_k26, int, rg_v21, rg_v26);
			CMP_SWP(K, rg_k22, rg_k25, int, rg_v22, rg_v25);
			CMP_SWP(K, rg_k23, rg_k24, int, rg_v23, rg_v24);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k31, int, rg_v0, rg_v31);
			CMP_SWP(K, rg_k1, rg_k30, int, rg_v1, rg_v30);
			CMP_SWP(K, rg_k2, rg_k29, int, rg_v2, rg_v29);
			CMP_SWP(K, rg_k3, rg_k28, int, rg_v3, rg_v28);
			CMP_SWP(K, rg_k4, rg_k27, int, rg_v4, rg_v27);
			CMP_SWP(K, rg_k5, rg_k26, int, rg_v5, rg_v26);
			CMP_SWP(K, rg_k6, rg_k25, int, rg_v6, rg_v25);
			CMP_SWP(K, rg_k7, rg_k24, int, rg_v7, rg_v24);
			CMP_SWP(K, rg_k8, rg_k23, int, rg_v8, rg_v23);
			CMP_SWP(K, rg_k9, rg_k22, int, rg_v9, rg_v22);
			CMP_SWP(K, rg_k10, rg_k21, int, rg_v10, rg_v21);
			CMP_SWP(K, rg_k11, rg_k20, int, rg_v11, rg_v20);
			CMP_SWP(K, rg_k12, rg_k19, int, rg_v12, rg_v19);
			CMP_SWP(K, rg_k13, rg_k18, int, rg_v13, rg_v18);
			CMP_SWP(K, rg_k14, rg_k17, int, rg_v14, rg_v17);
			CMP_SWP(K, rg_k15, rg_k16, int, rg_v15, rg_v16);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);

			// Store register results to shared memory
			smem[(warp_id<<10) + (tid1<<5) + 0] = rg_k0;
			smem[(warp_id<<10) + (tid1<<5) + 1] = rg_k1;
			smem[(warp_id<<10) + (tid1<<5) + 2] = rg_k2;
			smem[(warp_id<<10) + (tid1<<5) + 3] = rg_k3;
			smem[(warp_id<<10) + (tid1<<5) + 4] = rg_k4;
			smem[(warp_id<<10) + (tid1<<5) + 5] = rg_k5;
			smem[(warp_id<<10) + (tid1<<5) + 6] = rg_k6;
			smem[(warp_id<<10) + (tid1<<5) + 7] = rg_k7;
			smem[(warp_id<<10) + (tid1<<5) + 8] = rg_k8;
			smem[(warp_id<<10) + (tid1<<5) + 9] = rg_k9;
			smem[(warp_id<<10) + (tid1<<5) + 10] = rg_k10;
			smem[(warp_id<<10) + (tid1<<5) + 11] = rg_k11;
			smem[(warp_id<<10) + (tid1<<5) + 12] = rg_k12;
			smem[(warp_id<<10) + (tid1<<5) + 13] = rg_k13;
			smem[(warp_id<<10) + (tid1<<5) + 14] = rg_k14;
			smem[(warp_id<<10) + (tid1<<5) + 15] = rg_k15;
			smem[(warp_id<<10) + (tid1<<5) + 16] = rg_k16;
			smem[(warp_id<<10) + (tid1<<5) + 17] = rg_k17;
			smem[(warp_id<<10) + (tid1<<5) + 18] = rg_k18;
			smem[(warp_id<<10) + (tid1<<5) + 19] = rg_k19;
			smem[(warp_id<<10) + (tid1<<5) + 20] = rg_k20;
			smem[(warp_id<<10) + (tid1<<5) + 21] = rg_k21;
			smem[(warp_id<<10) + (tid1<<5) + 22] = rg_k22;
			smem[(warp_id<<10) + (tid1<<5) + 23] = rg_k23;
			smem[(warp_id<<10) + (tid1<<5) + 24] = rg_k24;
			smem[(warp_id<<10) + (tid1<<5) + 25] = rg_k25;
			smem[(warp_id<<10) + (tid1<<5) + 26] = rg_k26;
			smem[(warp_id<<10) + (tid1<<5) + 27] = rg_k27;
			smem[(warp_id<<10) + (tid1<<5) + 28] = rg_k28;
			smem[(warp_id<<10) + (tid1<<5) + 29] = rg_k29;
			smem[(warp_id<<10) + (tid1<<5) + 30] = rg_k30;
			smem[(warp_id<<10) + (tid1<<5) + 31] = rg_k31;
			tmem[(warp_id<<10) + (tid1<<5) + 0] = rg_v0;
			tmem[(warp_id<<10) + (tid1<<5) + 1] = rg_v1;
			tmem[(warp_id<<10) + (tid1<<5) + 2] = rg_v2;
			tmem[(warp_id<<10) + (tid1<<5) + 3] = rg_v3;
			tmem[(warp_id<<10) + (tid1<<5) + 4] = rg_v4;
			tmem[(warp_id<<10) + (tid1<<5) + 5] = rg_v5;
			tmem[(warp_id<<10) + (tid1<<5) + 6] = rg_v6;
			tmem[(warp_id<<10) + (tid1<<5) + 7] = rg_v7;
			tmem[(warp_id<<10) + (tid1<<5) + 8] = rg_v8;
			tmem[(warp_id<<10) + (tid1<<5) + 9] = rg_v9;
			tmem[(warp_id<<10) + (tid1<<5) + 10] = rg_v10;
			tmem[(warp_id<<10) + (tid1<<5) + 11] = rg_v11;
			tmem[(warp_id<<10) + (tid1<<5) + 12] = rg_v12;
			tmem[(warp_id<<10) + (tid1<<5) + 13] = rg_v13;
			tmem[(warp_id<<10) + (tid1<<5) + 14] = rg_v14;
			tmem[(warp_id<<10) + (tid1<<5) + 15] = rg_v15;
			tmem[(warp_id<<10) + (tid1<<5) + 16] = rg_v16;
			tmem[(warp_id<<10) + (tid1<<5) + 17] = rg_v17;
			tmem[(warp_id<<10) + (tid1<<5) + 18] = rg_v18;
			tmem[(warp_id<<10) + (tid1<<5) + 19] = rg_v19;
			tmem[(warp_id<<10) + (tid1<<5) + 20] = rg_v20;
			tmem[(warp_id<<10) + (tid1<<5) + 21] = rg_v21;
			tmem[(warp_id<<10) + (tid1<<5) + 22] = rg_v22;
			tmem[(warp_id<<10) + (tid1<<5) + 23] = rg_v23;
			tmem[(warp_id<<10) + (tid1<<5) + 24] = rg_v24;
			tmem[(warp_id<<10) + (tid1<<5) + 25] = rg_v25;
			tmem[(warp_id<<10) + (tid1<<5) + 26] = rg_v26;
			tmem[(warp_id<<10) + (tid1<<5) + 27] = rg_v27;
			tmem[(warp_id<<10) + (tid1<<5) + 28] = rg_v28;
			tmem[(warp_id<<10) + (tid1<<5) + 29] = rg_v29;
			tmem[(warp_id<<10) + (tid1<<5) + 30] = rg_v30;
			tmem[(warp_id<<10) + (tid1<<5) + 31] = rg_v31;
		}
		__syncthreads();

		// Merge in 3 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 1024;
			rhs_len = 1024;
			gran = tid1<<5;
			gran += (warp_id & 1) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 2048;
			rhs_len = 1024 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<5;
			gran += (warp_id & 3) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 4096;
			rhs_len = 1024 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<5;
			gran += (warp_id & 7) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		if ((warp_id << 10) + 0 + tid1 < seg_size) keyB[k + (warp_id << 10) + 0 + tid1] = smem[(warp_id << 10) + 0 + tid1];
		if ((warp_id << 10) + 32 + tid1 < seg_size) keyB[k + (warp_id << 10) + 32 + tid1] = smem[(warp_id << 10) + 32 + tid1];
		if ((warp_id << 10) + 64 + tid1 < seg_size) keyB[k + (warp_id << 10) + 64 + tid1] = smem[(warp_id << 10) + 64 + tid1];
		if ((warp_id << 10) + 96 + tid1 < seg_size) keyB[k + (warp_id << 10) + 96 + tid1] = smem[(warp_id << 10) + 96 + tid1];
		if ((warp_id << 10) + 128 + tid1 < seg_size) keyB[k + (warp_id << 10) + 128 + tid1] = smem[(warp_id << 10) + 128 + tid1];
		if ((warp_id << 10) + 160 + tid1 < seg_size) keyB[k + (warp_id << 10) + 160 + tid1] = smem[(warp_id << 10) + 160 + tid1];
		if ((warp_id << 10) + 192 + tid1 < seg_size) keyB[k + (warp_id << 10) + 192 + tid1] = smem[(warp_id << 10) + 192 + tid1];
		if ((warp_id << 10) + 224 + tid1 < seg_size) keyB[k + (warp_id << 10) + 224 + tid1] = smem[(warp_id << 10) + 224 + tid1];
		if ((warp_id << 10) + 256 + tid1 < seg_size) keyB[k + (warp_id << 10) + 256 + tid1] = smem[(warp_id << 10) + 256 + tid1];
		if ((warp_id << 10) + 288 + tid1 < seg_size) keyB[k + (warp_id << 10) + 288 + tid1] = smem[(warp_id << 10) + 288 + tid1];
		if ((warp_id << 10) + 320 + tid1 < seg_size) keyB[k + (warp_id << 10) + 320 + tid1] = smem[(warp_id << 10) + 320 + tid1];
		if ((warp_id << 10) + 352 + tid1 < seg_size) keyB[k + (warp_id << 10) + 352 + tid1] = smem[(warp_id << 10) + 352 + tid1];
		if ((warp_id << 10) + 384 + tid1 < seg_size) keyB[k + (warp_id << 10) + 384 + tid1] = smem[(warp_id << 10) + 384 + tid1];
		if ((warp_id << 10) + 416 + tid1 < seg_size) keyB[k + (warp_id << 10) + 416 + tid1] = smem[(warp_id << 10) + 416 + tid1];
		if ((warp_id << 10) + 448 + tid1 < seg_size) keyB[k + (warp_id << 10) + 448 + tid1] = smem[(warp_id << 10) + 448 + tid1];
		if ((warp_id << 10) + 480 + tid1 < seg_size) keyB[k + (warp_id << 10) + 480 + tid1] = smem[(warp_id << 10) + 480 + tid1];
		if ((warp_id << 10) + 512 + tid1 < seg_size) keyB[k + (warp_id << 10) + 512 + tid1] = smem[(warp_id << 10) + 512 + tid1];
		if ((warp_id << 10) + 544 + tid1 < seg_size) keyB[k + (warp_id << 10) + 544 + tid1] = smem[(warp_id << 10) + 544 + tid1];
		if ((warp_id << 10) + 576 + tid1 < seg_size) keyB[k + (warp_id << 10) + 576 + tid1] = smem[(warp_id << 10) + 576 + tid1];
		if ((warp_id << 10) + 608 + tid1 < seg_size) keyB[k + (warp_id << 10) + 608 + tid1] = smem[(warp_id << 10) + 608 + tid1];
		if ((warp_id << 10) + 640 + tid1 < seg_size) keyB[k + (warp_id << 10) + 640 + tid1] = smem[(warp_id << 10) + 640 + tid1];
		if ((warp_id << 10) + 672 + tid1 < seg_size) keyB[k + (warp_id << 10) + 672 + tid1] = smem[(warp_id << 10) + 672 + tid1];
		if ((warp_id << 10) + 704 + tid1 < seg_size) keyB[k + (warp_id << 10) + 704 + tid1] = smem[(warp_id << 10) + 704 + tid1];
		if ((warp_id << 10) + 736 + tid1 < seg_size) keyB[k + (warp_id << 10) + 736 + tid1] = smem[(warp_id << 10) + 736 + tid1];
		if ((warp_id << 10) + 768 + tid1 < seg_size) keyB[k + (warp_id << 10) + 768 + tid1] = smem[(warp_id << 10) + 768 + tid1];
		if ((warp_id << 10) + 800 + tid1 < seg_size) keyB[k + (warp_id << 10) + 800 + tid1] = smem[(warp_id << 10) + 800 + tid1];
		if ((warp_id << 10) + 832 + tid1 < seg_size) keyB[k + (warp_id << 10) + 832 + tid1] = smem[(warp_id << 10) + 832 + tid1];
		if ((warp_id << 10) + 864 + tid1 < seg_size) keyB[k + (warp_id << 10) + 864 + tid1] = smem[(warp_id << 10) + 864 + tid1];
		if ((warp_id << 10) + 896 + tid1 < seg_size) keyB[k + (warp_id << 10) + 896 + tid1] = smem[(warp_id << 10) + 896 + tid1];
		if ((warp_id << 10) + 928 + tid1 < seg_size) keyB[k + (warp_id << 10) + 928 + tid1] = smem[(warp_id << 10) + 928 + tid1];
		if ((warp_id << 10) + 960 + tid1 < seg_size) keyB[k + (warp_id << 10) + 960 + tid1] = smem[(warp_id << 10) + 960 + tid1];
		if ((warp_id << 10) + 992 + tid1 < seg_size) keyB[k + (warp_id << 10) + 992 + tid1] = smem[(warp_id << 10) + 992 + tid1];

		if ((warp_id << 10) + 0 + tid1 < seg_size) valB[k + (warp_id << 10) + 0 + tid1] = val[k + tmem[(warp_id << 10) + 0 + tid1]];
		if ((warp_id << 10) + 32 + tid1 < seg_size) valB[k + (warp_id << 10) + 32 + tid1] = val[k + tmem[(warp_id << 10) + 32 + tid1]];
		if ((warp_id << 10) + 64 + tid1 < seg_size) valB[k + (warp_id << 10) + 64 + tid1] = val[k + tmem[(warp_id << 10) + 64 + tid1]];
		if ((warp_id << 10) + 96 + tid1 < seg_size) valB[k + (warp_id << 10) + 96 + tid1] = val[k + tmem[(warp_id << 10) + 96 + tid1]];
		if ((warp_id << 10) + 128 + tid1 < seg_size) valB[k + (warp_id << 10) + 128 + tid1] = val[k + tmem[(warp_id << 10) + 128 + tid1]];
		if ((warp_id << 10) + 160 + tid1 < seg_size) valB[k + (warp_id << 10) + 160 + tid1] = val[k + tmem[(warp_id << 10) + 160 + tid1]];
		if ((warp_id << 10) + 192 + tid1 < seg_size) valB[k + (warp_id << 10) + 192 + tid1] = val[k + tmem[(warp_id << 10) + 192 + tid1]];
		if ((warp_id << 10) + 224 + tid1 < seg_size) valB[k + (warp_id << 10) + 224 + tid1] = val[k + tmem[(warp_id << 10) + 224 + tid1]];
		if ((warp_id << 10) + 256 + tid1 < seg_size) valB[k + (warp_id << 10) + 256 + tid1] = val[k + tmem[(warp_id << 10) + 256 + tid1]];
		if ((warp_id << 10) + 288 + tid1 < seg_size) valB[k + (warp_id << 10) + 288 + tid1] = val[k + tmem[(warp_id << 10) + 288 + tid1]];
		if ((warp_id << 10) + 320 + tid1 < seg_size) valB[k + (warp_id << 10) + 320 + tid1] = val[k + tmem[(warp_id << 10) + 320 + tid1]];
		if ((warp_id << 10) + 352 + tid1 < seg_size) valB[k + (warp_id << 10) + 352 + tid1] = val[k + tmem[(warp_id << 10) + 352 + tid1]];
		if ((warp_id << 10) + 384 + tid1 < seg_size) valB[k + (warp_id << 10) + 384 + tid1] = val[k + tmem[(warp_id << 10) + 384 + tid1]];
		if ((warp_id << 10) + 416 + tid1 < seg_size) valB[k + (warp_id << 10) + 416 + tid1] = val[k + tmem[(warp_id << 10) + 416 + tid1]];
		if ((warp_id << 10) + 448 + tid1 < seg_size) valB[k + (warp_id << 10) + 448 + tid1] = val[k + tmem[(warp_id << 10) + 448 + tid1]];
		if ((warp_id << 10) + 480 + tid1 < seg_size) valB[k + (warp_id << 10) + 480 + tid1] = val[k + tmem[(warp_id << 10) + 480 + tid1]];
		if ((warp_id << 10) + 512 + tid1 < seg_size) valB[k + (warp_id << 10) + 512 + tid1] = val[k + tmem[(warp_id << 10) + 512 + tid1]];
		if ((warp_id << 10) + 544 + tid1 < seg_size) valB[k + (warp_id << 10) + 544 + tid1] = val[k + tmem[(warp_id << 10) + 544 + tid1]];
		if ((warp_id << 10) + 576 + tid1 < seg_size) valB[k + (warp_id << 10) + 576 + tid1] = val[k + tmem[(warp_id << 10) + 576 + tid1]];
		if ((warp_id << 10) + 608 + tid1 < seg_size) valB[k + (warp_id << 10) + 608 + tid1] = val[k + tmem[(warp_id << 10) + 608 + tid1]];
		if ((warp_id << 10) + 640 + tid1 < seg_size) valB[k + (warp_id << 10) + 640 + tid1] = val[k + tmem[(warp_id << 10) + 640 + tid1]];
		if ((warp_id << 10) + 672 + tid1 < seg_size) valB[k + (warp_id << 10) + 672 + tid1] = val[k + tmem[(warp_id << 10) + 672 + tid1]];
		if ((warp_id << 10) + 704 + tid1 < seg_size) valB[k + (warp_id << 10) + 704 + tid1] = val[k + tmem[(warp_id << 10) + 704 + tid1]];
		if ((warp_id << 10) + 736 + tid1 < seg_size) valB[k + (warp_id << 10) + 736 + tid1] = val[k + tmem[(warp_id << 10) + 736 + tid1]];
		if ((warp_id << 10) + 768 + tid1 < seg_size) valB[k + (warp_id << 10) + 768 + tid1] = val[k + tmem[(warp_id << 10) + 768 + tid1]];
		if ((warp_id << 10) + 800 + tid1 < seg_size) valB[k + (warp_id << 10) + 800 + tid1] = val[k + tmem[(warp_id << 10) + 800 + tid1]];
		if ((warp_id << 10) + 832 + tid1 < seg_size) valB[k + (warp_id << 10) + 832 + tid1] = val[k + tmem[(warp_id << 10) + 832 + tid1]];
		if ((warp_id << 10) + 864 + tid1 < seg_size) valB[k + (warp_id << 10) + 864 + tid1] = val[k + tmem[(warp_id << 10) + 864 + tid1]];
		if ((warp_id << 10) + 896 + tid1 < seg_size) valB[k + (warp_id << 10) + 896 + tid1] = val[k + tmem[(warp_id << 10) + 896 + tid1]];
		if ((warp_id << 10) + 928 + tid1 < seg_size) valB[k + (warp_id << 10) + 928 + tid1] = val[k + tmem[(warp_id << 10) + 928 + tid1]];
		if ((warp_id << 10) + 960 + tid1 < seg_size) valB[k + (warp_id << 10) + 960 + tid1] = val[k + tmem[(warp_id << 10) + 960 + tid1]];
		if ((warp_id << 10) + 992 + tid1 < seg_size) valB[k + (warp_id << 10) + 992 + tid1] = val[k + tmem[(warp_id << 10) + 992 + tid1]];
	}
}

// segsize 16384

// 1024 threads per block | 16 ppt | strided
template<class K, class T>
__global__
void my_blk1024_ppt16_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	extern __shared__ char ext_shared_memory[];
	K* smem = (K*) ext_shared_memory;
	int* tmem = (int*) (&smem[16384]);
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 511) / 512);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<9)+0	<seg_size)?key[k+tid1+(warp_id<<9)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<9)+32	<seg_size)?key[k+tid1+(warp_id<<9)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<9)+64	<seg_size)?key[k+tid1+(warp_id<<9)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<9)+96	<seg_size)?key[k+tid1+(warp_id<<9)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<9)+128	<seg_size)?key[k+tid1+(warp_id<<9)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<9)+160	<seg_size)?key[k+tid1+(warp_id<<9)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<9)+192	<seg_size)?key[k+tid1+(warp_id<<9)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<9)+224	<seg_size)?key[k+tid1+(warp_id<<9)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<9)+256	<seg_size)?key[k+tid1+(warp_id<<9)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<9)+288	<seg_size)?key[k+tid1+(warp_id<<9)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<9)+320	<seg_size)?key[k+tid1+(warp_id<<9)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<9)+352	<seg_size)?key[k+tid1+(warp_id<<9)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<9)+384	<seg_size)?key[k+tid1+(warp_id<<9)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<9)+416	<seg_size)?key[k+tid1+(warp_id<<9)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<9)+448	<seg_size)?key[k+tid1+(warp_id<<9)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<9)+480	<seg_size)?key[k+tid1+(warp_id<<9)+480	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<9)+0	<seg_size) rg_v0  = tid1+(warp_id<<9)+0	;
			if (tid1+(warp_id<<9)+32	<seg_size) rg_v1  = tid1+(warp_id<<9)+32	;
			if (tid1+(warp_id<<9)+64	<seg_size) rg_v2  = tid1+(warp_id<<9)+64	;
			if (tid1+(warp_id<<9)+96	<seg_size) rg_v3  = tid1+(warp_id<<9)+96	;
			if (tid1+(warp_id<<9)+128	<seg_size) rg_v4  = tid1+(warp_id<<9)+128	;
			if (tid1+(warp_id<<9)+160	<seg_size) rg_v5  = tid1+(warp_id<<9)+160	;
			if (tid1+(warp_id<<9)+192	<seg_size) rg_v6  = tid1+(warp_id<<9)+192	;
			if (tid1+(warp_id<<9)+224	<seg_size) rg_v7  = tid1+(warp_id<<9)+224	;
			if (tid1+(warp_id<<9)+256	<seg_size) rg_v8  = tid1+(warp_id<<9)+256	;
			if (tid1+(warp_id<<9)+288	<seg_size) rg_v9  = tid1+(warp_id<<9)+288	;
			if (tid1+(warp_id<<9)+320	<seg_size) rg_v10  = tid1+(warp_id<<9)+320	;
			if (tid1+(warp_id<<9)+352	<seg_size) rg_v11  = tid1+(warp_id<<9)+352	;
			if (tid1+(warp_id<<9)+384	<seg_size) rg_v12  = tid1+(warp_id<<9)+384	;
			if (tid1+(warp_id<<9)+416	<seg_size) rg_v13  = tid1+(warp_id<<9)+416	;
			if (tid1+(warp_id<<9)+448	<seg_size) rg_v14  = tid1+(warp_id<<9)+448	;
			if (tid1+(warp_id<<9)+480	<seg_size) rg_v15  = tid1+(warp_id<<9)+480	;

			// sort 512 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);

			// Store register results to shared memory
			smem[(warp_id<<9) + (tid1<<4) + 0] = rg_k0;
			smem[(warp_id<<9) + (tid1<<4) + 1] = rg_k1;
			smem[(warp_id<<9) + (tid1<<4) + 2] = rg_k2;
			smem[(warp_id<<9) + (tid1<<4) + 3] = rg_k3;
			smem[(warp_id<<9) + (tid1<<4) + 4] = rg_k4;
			smem[(warp_id<<9) + (tid1<<4) + 5] = rg_k5;
			smem[(warp_id<<9) + (tid1<<4) + 6] = rg_k6;
			smem[(warp_id<<9) + (tid1<<4) + 7] = rg_k7;
			smem[(warp_id<<9) + (tid1<<4) + 8] = rg_k8;
			smem[(warp_id<<9) + (tid1<<4) + 9] = rg_k9;
			smem[(warp_id<<9) + (tid1<<4) + 10] = rg_k10;
			smem[(warp_id<<9) + (tid1<<4) + 11] = rg_k11;
			smem[(warp_id<<9) + (tid1<<4) + 12] = rg_k12;
			smem[(warp_id<<9) + (tid1<<4) + 13] = rg_k13;
			smem[(warp_id<<9) + (tid1<<4) + 14] = rg_k14;
			smem[(warp_id<<9) + (tid1<<4) + 15] = rg_k15;
			tmem[(warp_id<<9) + (tid1<<4) + 0] = rg_v0;
			tmem[(warp_id<<9) + (tid1<<4) + 1] = rg_v1;
			tmem[(warp_id<<9) + (tid1<<4) + 2] = rg_v2;
			tmem[(warp_id<<9) + (tid1<<4) + 3] = rg_v3;
			tmem[(warp_id<<9) + (tid1<<4) + 4] = rg_v4;
			tmem[(warp_id<<9) + (tid1<<4) + 5] = rg_v5;
			tmem[(warp_id<<9) + (tid1<<4) + 6] = rg_v6;
			tmem[(warp_id<<9) + (tid1<<4) + 7] = rg_v7;
			tmem[(warp_id<<9) + (tid1<<4) + 8] = rg_v8;
			tmem[(warp_id<<9) + (tid1<<4) + 9] = rg_v9;
			tmem[(warp_id<<9) + (tid1<<4) + 10] = rg_v10;
			tmem[(warp_id<<9) + (tid1<<4) + 11] = rg_v11;
			tmem[(warp_id<<9) + (tid1<<4) + 12] = rg_v12;
			tmem[(warp_id<<9) + (tid1<<4) + 13] = rg_v13;
			tmem[(warp_id<<9) + (tid1<<4) + 14] = rg_v14;
			tmem[(warp_id<<9) + (tid1<<4) + 15] = rg_v15;
		}
		__syncthreads();

		// Merge in 5 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 512;
			rhs_len = 512;
			gran = tid1<<4;
			gran += (warp_id & 1) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 1024;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 3) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 2048;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 7) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 4096;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 15) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		// Step 4
		grp_start_wp_id = ((warp_id>>5)<<5);
		if(grp_start_wp_id + (1 << 4) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 512;
			lhs_len = 8192;
			rhs_len = 512 * (1 +
				(grp_start_wp_id + 17 < full_wp) +
				(grp_start_wp_id + 18 < full_wp) +
				(grp_start_wp_id + 19 < full_wp) +
				(grp_start_wp_id + 20 < full_wp) +
				(grp_start_wp_id + 21 < full_wp) +
				(grp_start_wp_id + 22 < full_wp) +
				(grp_start_wp_id + 23 < full_wp) +
				(grp_start_wp_id + 24 < full_wp) +
				(grp_start_wp_id + 25 < full_wp) +
				(grp_start_wp_id + 26 < full_wp) +
				(grp_start_wp_id + 27 < full_wp) +
				(grp_start_wp_id + 28 < full_wp) +
				(grp_start_wp_id + 29 < full_wp) +
				(grp_start_wp_id + 30 < full_wp) +
				(grp_start_wp_id + 31 < full_wp) );
			gran = tid1<<4;
			gran += (warp_id & 31) * 512;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 4) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
		}
		__syncthreads();

		if ((warp_id << 9) + 0 + tid1 < seg_size) keyB[k + (warp_id << 9) + 0 + tid1] = smem[(warp_id << 9) + 0 + tid1];
		if ((warp_id << 9) + 32 + tid1 < seg_size) keyB[k + (warp_id << 9) + 32 + tid1] = smem[(warp_id << 9) + 32 + tid1];
		if ((warp_id << 9) + 64 + tid1 < seg_size) keyB[k + (warp_id << 9) + 64 + tid1] = smem[(warp_id << 9) + 64 + tid1];
		if ((warp_id << 9) + 96 + tid1 < seg_size) keyB[k + (warp_id << 9) + 96 + tid1] = smem[(warp_id << 9) + 96 + tid1];
		if ((warp_id << 9) + 128 + tid1 < seg_size) keyB[k + (warp_id << 9) + 128 + tid1] = smem[(warp_id << 9) + 128 + tid1];
		if ((warp_id << 9) + 160 + tid1 < seg_size) keyB[k + (warp_id << 9) + 160 + tid1] = smem[(warp_id << 9) + 160 + tid1];
		if ((warp_id << 9) + 192 + tid1 < seg_size) keyB[k + (warp_id << 9) + 192 + tid1] = smem[(warp_id << 9) + 192 + tid1];
		if ((warp_id << 9) + 224 + tid1 < seg_size) keyB[k + (warp_id << 9) + 224 + tid1] = smem[(warp_id << 9) + 224 + tid1];
		if ((warp_id << 9) + 256 + tid1 < seg_size) keyB[k + (warp_id << 9) + 256 + tid1] = smem[(warp_id << 9) + 256 + tid1];
		if ((warp_id << 9) + 288 + tid1 < seg_size) keyB[k + (warp_id << 9) + 288 + tid1] = smem[(warp_id << 9) + 288 + tid1];
		if ((warp_id << 9) + 320 + tid1 < seg_size) keyB[k + (warp_id << 9) + 320 + tid1] = smem[(warp_id << 9) + 320 + tid1];
		if ((warp_id << 9) + 352 + tid1 < seg_size) keyB[k + (warp_id << 9) + 352 + tid1] = smem[(warp_id << 9) + 352 + tid1];
		if ((warp_id << 9) + 384 + tid1 < seg_size) keyB[k + (warp_id << 9) + 384 + tid1] = smem[(warp_id << 9) + 384 + tid1];
		if ((warp_id << 9) + 416 + tid1 < seg_size) keyB[k + (warp_id << 9) + 416 + tid1] = smem[(warp_id << 9) + 416 + tid1];
		if ((warp_id << 9) + 448 + tid1 < seg_size) keyB[k + (warp_id << 9) + 448 + tid1] = smem[(warp_id << 9) + 448 + tid1];
		if ((warp_id << 9) + 480 + tid1 < seg_size) keyB[k + (warp_id << 9) + 480 + tid1] = smem[(warp_id << 9) + 480 + tid1];

		if ((warp_id << 9) + 0 + tid1 < seg_size) valB[k + (warp_id << 9) + 0 + tid1] = val[k + tmem[(warp_id << 9) + 0 + tid1]];
		if ((warp_id << 9) + 32 + tid1 < seg_size) valB[k + (warp_id << 9) + 32 + tid1] = val[k + tmem[(warp_id << 9) + 32 + tid1]];
		if ((warp_id << 9) + 64 + tid1 < seg_size) valB[k + (warp_id << 9) + 64 + tid1] = val[k + tmem[(warp_id << 9) + 64 + tid1]];
		if ((warp_id << 9) + 96 + tid1 < seg_size) valB[k + (warp_id << 9) + 96 + tid1] = val[k + tmem[(warp_id << 9) + 96 + tid1]];
		if ((warp_id << 9) + 128 + tid1 < seg_size) valB[k + (warp_id << 9) + 128 + tid1] = val[k + tmem[(warp_id << 9) + 128 + tid1]];
		if ((warp_id << 9) + 160 + tid1 < seg_size) valB[k + (warp_id << 9) + 160 + tid1] = val[k + tmem[(warp_id << 9) + 160 + tid1]];
		if ((warp_id << 9) + 192 + tid1 < seg_size) valB[k + (warp_id << 9) + 192 + tid1] = val[k + tmem[(warp_id << 9) + 192 + tid1]];
		if ((warp_id << 9) + 224 + tid1 < seg_size) valB[k + (warp_id << 9) + 224 + tid1] = val[k + tmem[(warp_id << 9) + 224 + tid1]];
		if ((warp_id << 9) + 256 + tid1 < seg_size) valB[k + (warp_id << 9) + 256 + tid1] = val[k + tmem[(warp_id << 9) + 256 + tid1]];
		if ((warp_id << 9) + 288 + tid1 < seg_size) valB[k + (warp_id << 9) + 288 + tid1] = val[k + tmem[(warp_id << 9) + 288 + tid1]];
		if ((warp_id << 9) + 320 + tid1 < seg_size) valB[k + (warp_id << 9) + 320 + tid1] = val[k + tmem[(warp_id << 9) + 320 + tid1]];
		if ((warp_id << 9) + 352 + tid1 < seg_size) valB[k + (warp_id << 9) + 352 + tid1] = val[k + tmem[(warp_id << 9) + 352 + tid1]];
		if ((warp_id << 9) + 384 + tid1 < seg_size) valB[k + (warp_id << 9) + 384 + tid1] = val[k + tmem[(warp_id << 9) + 384 + tid1]];
		if ((warp_id << 9) + 416 + tid1 < seg_size) valB[k + (warp_id << 9) + 416 + tid1] = val[k + tmem[(warp_id << 9) + 416 + tid1]];
		if ((warp_id << 9) + 448 + tid1 < seg_size) valB[k + (warp_id << 9) + 448 + tid1] = val[k + tmem[(warp_id << 9) + 448 + tid1]];
		if ((warp_id << 9) + 480 + tid1 < seg_size) valB[k + (warp_id << 9) + 480 + tid1] = val[k + tmem[(warp_id << 9) + 480 + tid1]];
	}
}

// 512 threads per block | 32 ppt | strided
template<class K, class T>
__global__
void my_blk512_ppt32_shared_strd_only_full_warps(K *key, T *val, K *keyB, T *valB, int *segs, int *bin, int bin_size) {
	const int tid = threadIdx.x;
	const int bin_it = blockIdx.x;
	extern __shared__ char ext_shared_memory[];
	K* smem = (K*) ext_shared_memory;
	int* tmem = (int*) (&smem[16384]);
	const int bit1 = (tid>>0)&0x1;
	const int bit2 = (tid>>1)&0x1;
	const int bit3 = (tid>>2)&0x1;
	const int bit4 = (tid>>3)&0x1;
	const int bit5 = (tid>>4)&0x1;
	const int tid1 = threadIdx.x & 31;
	const int warp_id = threadIdx.x / 32;
	K rg_k0;
	K rg_k1;
	K rg_k2;
	K rg_k3;
	K rg_k4;
	K rg_k5;
	K rg_k6;
	K rg_k7;
	K rg_k8;
	K rg_k9;
	K rg_k10;
	K rg_k11;
	K rg_k12;
	K rg_k13;
	K rg_k14;
	K rg_k15;
	K rg_k16;
	K rg_k17;
	K rg_k18;
	K rg_k19;
	K rg_k20;
	K rg_k21;
	K rg_k22;
	K rg_k23;
	K rg_k24;
	K rg_k25;
	K rg_k26;
	K rg_k27;
	K rg_k28;
	K rg_k29;
	K rg_k30;
	K rg_k31;
	int rg_v0;
	int rg_v1;
	int rg_v2;
	int rg_v3;
	int rg_v4;
	int rg_v5;
	int rg_v6;
	int rg_v7;
	int rg_v8;
	int rg_v9;
	int rg_v10;
	int rg_v11;
	int rg_v12;
	int rg_v13;
	int rg_v14;
	int rg_v15;
	int rg_v16;
	int rg_v17;
	int rg_v18;
	int rg_v19;
	int rg_v20;
	int rg_v21;
	int rg_v22;
	int rg_v23;
	int rg_v24;
	int rg_v25;
	int rg_v26;
	int rg_v27;
	int rg_v28;
	int rg_v29;
	int rg_v30;
	int rg_v31;
	int k;
	int seg_size;

	if(bin_it < bin_size) {
		k = segs[bin[bin_it]];
		seg_size = segs[bin[bin_it]+1] - segs[bin[bin_it]];
		// Calculate the number of full warps needed
		int full_wp = ((seg_size + 1023) / 1024);
		if(warp_id < full_wp) {
			rg_k0  = (tid1+(warp_id<<10)+0	<seg_size)?key[k+tid1+(warp_id<<10)+0	]:std::numeric_limits<K>::max();
			rg_k1  = (tid1+(warp_id<<10)+32	<seg_size)?key[k+tid1+(warp_id<<10)+32	]:std::numeric_limits<K>::max();
			rg_k2  = (tid1+(warp_id<<10)+64	<seg_size)?key[k+tid1+(warp_id<<10)+64	]:std::numeric_limits<K>::max();
			rg_k3  = (tid1+(warp_id<<10)+96	<seg_size)?key[k+tid1+(warp_id<<10)+96	]:std::numeric_limits<K>::max();
			rg_k4  = (tid1+(warp_id<<10)+128	<seg_size)?key[k+tid1+(warp_id<<10)+128	]:std::numeric_limits<K>::max();
			rg_k5  = (tid1+(warp_id<<10)+160	<seg_size)?key[k+tid1+(warp_id<<10)+160	]:std::numeric_limits<K>::max();
			rg_k6  = (tid1+(warp_id<<10)+192	<seg_size)?key[k+tid1+(warp_id<<10)+192	]:std::numeric_limits<K>::max();
			rg_k7  = (tid1+(warp_id<<10)+224	<seg_size)?key[k+tid1+(warp_id<<10)+224	]:std::numeric_limits<K>::max();
			rg_k8  = (tid1+(warp_id<<10)+256	<seg_size)?key[k+tid1+(warp_id<<10)+256	]:std::numeric_limits<K>::max();
			rg_k9  = (tid1+(warp_id<<10)+288	<seg_size)?key[k+tid1+(warp_id<<10)+288	]:std::numeric_limits<K>::max();
			rg_k10  = (tid1+(warp_id<<10)+320	<seg_size)?key[k+tid1+(warp_id<<10)+320	]:std::numeric_limits<K>::max();
			rg_k11  = (tid1+(warp_id<<10)+352	<seg_size)?key[k+tid1+(warp_id<<10)+352	]:std::numeric_limits<K>::max();
			rg_k12  = (tid1+(warp_id<<10)+384	<seg_size)?key[k+tid1+(warp_id<<10)+384	]:std::numeric_limits<K>::max();
			rg_k13  = (tid1+(warp_id<<10)+416	<seg_size)?key[k+tid1+(warp_id<<10)+416	]:std::numeric_limits<K>::max();
			rg_k14  = (tid1+(warp_id<<10)+448	<seg_size)?key[k+tid1+(warp_id<<10)+448	]:std::numeric_limits<K>::max();
			rg_k15  = (tid1+(warp_id<<10)+480	<seg_size)?key[k+tid1+(warp_id<<10)+480	]:std::numeric_limits<K>::max();
			rg_k16  = (tid1+(warp_id<<10)+512	<seg_size)?key[k+tid1+(warp_id<<10)+512	]:std::numeric_limits<K>::max();
			rg_k17  = (tid1+(warp_id<<10)+544	<seg_size)?key[k+tid1+(warp_id<<10)+544	]:std::numeric_limits<K>::max();
			rg_k18  = (tid1+(warp_id<<10)+576	<seg_size)?key[k+tid1+(warp_id<<10)+576	]:std::numeric_limits<K>::max();
			rg_k19  = (tid1+(warp_id<<10)+608	<seg_size)?key[k+tid1+(warp_id<<10)+608	]:std::numeric_limits<K>::max();
			rg_k20  = (tid1+(warp_id<<10)+640	<seg_size)?key[k+tid1+(warp_id<<10)+640	]:std::numeric_limits<K>::max();
			rg_k21  = (tid1+(warp_id<<10)+672	<seg_size)?key[k+tid1+(warp_id<<10)+672	]:std::numeric_limits<K>::max();
			rg_k22  = (tid1+(warp_id<<10)+704	<seg_size)?key[k+tid1+(warp_id<<10)+704	]:std::numeric_limits<K>::max();
			rg_k23  = (tid1+(warp_id<<10)+736	<seg_size)?key[k+tid1+(warp_id<<10)+736	]:std::numeric_limits<K>::max();
			rg_k24  = (tid1+(warp_id<<10)+768	<seg_size)?key[k+tid1+(warp_id<<10)+768	]:std::numeric_limits<K>::max();
			rg_k25  = (tid1+(warp_id<<10)+800	<seg_size)?key[k+tid1+(warp_id<<10)+800	]:std::numeric_limits<K>::max();
			rg_k26  = (tid1+(warp_id<<10)+832	<seg_size)?key[k+tid1+(warp_id<<10)+832	]:std::numeric_limits<K>::max();
			rg_k27  = (tid1+(warp_id<<10)+864	<seg_size)?key[k+tid1+(warp_id<<10)+864	]:std::numeric_limits<K>::max();
			rg_k28  = (tid1+(warp_id<<10)+896	<seg_size)?key[k+tid1+(warp_id<<10)+896	]:std::numeric_limits<K>::max();
			rg_k29  = (tid1+(warp_id<<10)+928	<seg_size)?key[k+tid1+(warp_id<<10)+928	]:std::numeric_limits<K>::max();
			rg_k30  = (tid1+(warp_id<<10)+960	<seg_size)?key[k+tid1+(warp_id<<10)+960	]:std::numeric_limits<K>::max();
			rg_k31  = (tid1+(warp_id<<10)+992	<seg_size)?key[k+tid1+(warp_id<<10)+992	]:std::numeric_limits<K>::max();
			if (tid1+(warp_id<<10)+0	<seg_size) rg_v0  = tid1+(warp_id<<10)+0	;
			if (tid1+(warp_id<<10)+32	<seg_size) rg_v1  = tid1+(warp_id<<10)+32	;
			if (tid1+(warp_id<<10)+64	<seg_size) rg_v2  = tid1+(warp_id<<10)+64	;
			if (tid1+(warp_id<<10)+96	<seg_size) rg_v3  = tid1+(warp_id<<10)+96	;
			if (tid1+(warp_id<<10)+128	<seg_size) rg_v4  = tid1+(warp_id<<10)+128	;
			if (tid1+(warp_id<<10)+160	<seg_size) rg_v5  = tid1+(warp_id<<10)+160	;
			if (tid1+(warp_id<<10)+192	<seg_size) rg_v6  = tid1+(warp_id<<10)+192	;
			if (tid1+(warp_id<<10)+224	<seg_size) rg_v7  = tid1+(warp_id<<10)+224	;
			if (tid1+(warp_id<<10)+256	<seg_size) rg_v8  = tid1+(warp_id<<10)+256	;
			if (tid1+(warp_id<<10)+288	<seg_size) rg_v9  = tid1+(warp_id<<10)+288	;
			if (tid1+(warp_id<<10)+320	<seg_size) rg_v10  = tid1+(warp_id<<10)+320	;
			if (tid1+(warp_id<<10)+352	<seg_size) rg_v11  = tid1+(warp_id<<10)+352	;
			if (tid1+(warp_id<<10)+384	<seg_size) rg_v12  = tid1+(warp_id<<10)+384	;
			if (tid1+(warp_id<<10)+416	<seg_size) rg_v13  = tid1+(warp_id<<10)+416	;
			if (tid1+(warp_id<<10)+448	<seg_size) rg_v14  = tid1+(warp_id<<10)+448	;
			if (tid1+(warp_id<<10)+480	<seg_size) rg_v15  = tid1+(warp_id<<10)+480	;
			if (tid1+(warp_id<<10)+512	<seg_size) rg_v16  = tid1+(warp_id<<10)+512	;
			if (tid1+(warp_id<<10)+544	<seg_size) rg_v17  = tid1+(warp_id<<10)+544	;
			if (tid1+(warp_id<<10)+576	<seg_size) rg_v18  = tid1+(warp_id<<10)+576	;
			if (tid1+(warp_id<<10)+608	<seg_size) rg_v19  = tid1+(warp_id<<10)+608	;
			if (tid1+(warp_id<<10)+640	<seg_size) rg_v20  = tid1+(warp_id<<10)+640	;
			if (tid1+(warp_id<<10)+672	<seg_size) rg_v21  = tid1+(warp_id<<10)+672	;
			if (tid1+(warp_id<<10)+704	<seg_size) rg_v22  = tid1+(warp_id<<10)+704	;
			if (tid1+(warp_id<<10)+736	<seg_size) rg_v23  = tid1+(warp_id<<10)+736	;
			if (tid1+(warp_id<<10)+768	<seg_size) rg_v24  = tid1+(warp_id<<10)+768	;
			if (tid1+(warp_id<<10)+800	<seg_size) rg_v25  = tid1+(warp_id<<10)+800	;
			if (tid1+(warp_id<<10)+832	<seg_size) rg_v26  = tid1+(warp_id<<10)+832	;
			if (tid1+(warp_id<<10)+864	<seg_size) rg_v27  = tid1+(warp_id<<10)+864	;
			if (tid1+(warp_id<<10)+896	<seg_size) rg_v28  = tid1+(warp_id<<10)+896	;
			if (tid1+(warp_id<<10)+928	<seg_size) rg_v29  = tid1+(warp_id<<10)+928	;
			if (tid1+(warp_id<<10)+960	<seg_size) rg_v30  = tid1+(warp_id<<10)+960	;
			if (tid1+(warp_id<<10)+992	<seg_size) rg_v31  = tid1+(warp_id<<10)+992	;

			// sort 1024 elements
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k3, int, rg_v0, rg_v3);
			CMP_SWP(K, rg_k1, rg_k2, int, rg_v1, rg_v2);
			CMP_SWP(K, rg_k4, rg_k7, int, rg_v4, rg_v7);
			CMP_SWP(K, rg_k5, rg_k6, int, rg_v5, rg_v6);
			CMP_SWP(K, rg_k8, rg_k11, int, rg_v8, rg_v11);
			CMP_SWP(K, rg_k9, rg_k10, int, rg_v9, rg_v10);
			CMP_SWP(K, rg_k12, rg_k15, int, rg_v12, rg_v15);
			CMP_SWP(K, rg_k13, rg_k14, int, rg_v13, rg_v14);
			CMP_SWP(K, rg_k16, rg_k19, int, rg_v16, rg_v19);
			CMP_SWP(K, rg_k17, rg_k18, int, rg_v17, rg_v18);
			CMP_SWP(K, rg_k20, rg_k23, int, rg_v20, rg_v23);
			CMP_SWP(K, rg_k21, rg_k22, int, rg_v21, rg_v22);
			CMP_SWP(K, rg_k24, rg_k27, int, rg_v24, rg_v27);
			CMP_SWP(K, rg_k25, rg_k26, int, rg_v25, rg_v26);
			CMP_SWP(K, rg_k28, rg_k31, int, rg_v28, rg_v31);
			CMP_SWP(K, rg_k29, rg_k30, int, rg_v29, rg_v30);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k7, int, rg_v0, rg_v7);
			CMP_SWP(K, rg_k1, rg_k6, int, rg_v1, rg_v6);
			CMP_SWP(K, rg_k2, rg_k5, int, rg_v2, rg_v5);
			CMP_SWP(K, rg_k3, rg_k4, int, rg_v3, rg_v4);
			CMP_SWP(K, rg_k8, rg_k15, int, rg_v8, rg_v15);
			CMP_SWP(K, rg_k9, rg_k14, int, rg_v9, rg_v14);
			CMP_SWP(K, rg_k10, rg_k13, int, rg_v10, rg_v13);
			CMP_SWP(K, rg_k11, rg_k12, int, rg_v11, rg_v12);
			CMP_SWP(K, rg_k16, rg_k23, int, rg_v16, rg_v23);
			CMP_SWP(K, rg_k17, rg_k22, int, rg_v17, rg_v22);
			CMP_SWP(K, rg_k18, rg_k21, int, rg_v18, rg_v21);
			CMP_SWP(K, rg_k19, rg_k20, int, rg_v19, rg_v20);
			CMP_SWP(K, rg_k24, rg_k31, int, rg_v24, rg_v31);
			CMP_SWP(K, rg_k25, rg_k30, int, rg_v25, rg_v30);
			CMP_SWP(K, rg_k26, rg_k29, int, rg_v26, rg_v29);
			CMP_SWP(K, rg_k27, rg_k28, int, rg_v27, rg_v28);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k15, int, rg_v0, rg_v15);
			CMP_SWP(K, rg_k1, rg_k14, int, rg_v1, rg_v14);
			CMP_SWP(K, rg_k2, rg_k13, int, rg_v2, rg_v13);
			CMP_SWP(K, rg_k3, rg_k12, int, rg_v3, rg_v12);
			CMP_SWP(K, rg_k4, rg_k11, int, rg_v4, rg_v11);
			CMP_SWP(K, rg_k5, rg_k10, int, rg_v5, rg_v10);
			CMP_SWP(K, rg_k6, rg_k9, int, rg_v6, rg_v9);
			CMP_SWP(K, rg_k7, rg_k8, int, rg_v7, rg_v8);
			CMP_SWP(K, rg_k16, rg_k31, int, rg_v16, rg_v31);
			CMP_SWP(K, rg_k17, rg_k30, int, rg_v17, rg_v30);
			CMP_SWP(K, rg_k18, rg_k29, int, rg_v18, rg_v29);
			CMP_SWP(K, rg_k19, rg_k28, int, rg_v19, rg_v28);
			CMP_SWP(K, rg_k20, rg_k27, int, rg_v20, rg_v27);
			CMP_SWP(K, rg_k21, rg_k26, int, rg_v21, rg_v26);
			CMP_SWP(K, rg_k22, rg_k25, int, rg_v22, rg_v25);
			CMP_SWP(K, rg_k23, rg_k24, int, rg_v23, rg_v24);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k31, int, rg_v0, rg_v31);
			CMP_SWP(K, rg_k1, rg_k30, int, rg_v1, rg_v30);
			CMP_SWP(K, rg_k2, rg_k29, int, rg_v2, rg_v29);
			CMP_SWP(K, rg_k3, rg_k28, int, rg_v3, rg_v28);
			CMP_SWP(K, rg_k4, rg_k27, int, rg_v4, rg_v27);
			CMP_SWP(K, rg_k5, rg_k26, int, rg_v5, rg_v26);
			CMP_SWP(K, rg_k6, rg_k25, int, rg_v6, rg_v25);
			CMP_SWP(K, rg_k7, rg_k24, int, rg_v7, rg_v24);
			CMP_SWP(K, rg_k8, rg_k23, int, rg_v8, rg_v23);
			CMP_SWP(K, rg_k9, rg_k22, int, rg_v9, rg_v22);
			CMP_SWP(K, rg_k10, rg_k21, int, rg_v10, rg_v21);
			CMP_SWP(K, rg_k11, rg_k20, int, rg_v11, rg_v20);
			CMP_SWP(K, rg_k12, rg_k19, int, rg_v12, rg_v19);
			CMP_SWP(K, rg_k13, rg_k18, int, rg_v13, rg_v18);
			CMP_SWP(K, rg_k14, rg_k17, int, rg_v14, rg_v17);
			CMP_SWP(K, rg_k15, rg_k16, int, rg_v15, rg_v16);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x3, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x7, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0xf, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);
			// exch_intxn: generate exch_intxn()
			exch_intxn(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1f, bit5);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x8, bit4);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x4, bit3);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x2, bit2);
			// exch_paral: generate exch_paral()
			exch_paral(rg_k0, rg_k1, rg_k2, rg_k3, rg_k4, rg_k5, rg_k6, rg_k7, rg_k8, rg_k9, rg_k10, rg_k11, rg_k12, rg_k13, rg_k14, rg_k15, rg_k16, rg_k17, rg_k18, rg_k19, rg_k20, rg_k21, rg_k22, rg_k23, rg_k24, rg_k25, rg_k26, rg_k27, rg_k28, rg_k29, rg_k30, rg_k31, rg_v0, rg_v1, rg_v2, rg_v3, rg_v4, rg_v5, rg_v6, rg_v7, rg_v8, rg_v9, rg_v10, rg_v11, rg_v12, rg_v13, rg_v14, rg_v15, rg_v16, rg_v17, rg_v18, rg_v19, rg_v20, rg_v21, rg_v22, rg_v23, rg_v24, rg_v25, rg_v26, rg_v27, rg_v28, rg_v29, rg_v30, rg_v31, 0x1, bit1);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k16, int, rg_v0, rg_v16);
			CMP_SWP(K, rg_k1, rg_k17, int, rg_v1, rg_v17);
			CMP_SWP(K, rg_k2, rg_k18, int, rg_v2, rg_v18);
			CMP_SWP(K, rg_k3, rg_k19, int, rg_v3, rg_v19);
			CMP_SWP(K, rg_k4, rg_k20, int, rg_v4, rg_v20);
			CMP_SWP(K, rg_k5, rg_k21, int, rg_v5, rg_v21);
			CMP_SWP(K, rg_k6, rg_k22, int, rg_v6, rg_v22);
			CMP_SWP(K, rg_k7, rg_k23, int, rg_v7, rg_v23);
			CMP_SWP(K, rg_k8, rg_k24, int, rg_v8, rg_v24);
			CMP_SWP(K, rg_k9, rg_k25, int, rg_v9, rg_v25);
			CMP_SWP(K, rg_k10, rg_k26, int, rg_v10, rg_v26);
			CMP_SWP(K, rg_k11, rg_k27, int, rg_v11, rg_v27);
			CMP_SWP(K, rg_k12, rg_k28, int, rg_v12, rg_v28);
			CMP_SWP(K, rg_k13, rg_k29, int, rg_v13, rg_v29);
			CMP_SWP(K, rg_k14, rg_k30, int, rg_v14, rg_v30);
			CMP_SWP(K, rg_k15, rg_k31, int, rg_v15, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k8, int, rg_v0, rg_v8);
			CMP_SWP(K, rg_k1, rg_k9, int, rg_v1, rg_v9);
			CMP_SWP(K, rg_k2, rg_k10, int, rg_v2, rg_v10);
			CMP_SWP(K, rg_k3, rg_k11, int, rg_v3, rg_v11);
			CMP_SWP(K, rg_k4, rg_k12, int, rg_v4, rg_v12);
			CMP_SWP(K, rg_k5, rg_k13, int, rg_v5, rg_v13);
			CMP_SWP(K, rg_k6, rg_k14, int, rg_v6, rg_v14);
			CMP_SWP(K, rg_k7, rg_k15, int, rg_v7, rg_v15);
			CMP_SWP(K, rg_k16, rg_k24, int, rg_v16, rg_v24);
			CMP_SWP(K, rg_k17, rg_k25, int, rg_v17, rg_v25);
			CMP_SWP(K, rg_k18, rg_k26, int, rg_v18, rg_v26);
			CMP_SWP(K, rg_k19, rg_k27, int, rg_v19, rg_v27);
			CMP_SWP(K, rg_k20, rg_k28, int, rg_v20, rg_v28);
			CMP_SWP(K, rg_k21, rg_k29, int, rg_v21, rg_v29);
			CMP_SWP(K, rg_k22, rg_k30, int, rg_v22, rg_v30);
			CMP_SWP(K, rg_k23, rg_k31, int, rg_v23, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k4, int, rg_v0, rg_v4);
			CMP_SWP(K, rg_k1, rg_k5, int, rg_v1, rg_v5);
			CMP_SWP(K, rg_k2, rg_k6, int, rg_v2, rg_v6);
			CMP_SWP(K, rg_k3, rg_k7, int, rg_v3, rg_v7);
			CMP_SWP(K, rg_k8, rg_k12, int, rg_v8, rg_v12);
			CMP_SWP(K, rg_k9, rg_k13, int, rg_v9, rg_v13);
			CMP_SWP(K, rg_k10, rg_k14, int, rg_v10, rg_v14);
			CMP_SWP(K, rg_k11, rg_k15, int, rg_v11, rg_v15);
			CMP_SWP(K, rg_k16, rg_k20, int, rg_v16, rg_v20);
			CMP_SWP(K, rg_k17, rg_k21, int, rg_v17, rg_v21);
			CMP_SWP(K, rg_k18, rg_k22, int, rg_v18, rg_v22);
			CMP_SWP(K, rg_k19, rg_k23, int, rg_v19, rg_v23);
			CMP_SWP(K, rg_k24, rg_k28, int, rg_v24, rg_v28);
			CMP_SWP(K, rg_k25, rg_k29, int, rg_v25, rg_v29);
			CMP_SWP(K, rg_k26, rg_k30, int, rg_v26, rg_v30);
			CMP_SWP(K, rg_k27, rg_k31, int, rg_v27, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k2, int, rg_v0, rg_v2);
			CMP_SWP(K, rg_k1, rg_k3, int, rg_v1, rg_v3);
			CMP_SWP(K, rg_k4, rg_k6, int, rg_v4, rg_v6);
			CMP_SWP(K, rg_k5, rg_k7, int, rg_v5, rg_v7);
			CMP_SWP(K, rg_k8, rg_k10, int, rg_v8, rg_v10);
			CMP_SWP(K, rg_k9, rg_k11, int, rg_v9, rg_v11);
			CMP_SWP(K, rg_k12, rg_k14, int, rg_v12, rg_v14);
			CMP_SWP(K, rg_k13, rg_k15, int, rg_v13, rg_v15);
			CMP_SWP(K, rg_k16, rg_k18, int, rg_v16, rg_v18);
			CMP_SWP(K, rg_k17, rg_k19, int, rg_v17, rg_v19);
			CMP_SWP(K, rg_k20, rg_k22, int, rg_v20, rg_v22);
			CMP_SWP(K, rg_k21, rg_k23, int, rg_v21, rg_v23);
			CMP_SWP(K, rg_k24, rg_k26, int, rg_v24, rg_v26);
			CMP_SWP(K, rg_k25, rg_k27, int, rg_v25, rg_v27);
			CMP_SWP(K, rg_k28, rg_k30, int, rg_v28, rg_v30);
			CMP_SWP(K, rg_k29, rg_k31, int, rg_v29, rg_v31);
			// exch_paral: switch to exch_local()
			CMP_SWP(K, rg_k0, rg_k1, int, rg_v0, rg_v1);
			CMP_SWP(K, rg_k2, rg_k3, int, rg_v2, rg_v3);
			CMP_SWP(K, rg_k4, rg_k5, int, rg_v4, rg_v5);
			CMP_SWP(K, rg_k6, rg_k7, int, rg_v6, rg_v7);
			CMP_SWP(K, rg_k8, rg_k9, int, rg_v8, rg_v9);
			CMP_SWP(K, rg_k10, rg_k11, int, rg_v10, rg_v11);
			CMP_SWP(K, rg_k12, rg_k13, int, rg_v12, rg_v13);
			CMP_SWP(K, rg_k14, rg_k15, int, rg_v14, rg_v15);
			CMP_SWP(K, rg_k16, rg_k17, int, rg_v16, rg_v17);
			CMP_SWP(K, rg_k18, rg_k19, int, rg_v18, rg_v19);
			CMP_SWP(K, rg_k20, rg_k21, int, rg_v20, rg_v21);
			CMP_SWP(K, rg_k22, rg_k23, int, rg_v22, rg_v23);
			CMP_SWP(K, rg_k24, rg_k25, int, rg_v24, rg_v25);
			CMP_SWP(K, rg_k26, rg_k27, int, rg_v26, rg_v27);
			CMP_SWP(K, rg_k28, rg_k29, int, rg_v28, rg_v29);
			CMP_SWP(K, rg_k30, rg_k31, int, rg_v30, rg_v31);

			// Store register results to shared memory
			smem[(warp_id<<10) + (tid1<<5) + 0] = rg_k0;
			smem[(warp_id<<10) + (tid1<<5) + 1] = rg_k1;
			smem[(warp_id<<10) + (tid1<<5) + 2] = rg_k2;
			smem[(warp_id<<10) + (tid1<<5) + 3] = rg_k3;
			smem[(warp_id<<10) + (tid1<<5) + 4] = rg_k4;
			smem[(warp_id<<10) + (tid1<<5) + 5] = rg_k5;
			smem[(warp_id<<10) + (tid1<<5) + 6] = rg_k6;
			smem[(warp_id<<10) + (tid1<<5) + 7] = rg_k7;
			smem[(warp_id<<10) + (tid1<<5) + 8] = rg_k8;
			smem[(warp_id<<10) + (tid1<<5) + 9] = rg_k9;
			smem[(warp_id<<10) + (tid1<<5) + 10] = rg_k10;
			smem[(warp_id<<10) + (tid1<<5) + 11] = rg_k11;
			smem[(warp_id<<10) + (tid1<<5) + 12] = rg_k12;
			smem[(warp_id<<10) + (tid1<<5) + 13] = rg_k13;
			smem[(warp_id<<10) + (tid1<<5) + 14] = rg_k14;
			smem[(warp_id<<10) + (tid1<<5) + 15] = rg_k15;
			smem[(warp_id<<10) + (tid1<<5) + 16] = rg_k16;
			smem[(warp_id<<10) + (tid1<<5) + 17] = rg_k17;
			smem[(warp_id<<10) + (tid1<<5) + 18] = rg_k18;
			smem[(warp_id<<10) + (tid1<<5) + 19] = rg_k19;
			smem[(warp_id<<10) + (tid1<<5) + 20] = rg_k20;
			smem[(warp_id<<10) + (tid1<<5) + 21] = rg_k21;
			smem[(warp_id<<10) + (tid1<<5) + 22] = rg_k22;
			smem[(warp_id<<10) + (tid1<<5) + 23] = rg_k23;
			smem[(warp_id<<10) + (tid1<<5) + 24] = rg_k24;
			smem[(warp_id<<10) + (tid1<<5) + 25] = rg_k25;
			smem[(warp_id<<10) + (tid1<<5) + 26] = rg_k26;
			smem[(warp_id<<10) + (tid1<<5) + 27] = rg_k27;
			smem[(warp_id<<10) + (tid1<<5) + 28] = rg_k28;
			smem[(warp_id<<10) + (tid1<<5) + 29] = rg_k29;
			smem[(warp_id<<10) + (tid1<<5) + 30] = rg_k30;
			smem[(warp_id<<10) + (tid1<<5) + 31] = rg_k31;
			tmem[(warp_id<<10) + (tid1<<5) + 0] = rg_v0;
			tmem[(warp_id<<10) + (tid1<<5) + 1] = rg_v1;
			tmem[(warp_id<<10) + (tid1<<5) + 2] = rg_v2;
			tmem[(warp_id<<10) + (tid1<<5) + 3] = rg_v3;
			tmem[(warp_id<<10) + (tid1<<5) + 4] = rg_v4;
			tmem[(warp_id<<10) + (tid1<<5) + 5] = rg_v5;
			tmem[(warp_id<<10) + (tid1<<5) + 6] = rg_v6;
			tmem[(warp_id<<10) + (tid1<<5) + 7] = rg_v7;
			tmem[(warp_id<<10) + (tid1<<5) + 8] = rg_v8;
			tmem[(warp_id<<10) + (tid1<<5) + 9] = rg_v9;
			tmem[(warp_id<<10) + (tid1<<5) + 10] = rg_v10;
			tmem[(warp_id<<10) + (tid1<<5) + 11] = rg_v11;
			tmem[(warp_id<<10) + (tid1<<5) + 12] = rg_v12;
			tmem[(warp_id<<10) + (tid1<<5) + 13] = rg_v13;
			tmem[(warp_id<<10) + (tid1<<5) + 14] = rg_v14;
			tmem[(warp_id<<10) + (tid1<<5) + 15] = rg_v15;
			tmem[(warp_id<<10) + (tid1<<5) + 16] = rg_v16;
			tmem[(warp_id<<10) + (tid1<<5) + 17] = rg_v17;
			tmem[(warp_id<<10) + (tid1<<5) + 18] = rg_v18;
			tmem[(warp_id<<10) + (tid1<<5) + 19] = rg_v19;
			tmem[(warp_id<<10) + (tid1<<5) + 20] = rg_v20;
			tmem[(warp_id<<10) + (tid1<<5) + 21] = rg_v21;
			tmem[(warp_id<<10) + (tid1<<5) + 22] = rg_v22;
			tmem[(warp_id<<10) + (tid1<<5) + 23] = rg_v23;
			tmem[(warp_id<<10) + (tid1<<5) + 24] = rg_v24;
			tmem[(warp_id<<10) + (tid1<<5) + 25] = rg_v25;
			tmem[(warp_id<<10) + (tid1<<5) + 26] = rg_v26;
			tmem[(warp_id<<10) + (tid1<<5) + 27] = rg_v27;
			tmem[(warp_id<<10) + (tid1<<5) + 28] = rg_v28;
			tmem[(warp_id<<10) + (tid1<<5) + 29] = rg_v29;
			tmem[(warp_id<<10) + (tid1<<5) + 30] = rg_v30;
			tmem[(warp_id<<10) + (tid1<<5) + 31] = rg_v31;
		}
		__syncthreads();

		// Merge in 4 steps
		int grp_start_wp_id;
		int grp_start_off;
		int lhs_len;
		int rhs_len;
		int gran;
		int s_a;
		int s_b;
		bool p;
		K tmp_k0;
		K tmp_k1;
		int tmp_v0;
		int tmp_v1;
		K *start;

		// Step 0
		grp_start_wp_id = ((warp_id>>1)<<1);
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 1024;
			rhs_len = 1024;
			gran = tid1<<5;
			gran += (warp_id & 1) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 0) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		// Step 1
		grp_start_wp_id = ((warp_id>>2)<<2);
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 2048;
			rhs_len = 1024 * (1 +
				(grp_start_wp_id + 3 < full_wp) );
			gran = tid1<<5;
			gran += (warp_id & 3) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 1) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		// Step 2
		grp_start_wp_id = ((warp_id>>3)<<3);
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 4096;
			rhs_len = 1024 * (1 +
				(grp_start_wp_id + 5 < full_wp) +
				(grp_start_wp_id + 6 < full_wp) +
				(grp_start_wp_id + 7 < full_wp) );
			gran = tid1<<5;
			gran += (warp_id & 7) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 2) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		// Step 3
		grp_start_wp_id = ((warp_id>>4)<<4);
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			grp_start_off = grp_start_wp_id * 1024;
			lhs_len = 8192;
			rhs_len = 1024 * (1 +
				(grp_start_wp_id + 9 < full_wp) +
				(grp_start_wp_id + 10 < full_wp) +
				(grp_start_wp_id + 11 < full_wp) +
				(grp_start_wp_id + 12 < full_wp) +
				(grp_start_wp_id + 13 < full_wp) +
				(grp_start_wp_id + 14 < full_wp) +
				(grp_start_wp_id + 15 < full_wp) );
			gran = tid1<<5;
			gran += (warp_id & 15) * 1024;
			start = smem + grp_start_off;
			s_a = find_kth3(start, lhs_len, start+lhs_len, rhs_len, gran);
			s_b = lhs_len + gran - s_a;
			tmp_k0 = (s_a<lhs_len        )?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
			tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
			if(s_a<lhs_len        ) tmp_v0 = tmem[grp_start_off+s_a];
			if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k0 = p ? tmp_k0 : tmp_k1;
			rg_v0 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k1 = p ? tmp_k0 : tmp_k1;
			rg_v1 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k2 = p ? tmp_k0 : tmp_k1;
			rg_v2 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k3 = p ? tmp_k0 : tmp_k1;
			rg_v3 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k4 = p ? tmp_k0 : tmp_k1;
			rg_v4 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k5 = p ? tmp_k0 : tmp_k1;
			rg_v5 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k6 = p ? tmp_k0 : tmp_k1;
			rg_v6 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k7 = p ? tmp_k0 : tmp_k1;
			rg_v7 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k8 = p ? tmp_k0 : tmp_k1;
			rg_v8 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k9 = p ? tmp_k0 : tmp_k1;
			rg_v9 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k10 = p ? tmp_k0 : tmp_k1;
			rg_v10 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k11 = p ? tmp_k0 : tmp_k1;
			rg_v11 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k12 = p ? tmp_k0 : tmp_k1;
			rg_v12 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k13 = p ? tmp_k0 : tmp_k1;
			rg_v13 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k14 = p ? tmp_k0 : tmp_k1;
			rg_v14 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k15 = p ? tmp_k0 : tmp_k1;
			rg_v15 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k16 = p ? tmp_k0 : tmp_k1;
			rg_v16 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k17 = p ? tmp_k0 : tmp_k1;
			rg_v17 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k18 = p ? tmp_k0 : tmp_k1;
			rg_v18 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k19 = p ? tmp_k0 : tmp_k1;
			rg_v19 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k20 = p ? tmp_k0 : tmp_k1;
			rg_v20 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k21 = p ? tmp_k0 : tmp_k1;
			rg_v21 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k22 = p ? tmp_k0 : tmp_k1;
			rg_v22 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k23 = p ? tmp_k0 : tmp_k1;
			rg_v23 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k24 = p ? tmp_k0 : tmp_k1;
			rg_v24 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k25 = p ? tmp_k0 : tmp_k1;
			rg_v25 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k26 = p ? tmp_k0 : tmp_k1;
			rg_v26 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k27 = p ? tmp_k0 : tmp_k1;
			rg_v27 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k28 = p ? tmp_k0 : tmp_k1;
			rg_v28 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k29 = p ? tmp_k0 : tmp_k1;
			rg_v29 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k30 = p ? tmp_k0 : tmp_k1;
			rg_v30 = p ? tmp_v0 : tmp_v1;
			if (p) {
				++s_a;
				tmp_k0 = (s_a<lhs_len)?smem[grp_start_off+s_a]:std::numeric_limits<K>::max();
				if(s_a<lhs_len) tmp_v0 = tmem[grp_start_off+s_a];
			} else {
				++s_b;
				tmp_k1 = (s_b<lhs_len+rhs_len)?smem[grp_start_off+s_b]:std::numeric_limits<K>::max();
				if(s_b<lhs_len+rhs_len) tmp_v1 = tmem[grp_start_off+s_b];
			}
			p = (s_b>=lhs_len+rhs_len)||((s_a<lhs_len)&&(tmp_k0<=tmp_k1));
			rg_k31 = p ? tmp_k0 : tmp_k1;
			rg_v31 = p ? tmp_v0 : tmp_v1;
		}

		__syncthreads();
		// Store merged results back into shared memory
		if(grp_start_wp_id + (1 << 3) < full_wp && warp_id < full_wp) {
			smem[grp_start_off + gran + 0] = rg_k0;
			smem[grp_start_off + gran + 1] = rg_k1;
			smem[grp_start_off + gran + 2] = rg_k2;
			smem[grp_start_off + gran + 3] = rg_k3;
			smem[grp_start_off + gran + 4] = rg_k4;
			smem[grp_start_off + gran + 5] = rg_k5;
			smem[grp_start_off + gran + 6] = rg_k6;
			smem[grp_start_off + gran + 7] = rg_k7;
			smem[grp_start_off + gran + 8] = rg_k8;
			smem[grp_start_off + gran + 9] = rg_k9;
			smem[grp_start_off + gran + 10] = rg_k10;
			smem[grp_start_off + gran + 11] = rg_k11;
			smem[grp_start_off + gran + 12] = rg_k12;
			smem[grp_start_off + gran + 13] = rg_k13;
			smem[grp_start_off + gran + 14] = rg_k14;
			smem[grp_start_off + gran + 15] = rg_k15;
			smem[grp_start_off + gran + 16] = rg_k16;
			smem[grp_start_off + gran + 17] = rg_k17;
			smem[grp_start_off + gran + 18] = rg_k18;
			smem[grp_start_off + gran + 19] = rg_k19;
			smem[grp_start_off + gran + 20] = rg_k20;
			smem[grp_start_off + gran + 21] = rg_k21;
			smem[grp_start_off + gran + 22] = rg_k22;
			smem[grp_start_off + gran + 23] = rg_k23;
			smem[grp_start_off + gran + 24] = rg_k24;
			smem[grp_start_off + gran + 25] = rg_k25;
			smem[grp_start_off + gran + 26] = rg_k26;
			smem[grp_start_off + gran + 27] = rg_k27;
			smem[grp_start_off + gran + 28] = rg_k28;
			smem[grp_start_off + gran + 29] = rg_k29;
			smem[grp_start_off + gran + 30] = rg_k30;
			smem[grp_start_off + gran + 31] = rg_k31;
			tmem[grp_start_off + gran + 0] = rg_v0;
			tmem[grp_start_off + gran + 1] = rg_v1;
			tmem[grp_start_off + gran + 2] = rg_v2;
			tmem[grp_start_off + gran + 3] = rg_v3;
			tmem[grp_start_off + gran + 4] = rg_v4;
			tmem[grp_start_off + gran + 5] = rg_v5;
			tmem[grp_start_off + gran + 6] = rg_v6;
			tmem[grp_start_off + gran + 7] = rg_v7;
			tmem[grp_start_off + gran + 8] = rg_v8;
			tmem[grp_start_off + gran + 9] = rg_v9;
			tmem[grp_start_off + gran + 10] = rg_v10;
			tmem[grp_start_off + gran + 11] = rg_v11;
			tmem[grp_start_off + gran + 12] = rg_v12;
			tmem[grp_start_off + gran + 13] = rg_v13;
			tmem[grp_start_off + gran + 14] = rg_v14;
			tmem[grp_start_off + gran + 15] = rg_v15;
			tmem[grp_start_off + gran + 16] = rg_v16;
			tmem[grp_start_off + gran + 17] = rg_v17;
			tmem[grp_start_off + gran + 18] = rg_v18;
			tmem[grp_start_off + gran + 19] = rg_v19;
			tmem[grp_start_off + gran + 20] = rg_v20;
			tmem[grp_start_off + gran + 21] = rg_v21;
			tmem[grp_start_off + gran + 22] = rg_v22;
			tmem[grp_start_off + gran + 23] = rg_v23;
			tmem[grp_start_off + gran + 24] = rg_v24;
			tmem[grp_start_off + gran + 25] = rg_v25;
			tmem[grp_start_off + gran + 26] = rg_v26;
			tmem[grp_start_off + gran + 27] = rg_v27;
			tmem[grp_start_off + gran + 28] = rg_v28;
			tmem[grp_start_off + gran + 29] = rg_v29;
			tmem[grp_start_off + gran + 30] = rg_v30;
			tmem[grp_start_off + gran + 31] = rg_v31;
		}
		__syncthreads();

		if ((warp_id << 10) + 0 + tid1 < seg_size) keyB[k + (warp_id << 10) + 0 + tid1] = smem[(warp_id << 10) + 0 + tid1];
		if ((warp_id << 10) + 32 + tid1 < seg_size) keyB[k + (warp_id << 10) + 32 + tid1] = smem[(warp_id << 10) + 32 + tid1];
		if ((warp_id << 10) + 64 + tid1 < seg_size) keyB[k + (warp_id << 10) + 64 + tid1] = smem[(warp_id << 10) + 64 + tid1];
		if ((warp_id << 10) + 96 + tid1 < seg_size) keyB[k + (warp_id << 10) + 96 + tid1] = smem[(warp_id << 10) + 96 + tid1];
		if ((warp_id << 10) + 128 + tid1 < seg_size) keyB[k + (warp_id << 10) + 128 + tid1] = smem[(warp_id << 10) + 128 + tid1];
		if ((warp_id << 10) + 160 + tid1 < seg_size) keyB[k + (warp_id << 10) + 160 + tid1] = smem[(warp_id << 10) + 160 + tid1];
		if ((warp_id << 10) + 192 + tid1 < seg_size) keyB[k + (warp_id << 10) + 192 + tid1] = smem[(warp_id << 10) + 192 + tid1];
		if ((warp_id << 10) + 224 + tid1 < seg_size) keyB[k + (warp_id << 10) + 224 + tid1] = smem[(warp_id << 10) + 224 + tid1];
		if ((warp_id << 10) + 256 + tid1 < seg_size) keyB[k + (warp_id << 10) + 256 + tid1] = smem[(warp_id << 10) + 256 + tid1];
		if ((warp_id << 10) + 288 + tid1 < seg_size) keyB[k + (warp_id << 10) + 288 + tid1] = smem[(warp_id << 10) + 288 + tid1];
		if ((warp_id << 10) + 320 + tid1 < seg_size) keyB[k + (warp_id << 10) + 320 + tid1] = smem[(warp_id << 10) + 320 + tid1];
		if ((warp_id << 10) + 352 + tid1 < seg_size) keyB[k + (warp_id << 10) + 352 + tid1] = smem[(warp_id << 10) + 352 + tid1];
		if ((warp_id << 10) + 384 + tid1 < seg_size) keyB[k + (warp_id << 10) + 384 + tid1] = smem[(warp_id << 10) + 384 + tid1];
		if ((warp_id << 10) + 416 + tid1 < seg_size) keyB[k + (warp_id << 10) + 416 + tid1] = smem[(warp_id << 10) + 416 + tid1];
		if ((warp_id << 10) + 448 + tid1 < seg_size) keyB[k + (warp_id << 10) + 448 + tid1] = smem[(warp_id << 10) + 448 + tid1];
		if ((warp_id << 10) + 480 + tid1 < seg_size) keyB[k + (warp_id << 10) + 480 + tid1] = smem[(warp_id << 10) + 480 + tid1];
		if ((warp_id << 10) + 512 + tid1 < seg_size) keyB[k + (warp_id << 10) + 512 + tid1] = smem[(warp_id << 10) + 512 + tid1];
		if ((warp_id << 10) + 544 + tid1 < seg_size) keyB[k + (warp_id << 10) + 544 + tid1] = smem[(warp_id << 10) + 544 + tid1];
		if ((warp_id << 10) + 576 + tid1 < seg_size) keyB[k + (warp_id << 10) + 576 + tid1] = smem[(warp_id << 10) + 576 + tid1];
		if ((warp_id << 10) + 608 + tid1 < seg_size) keyB[k + (warp_id << 10) + 608 + tid1] = smem[(warp_id << 10) + 608 + tid1];
		if ((warp_id << 10) + 640 + tid1 < seg_size) keyB[k + (warp_id << 10) + 640 + tid1] = smem[(warp_id << 10) + 640 + tid1];
		if ((warp_id << 10) + 672 + tid1 < seg_size) keyB[k + (warp_id << 10) + 672 + tid1] = smem[(warp_id << 10) + 672 + tid1];
		if ((warp_id << 10) + 704 + tid1 < seg_size) keyB[k + (warp_id << 10) + 704 + tid1] = smem[(warp_id << 10) + 704 + tid1];
		if ((warp_id << 10) + 736 + tid1 < seg_size) keyB[k + (warp_id << 10) + 736 + tid1] = smem[(warp_id << 10) + 736 + tid1];
		if ((warp_id << 10) + 768 + tid1 < seg_size) keyB[k + (warp_id << 10) + 768 + tid1] = smem[(warp_id << 10) + 768 + tid1];
		if ((warp_id << 10) + 800 + tid1 < seg_size) keyB[k + (warp_id << 10) + 800 + tid1] = smem[(warp_id << 10) + 800 + tid1];
		if ((warp_id << 10) + 832 + tid1 < seg_size) keyB[k + (warp_id << 10) + 832 + tid1] = smem[(warp_id << 10) + 832 + tid1];
		if ((warp_id << 10) + 864 + tid1 < seg_size) keyB[k + (warp_id << 10) + 864 + tid1] = smem[(warp_id << 10) + 864 + tid1];
		if ((warp_id << 10) + 896 + tid1 < seg_size) keyB[k + (warp_id << 10) + 896 + tid1] = smem[(warp_id << 10) + 896 + tid1];
		if ((warp_id << 10) + 928 + tid1 < seg_size) keyB[k + (warp_id << 10) + 928 + tid1] = smem[(warp_id << 10) + 928 + tid1];
		if ((warp_id << 10) + 960 + tid1 < seg_size) keyB[k + (warp_id << 10) + 960 + tid1] = smem[(warp_id << 10) + 960 + tid1];
		if ((warp_id << 10) + 992 + tid1 < seg_size) keyB[k + (warp_id << 10) + 992 + tid1] = smem[(warp_id << 10) + 992 + tid1];

		if ((warp_id << 10) + 0 + tid1 < seg_size) valB[k + (warp_id << 10) + 0 + tid1] = val[k + tmem[(warp_id << 10) + 0 + tid1]];
		if ((warp_id << 10) + 32 + tid1 < seg_size) valB[k + (warp_id << 10) + 32 + tid1] = val[k + tmem[(warp_id << 10) + 32 + tid1]];
		if ((warp_id << 10) + 64 + tid1 < seg_size) valB[k + (warp_id << 10) + 64 + tid1] = val[k + tmem[(warp_id << 10) + 64 + tid1]];
		if ((warp_id << 10) + 96 + tid1 < seg_size) valB[k + (warp_id << 10) + 96 + tid1] = val[k + tmem[(warp_id << 10) + 96 + tid1]];
		if ((warp_id << 10) + 128 + tid1 < seg_size) valB[k + (warp_id << 10) + 128 + tid1] = val[k + tmem[(warp_id << 10) + 128 + tid1]];
		if ((warp_id << 10) + 160 + tid1 < seg_size) valB[k + (warp_id << 10) + 160 + tid1] = val[k + tmem[(warp_id << 10) + 160 + tid1]];
		if ((warp_id << 10) + 192 + tid1 < seg_size) valB[k + (warp_id << 10) + 192 + tid1] = val[k + tmem[(warp_id << 10) + 192 + tid1]];
		if ((warp_id << 10) + 224 + tid1 < seg_size) valB[k + (warp_id << 10) + 224 + tid1] = val[k + tmem[(warp_id << 10) + 224 + tid1]];
		if ((warp_id << 10) + 256 + tid1 < seg_size) valB[k + (warp_id << 10) + 256 + tid1] = val[k + tmem[(warp_id << 10) + 256 + tid1]];
		if ((warp_id << 10) + 288 + tid1 < seg_size) valB[k + (warp_id << 10) + 288 + tid1] = val[k + tmem[(warp_id << 10) + 288 + tid1]];
		if ((warp_id << 10) + 320 + tid1 < seg_size) valB[k + (warp_id << 10) + 320 + tid1] = val[k + tmem[(warp_id << 10) + 320 + tid1]];
		if ((warp_id << 10) + 352 + tid1 < seg_size) valB[k + (warp_id << 10) + 352 + tid1] = val[k + tmem[(warp_id << 10) + 352 + tid1]];
		if ((warp_id << 10) + 384 + tid1 < seg_size) valB[k + (warp_id << 10) + 384 + tid1] = val[k + tmem[(warp_id << 10) + 384 + tid1]];
		if ((warp_id << 10) + 416 + tid1 < seg_size) valB[k + (warp_id << 10) + 416 + tid1] = val[k + tmem[(warp_id << 10) + 416 + tid1]];
		if ((warp_id << 10) + 448 + tid1 < seg_size) valB[k + (warp_id << 10) + 448 + tid1] = val[k + tmem[(warp_id << 10) + 448 + tid1]];
		if ((warp_id << 10) + 480 + tid1 < seg_size) valB[k + (warp_id << 10) + 480 + tid1] = val[k + tmem[(warp_id << 10) + 480 + tid1]];
		if ((warp_id << 10) + 512 + tid1 < seg_size) valB[k + (warp_id << 10) + 512 + tid1] = val[k + tmem[(warp_id << 10) + 512 + tid1]];
		if ((warp_id << 10) + 544 + tid1 < seg_size) valB[k + (warp_id << 10) + 544 + tid1] = val[k + tmem[(warp_id << 10) + 544 + tid1]];
		if ((warp_id << 10) + 576 + tid1 < seg_size) valB[k + (warp_id << 10) + 576 + tid1] = val[k + tmem[(warp_id << 10) + 576 + tid1]];
		if ((warp_id << 10) + 608 + tid1 < seg_size) valB[k + (warp_id << 10) + 608 + tid1] = val[k + tmem[(warp_id << 10) + 608 + tid1]];
		if ((warp_id << 10) + 640 + tid1 < seg_size) valB[k + (warp_id << 10) + 640 + tid1] = val[k + tmem[(warp_id << 10) + 640 + tid1]];
		if ((warp_id << 10) + 672 + tid1 < seg_size) valB[k + (warp_id << 10) + 672 + tid1] = val[k + tmem[(warp_id << 10) + 672 + tid1]];
		if ((warp_id << 10) + 704 + tid1 < seg_size) valB[k + (warp_id << 10) + 704 + tid1] = val[k + tmem[(warp_id << 10) + 704 + tid1]];
		if ((warp_id << 10) + 736 + tid1 < seg_size) valB[k + (warp_id << 10) + 736 + tid1] = val[k + tmem[(warp_id << 10) + 736 + tid1]];
		if ((warp_id << 10) + 768 + tid1 < seg_size) valB[k + (warp_id << 10) + 768 + tid1] = val[k + tmem[(warp_id << 10) + 768 + tid1]];
		if ((warp_id << 10) + 800 + tid1 < seg_size) valB[k + (warp_id << 10) + 800 + tid1] = val[k + tmem[(warp_id << 10) + 800 + tid1]];
		if ((warp_id << 10) + 832 + tid1 < seg_size) valB[k + (warp_id << 10) + 832 + tid1] = val[k + tmem[(warp_id << 10) + 832 + tid1]];
		if ((warp_id << 10) + 864 + tid1 < seg_size) valB[k + (warp_id << 10) + 864 + tid1] = val[k + tmem[(warp_id << 10) + 864 + tid1]];
		if ((warp_id << 10) + 896 + tid1 < seg_size) valB[k + (warp_id << 10) + 896 + tid1] = val[k + tmem[(warp_id << 10) + 896 + tid1]];
		if ((warp_id << 10) + 928 + tid1 < seg_size) valB[k + (warp_id << 10) + 928 + tid1] = val[k + tmem[(warp_id << 10) + 928 + tid1]];
		if ((warp_id << 10) + 960 + tid1 < seg_size) valB[k + (warp_id << 10) + 960 + tid1] = val[k + tmem[(warp_id << 10) + 960 + tid1]];
		if ((warp_id << 10) + 992 + tid1 < seg_size) valB[k + (warp_id << 10) + 992 + tid1] = val[k + tmem[(warp_id << 10) + 992 + tid1]];
	}
}

#endif
